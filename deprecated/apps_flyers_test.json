[
  {
    "text": "At a glance: A user who views an ad (impression) and subsequently installs the app, is attributed by view-through attribution. View-through attribution measures installs, re-attributions, and re-engagements of users who viewed an ad but didn't click on it. View-through attribution flow Terminology Impression: The display of an ad to a user regardless of any click or other user engagement. Install: In this article, means installs, re-attributions, and re-engagements. View-through attribution: Attributing installs to a media source after the user sees an impression. View-through attribution principles Both device ID matching and probabilistic modeling (which you must turn on) are supported. Supported by partners listed in the Integrated Partners view-through attribution partner list. Impressions are candidates for view-through attribution using the following principles: The impression occurred within the view-through lookback window (default 24 hours). If multiple impressions are found, the most recent impression is considered. Clicks have priority over impressions. This means that if there are clicks in the click-through lookback window, the most recent click wins. The most recent impression is attributed as a contributor (assist). View-through lookback window For non-SRNs, the view-through attribution lookback window duration is 1-24 hours. For SRNs, the lookback window can be longer. To set the window: Non-SRNs: Set the duration using impression attribution links by setting the af_viewthrough_lookback parameter. If the parameter isn't set, a default 24 hours window is used. SRNs: The window is determined by the SRN. We recommend setting the same value as the SRN's in AppsFlyer. View-through attribution reporting and metrics Aggregate data: Ad networks report aggregate impression data to AppsFlyer via API, or on a per-impression basis. Consider that impression counting and reporting is defined by each partner individually. See definitions of impressions and clicks by major integrated partners.The related metrics are available in the Overview dashboard and via other reporting tools. The metrics available are: Impressions: Number of impressions displayed during a given period. View-throughs: The number of installs attributed using view-through attribution. Raw-data: User-level data (raw data) of users attributed via view-through attribution is available and similar to that of users attributed by click. However, some partners restrict the availability of this data. Impression data (similar to click data) is available. The attributed_touch_type field contains the value impression. View-through operations Set impression links Ad networks send impression links to AppsFlyer populated with campaign and other details similar to those included in click-through attribution links. The links are sent in real-time so that if an install follows an impression, it is attributed correctly. Consider the following in preparing links: The base URL is http://impression.appsflyer.com. Both HTTP and HTTPS protocols are supported. Use a GET request. Include device IDs where available: IDFA, GAID, IDFV, and so on. Include probabilistic modeling parameters. The device ID values can be hashed for better security using SHA1. The parameter name should begin with \"sha1_\" and be followed by the parameter name and the hashed value, for example, sha1_idfa, sha1_advertising_id, sha1_android_id, and sha1_imei. Example http://impression.appsflyer.com/{app-id}?c={campaign name}&pid={media source} &af_viewthrough_lookback=1d&af_prt={agency_name}&af_siteid={site id value} &af_sub1={free value}&idfa={idfa value} Set custom impression links Advertisers utilize attribution impression links with their own custom media sources, for example, website banners. When advertisers create custom attribution links, they get full impression links, which can be fired every time a user engages with their owned ads. Custom impression links (created via OneLink) can also be used to perform view-through attribution of mobile website visitors.Learn more about creating custom impression URLs. Turn off view-through-attribution By default, view-through attribution is turned on. If AppsFlyer receives a valid impression attribution link, the impression participates in the attribution flow. Since view-through attribution is enabled by default, it's important that advertisers contractually agree with the network in advance whether or not their view-through attribution should be enabled. View-through attribution can be disabled per media source. However, if impressions are received, and view-through attribution is disabled: Impression metrics are available in the dashboard. The attribution process ignores these impressions. To turn off view-through-attribution: In AppsFlyer, go to Integration > Integrated Partners. Select the integrated partner. In the Integration tab, turn off Install view-through attribution. Click Save integration. In regard to SRNs: Turning off view-through attribution in AppsFlyer doesn't do the same on the network side. Make sure that you align the view-through settings in both AppsFlyer and the networks to avoid discrepancies. View VTA partner list The list of ad network partners supporting view-through attribution is available via the dashboard. To view the list: In AppsFlyer, go toConfiguration>Integrated Partners. SelectAll integrations. In thePartner capabilityfilter, selectView-through.The list of partners displays."
  },
  {
    "text": "At a glance: Get everything set up to make the most of your AppsFlyer account. Understand the steps, timelines, and dependencies for getting your apps and your team on board. Introduction This document helps marketer (app owner) product managersplan and execute their onboarding with AppsFlyer. For every item, the owner and approximate implementation time are provided. Note that: Step 1 (account setup) is done once by an account admin. Steps 2-4 are mandatory for every app added to AppsFlyer (except where stated as optional). Certain items from step 5 may be mandatory to meet your business goals. The time estimates in this article are intended as general guidance only. They are based on our experience working with many new customers, but we recognize that every app owner, app, and implementation is different. Your actual time requirements may vary. Step 1: Account setup Item Owner Time Comments Sign up with AppsFlyer Account admin 5 mins Ideally, an account admin is a real AppsFlyer user who can receive important messages when needed. Add account users who will use the AppsFlyer dashboard, and set their permissions Account admin 1 min per account user If adding an account user fails, it's often because their email address was added to a different account. To add them to the new account, either use a different email address or delete them from the other account. Result: Welcome! You now have an active AppsFlyer account and account users who can access it. Tip New to AppsFlyer and wonder what it can do for you? Watch this 6-minute video. Step 2: App setup Complete these items for every app you want to work with in AppsFlyer Item Owner Time Comments Add your app to the AppsFlyer account Account admin 1 min If adding an app fails, it's often because it was previously defined in a different account (typically an ad agency that your marketers work with). Contact your CSM or hello@appsflyer.com to transfer the app to your account. See additional troubleshooting steps for adding apps. Set the app time zone and currency Account admin 1 min Set the app'sre-attribution window (on the App settings page) Account admin 1 min The re-attribution window is the period, starting from the date of the first install, during which re-installs from the same device are not attributed as new installs. The default value is 90 days, which you can customize as needed. [Optional] Migrate existing user devices into AppsFlyer Account admin(with the assistance of your AppsFlyer CSM or the support team at hello@appsflyer.com) 2 hours If your app already has a substantial user base, consider migrating them into AppsFlyer to avoid double charges. Result: Your apps are now defined in the AppsFlyer dashboard. Step 3: SDK integration Complete these items for every app you've defined in AppsFlyer (step 2) Item Owner Time Comments Consider the available options and select the SDK functionalities you want your app to use Product manager 1 hour Some considerations beyond basic attribution: Will your campaigns deep link users into the app? Will the app need to access attribution or deep-linking data? Should AppsFlyer data contain your Customer User ID for reference? How will you implement privacy settings for iOS 14+ devices? Will you measure uninstalls, run cross-promotion campaigns, and more? Do you have a CTV app? See our CTV overview. Select which in-app events to record Product manager 1 hour Recording the post-installation events your users perform in the app helps you better understand the quality of your users. Save yourself some time by using our comprehensive list of recommended in-app events and parameters for your vertical. Save your developers time (and make them happy) with ready-made code snippets for each event. Select methods for retrieving attribution /deep-linking data Product manager 30 mins Learn more about the available methods: Pull API Push API Unified deep linking API Get conversion data Implementation by developer App developer 3 hours AppsFlyer resources for your developers: Android iOS Unity Windows phone Other platforms Integration testing Product manager/App developer 1 hour You can test your SDK integration before or after your app is live in the app store. You can use debug apps to keep your app data clean. Be sure to register your test devices. Release new app version Product manager 1 hour Prepare for iOS App Store review. Result: Your apps are ready for install attribution, in-app event measurement, and other AppsFlyer functionalities that won\u2019t require additional dev resources. Step 4: Attribution setup Complete these items for every app you've defined in AppsFlyer (step 2) Item Owner Time Comments Set up paid media sources for attribution in AppsFlyer Product manager/Marketer 15 mins per media source Learn about attributing Self Reporting Networks (SRNs), specifically: Google Ads Facebook Ads Apple Search Ads GMP (Doubleclick) Learn about attributing non-SRN ad networks: Other integrated partners AppsFlyer attribution link structure and parameters Use OneLink to attribute owned media sources: mobile websites, social media, user invites, and more Product manager 1 hour Learn about OneLink-based solutions for your owned-media use cases Owned media developer implementation App developer 0-6.5 hours (depending on the implemented solutions) For developers: Getting started with Deep linking Set up attribution windows Product manager 2 mins per media source Learn more: Click and view-through lookback windows explained [Optional] Enable retargeting campaigns Product manager 2 mins Activate Retargeting on the App Settings page. Learn more: Retargeting guide Result: All media sources bringing traffic into your apps are attributed whenever new or returning users engage with them. Step 5: Additional setup Complete relevant items for every app you've defined in AppsFlyer (step 2) Item Owner Additional resources Optimize user acquisition campaigns by recording revenue Product manager/Developers In-app purchase validations Ad monetization User subscriptions Learn about methods to aggregate and view marketing cost data Product manager Xpend\u2014cost aggregation overview Set up other 3rd-party platforms your app works with Product manager/Developers mParticle Segment Mixpanel Amplitude Adobe Analytics (Omniture) Braze Check out these AppsFlyer premium features that can save you time and money. Product manager Audiences Pivot table Data Locker Protect your campaigns from fraud and mistargeting Product manager Protect360\u2014Anti-fraud solution Use Validation rules to ensure campaigns are not mistargeted Set Live Alerts to monitor a wide range of KPIs in real-time Implement Server-to-Server API for in-app events reported outside the app Product manager/Developers S2S REST API Measure uninstall rates for your media sources Product manager/Developers Uninstall measurement Gain a unified view of customer journeys across channels, platforms, and devices Product manager/Developers People-Based Attribution (PBA) Ensure compliance with privacy regulations: GDPR,CCPA, etc. Product manager/Developers Allowing users to opt-out of attribution. Enrich your knowledge Recommended for all AppsFlyer users Item Time Get to know the AppsFlyer overview dashboard 15 mins Explore the difference between Lifetime Value (LTV) data and activity data in AppsFlyer (solving the mystery of why the in-app events summary differs between the Overview and Activity dashboards) 15 mins Understand the AppsFlyerattribution model 30 mins Learn about aggregate reporting tools and analytics 30 mins Learn about raw data reporting 30 mins Related Tip New to UA (user acquisition)? Learn all about the biggest challenges and critical elements of planning, executing, and continuously optimizing your user acquisition efforts. Note New to AppsFlyer but not a marketer? No worries!Choose the guide for you below and get started: Getting started for agencies Getting started for ad networks"
  },
  {
    "text": "At a glance: Use AppsFlyer with Trusted Web Activities (TWA) to measure installs and record in-app events. Introduction What are Trusted Web Activities? Trusted web activities (TWA) are a new way to integrate web content with your Android app. The challenge with TWA is to be able to record in-app events. This challenge is addressed in this article. For more information about TWA, see here. TWA can also be used with Progressive Web Apps. What are Progressive Web Apps? Progressive Web Apps (PWA) are apps that deliver app-like experience but are actually completely web-based. One form of PWA is an Android app whose activities are TWA-based. This is the form of PWA that is discussed in this article. TWA enables you to embed your PWA inside a standalone android application, effectively allowing you to feature your existing PWA application on Play Store. The other form, one that is purely web-based, is not discussed in this article. For more information about PWA, see here. This tab discusses PWA thatis embedded in a Trusted Web Activity, an in app full screen web browser. Such apps have the Android global application class but whose activities are solely web-based. This form of PWA allows you to measure installs. The other form of PWA, those that are purely web-based, doesn't give you the option to measure installs. TWA Sending in-app events from TWA In-app events are sent using the AppsFlyer SDK from native app activities. Since TWA is web-based and not a native activity, you cannot send in-app events using the AppsFlyer SDK. You can use server-to-server in-app eventsas an alternative. Follow the instructions below to send server-to-server events with TWA. Prerequisites Before you can start sending events from TWA to AppsFlyer, do the following: Add the following repository to the project level gradle file: maven { url \"https://jitpack.io\"} Add the following libraries: For android.support libraries: Add the following in your build.gradle:implementation 'com.github.GoogleChrome.custom-tabs-client:customtabs:91b4a1270b' Import the following libraries: import android.support.customtabs.CustomTabsClient; import android.support.customtabs.CustomTabsIntent; import android.support.customtabs.CustomTabsServiceConnection; import android.support.customtabs.CustomTabsSession; import android.support.customtabs.trusted.TrustedWebActivityIntentBuilder; import static android.support.customtabs.TrustedWebUtils.EXTRA_LAUNCH_AS_TRUSTED_WEB_ACTIVITY For androidX libraries: Add the following in your build.gradle: implementation 'com.github.GoogleChrome:android-browser-helper:ff8dfc4ed3' Import the following libraries: import androidx.browser.customtabs.CustomTabsClient; import androidx.browser.customtabs.CustomTabsIntent; import androidx.browser.customtabs.CustomTabsServiceConnection; import androidx.browser.customtabs.CustomTabsSession; import androidx.browser.trusted.TrustedWebActivityIntentBuilder; Getting the AppsFlyer ID To send server-to-server events, you need the AppsFlyer ID. You can get the AppsFlyer ID from AppsFlyer Android SDK. First, make sure to integrate the AppsFlyer Android SDK. You can then get the AppsFlyer ID using the following SDK API: String appsflyerId = AppsFlyerLib.getInstance().getAppsFlyerUID(this); Sending the AppsFlyer ID to TWA You can send the AppsFlyer ID in one of two ways: Append AppsFlyer ID and customer user ID to URL When you build a trusted web activity intent, you can pass parameters to its URL: private void launchTwa(String cuid, String af_id) { CustomTabsServiceConnection customTabsServiceonnection = new CustomTabsServiceConnection() { @Override public void onCustomTabsServiceConnected(ComponentName name, CustomTabsClient client) { Log.d(LOG_TAG, \"onCustomTabsServiceConnected\"); // Setting up CustomTabsSession that is used to build an intent mClient = client; CustomTabsSession session = mClient.newSession(null); // Creating the intent to launch TWA using URL with query params that can be read by the Web App TrustedWebActivityIntentBuilder twaIntentBuilder = new TrustedWebActivityIntentBuilder(Uri.parse(defaultUri + \"?cuid=\" + cuid + \"&appsflyer_id=\" + af_id)); Intent twaIntent = twaIntentBuilder.build(session); startActivity(twaIntent); } @Override public void onServiceDisconnected(ComponentName name) { Log.d(LOG_TAG, \"onCustomTabsServiceDisconnected\"); } }; CustomTabsClient.bindCustomTabsService(getApplicationContext(), \"com.android.chrome\", customTabsServiceonnection); } Retrieving the AppsFlyer ID Once the web activity is launched you can retrieve the AppsFlyer ID using a simple JavaScript snippet: let url = new URL(document.location.href); let appsflyerID; url.searchParams.forEach((value, key) => { if(key === 'appsflyer_id') { \tappsflyerID = value; } }) Once you have the AppsFlyer ID, store in local storage for later use. Sending AppsFlyer ID through custom headers You can pass custom headers to the trusted web activities. The server gets these headers, sets them in a cookies and sends to the browser. You can then retrieve the AppsFlyer ID using javascript: private void launchTwa(String cuid, String af_id) { CustomTabsServiceConnection customTabsServiceonnection = new CustomTabsServiceConnection() { @Override public void onCustomTabsServiceConnected(ComponentName name, CustomTabsClient client) { Log.d(LOG_TAG, \"onCustomTabsServiceConnected\"); // Setting up CustomTabsSession that is used to build an intent mClient = client; CustomTabsSession session = mClient.newSession(null); // Creating the intent to launch TWA using URL with query params that can be read by the Web App TrustedWebActivityIntentBuilder twaIntentBuilder = new TrustedWebActivityIntentBuilder(Uri.parse(defaultUri); Intent twaIntent = twaIntentBuilder.build(session); // Passing additional custom headers to the intent so they can be read by the Web App Bundle customHeaders = new Bundle(); customHeaders.putString(\"twa_params\", \"cuid=\" + cuid + \"&=appsflyer_id\" + af_id\"); twaIntent.putExtra(Browser.EXTRA_HEADERS, customHeaders); startActivity(twaIntent); } @Override public void onServiceDisconnected(ComponentName name) { Log.d(LOG_TAG, \"onCustomTabsServiceDisconnected\"); } }; CustomTabsClient.bindCustomTabsService(getApplicationContext(), \"com.android.chrome\", customTabsServiceonnection); } Retrieving the AppsFlyer ID JavaScript doesn\u2019t provide an API to allow developers to access headers. Therefore, the server should send the conversion data back to the web activity as a cookie. The server gets the custom headers containing the AppsFlyer ID, parses the data and sends it to the web page as a cookie. When the page loads, a JavaScript snippet should be set in place to fetch the AppsFlyer ID cookie. // get the conversion data cookie // function taken from https://plainjs.com/javascript/utilities/set-cookie-get-cookie-and-delete-cookie-5/ function getCookie(name) { var v = document.cookie.match('(^|;) ?' + name + '=([^;]*)(;|$)'); return v ? v[2] : null; } // get the cookie var conversionData = JSON.parse(getCookie('appsflyer_id')); console.log(appsflyer_id); Sending the in-app event To send in-app events, you need to send the event data to your server and have your server send the event to AppsFlyer. There are a few other prerequisites for sending in-app events: SDK dev key - Important! The SDK dev key is a sensitive value and shouldn't be present in the TWA. If you are going to use TWA and send server-to-server in-app events, always store the SDK dev key securely server-side. App ID - the app ID as it appears in Android Manifest.xml. Once you have these three parameters (AppsFlyer ID, SDK dev key, app ID), you can send the in-app event. Whenever an event takes place on the web activity you should send a request to your webserver to handle this event. The webserver gets the data related to the event, composes the event, and sends it to AppsFlyer. See here for examples how to send server-to-server in-app events. Customizing web content with conversion data The AppsFlyer SDK provides you with conversion data through two APIs: Get conversion data - called when the app is launched for the first time after an install and for subsequent app launches. On app open attribution - called when the app is deep-linked into using OneLink. You can use conversion data to customize web content. Sending conversion data to TWA Once you get the conversion data from either method listed above, you can send it to your web server. To do so, use custom headers: private void launchTwa(Map<String, String> conversionData, String cuid, String af_id) { CustomTabsServiceConnection customTabsServiceonnection = new CustomTabsServiceConnection() { @Override public void onCustomTabsServiceConnected(ComponentName name, CustomTabsClient client) { Log.d(LOG_TAG, \"onCustomTabsServiceConnected\"); // Setting up CustomTabsSession that is used to build an intent mClient = client; CustomTabsSession session = mClient.newSession(null); // Creating the intent to launch TWA using URL with query params that can be read by the Web App TrustedWebActivityIntentBuilder twaIntentBuilder = new TrustedWebActivityIntentBuilder(Uri.parse(defaultUri); Intent twaIntent = twaIntentBuilder.build(session); // Passing additional custom headers to the intent so they can be read by the Web App Bundle customHeaders = new Bundle(); customHeaders.putString(\"twa_params\", \"cuid=\" + cuid + \"&=\" + af_id\"); customHeaders.putString(\"conversion_data\", conversionData); twaIntent.putExtra(Browser.EXTRA_HEADERS, customHeaders); startActivity(twaIntent); } @Override public void onServiceDisconnected(ComponentName name) { Log.d(LOG_TAG, \"onCustomTabsServiceDisconnected\"); } }; CustomTabsClient.bindCustomTabsService(getApplicationContext(), \"com.android.chrome\", customTabsServiceonnection); } Fetching the conversion data from the client-side JavaScript doesn\u2019t provide an API to allow developers to access headers. Therefore, the server should send the conversion data back to the web activity as a cookie. The server gets the custom headers containing the conversion data, parses the data and sends to the web page as a cookie. When the page loads, a JavaScript snippet should be set in place to fetch the conversion data cookie and customize the content accordingly. For example, if a user installs the app from a campaign for deals on flights, you can populate the web activity with content relevant for the deals that the campaign promotes. // get the conversion data cookie // function taken from https://plainjs.com/javascript/utilities/set-cookie-get-cookie-and-delete-cookie-5/ function getCookie(name) { var v = document.cookie.match('(^|;) ?' + name + '=([^;]*)(;|$)'); return v ? v[2] : null; } // get the cookie var conversionData = JSON.parse(getCookie('conversion_data')); console.log(conversionData); /* conversion data example: { campaign: \"CAMPAIGN_NAME\", // \"None\" if not specified on the link media_source: \"MEDIA_SOURCE\", //\"None\" if not specified on the link  cost_cents_USD : \"0\", is_first_launch: true, install_time: \"2018-12-30 23:59:39.330\", orig_cost: \"0.0\", af_click_lookback: \"7d\", click_time: \"2018-12-30 23:59:09\", cost_cents_USD: \"0\", af_status: \"Non-organic\" } */ To learn more about conversion data use cases, see here. PWA Measuring installs for PWA As with any other Android app, you can integrate the AppsFlyer SDK with the app to measure installs and get conversion data. To measure installs, all you need to do is integrate the SDK following the instructions here. Customizing content using conversion data You can customize web content according to the campaign that prompts a user to install your app. For example, if a user installs an app from a campaign that gives them 20% discount on products from your web store. You can get the conversion data and apply the discount as soon as the app opens the web activity. To learn about using conversion data to customize web content, follow the instructions here. Recording events in PWA PWA makes use of TWA which are essentially web activities.Since TWA is web-based and not a native activity, you cannot send in-app events using the AppsFlyer SDK. As an alternative, you can use server-to-server in-app events. Follow the instructions here to learn how to send in-app events for PWA."
  },
  {
    "text": "At a glance: Learn the difference between organic and paid installs coming through Twitter. Paid Twitter installation A paid Twitter installation is an installation generated by a Twitter mobile app ad as part of a mobile app Twitter campaign. To view paid installations generated by Twitter in the AppsFlyer dashboard, select Twitter as the Media Source and look for the installations listed under each Twitter Ads campaign. Organic Twitter installation An organic Twitter installation is an installation generated by a tweet that contains a link to the app page in iTunes or Google Play (not as part of an ad campaign). To view the organic installations generated by Twitter in the AppsFlyer dashboard, select Twitter as the Media Source and look for the campaign called organic. For a paid or an organic Twitter installation to be listed in the AppsFlyer dashboard or reports, the interaction with the ad or tweet should be within the AppsFlyer attribution window for Twitter: 14 days click-through, 1-day view-through attribution window."
  },
  {
    "text": "At a glance: Brand bundles consolidate the attribution, events, visits, and revenue of brand-related apps and websites. Use the brand bundle settings page to mark conversion events, integrate with Google Ads, and more. Related reading: Onboarding guide to PBA |PBA getting started About brand bundles Brands operate in an ecosystem encompassing both web and mobile properties. As an advertiser, a full picture of brand performance across platforms\u2013web and mobile\u2013is needed. In PBA, brand bundles consolidate the data of mobile and web properties into a single entity for purposes of analytics and raw data. What is a web app? A web app is an entity you have created in AppsFlyer that specifies a website for which you want to measure performance. The web app entity was added to AppsFlyer on February 9, 2022. Prior to that date, you entered the brand bundle domain as a separate setting when creating a brand bundle. Now, you first create a web app that defines the domain, then include that web app when creating a bundle. If you had existing brand bundles on February 9, 2022, you will see that you now have a web app on the My apps page corresponding to each of those bundles. Rest assured! Your web traffic is being attributed just as it was before, and there have been no other changes to PBA dashboards or raw data reports. Brand bundle basics: A brand bundle contains exactly 1 web app (required) and 1 or more mobile apps (optional). An app (web or mobile) can belong only to 1 bundle. Apps can't be deleted from a bundle or moved from one bundle to another without deleting the original bundle. On bundle deletion, AppsFlyer stops attributing PBA data for the bundle, and access to its historical data is no longer available. Accessing brand bundles Access the Brand Bundles page to manage brand bundles and their settings: Go to My Apps > View brand bundles. - or - From the left-side navigation tree on the dashboard, go to Configuration > Brand Bundles. Managing brand bundles To add, delete, or manage brand bundles, select one of these options from the Brand Bundles page: Option Details Add a brand bundle Opens the Create bundle pageFollow the instructions below to create a new bundle. PBA dashboard Opens the brand dashboard Brand bundle ID Copies brand bundle ID to the clipboard Web dev key Copies the web dev key to the clipboard Select an existing bundle to update brand bundle settings and options Options available: Mark events as conversion events: Web event settings In-app event settings Domain exclusion Google Ads integration Delete icon Deletes the selected brand bundle (after you confirm your decision to do so) Add brand bundle Before proceeding, make sure that all the apps you want to include in the bundle have been added to your account. Once a brand bundle has been created, the apps it includes can not be changed without deleting the bundle and recreating it. To add a brand bundle: From the Brand Bundles page, click Add brand bundle. Enter the Brand bundle name (any name you want to use to identify the bundle). Select the apps to include in the bundle. Note: Apps that are included in other bundles are not available for selection. Web app [required]: Select 1 available web app. Mobile apps [optional]: Select the available mobile apps you want to include in the bundle. Mobile apps are not required to create a bundle. There is no limit to the number of mobile apps you can include in a bundle. ClickCreate bundle. Important! Brand bundles cannot be created in the following circumstances: The web app selected for inclusion in the bundle does not point to a valid URL. The web app and an Android mobile app selected for inclusion in the bundle have the same app ID. Web event settings There are two types of web events: standard and conversion. To focus and prioritize your optimization efforts, set some events as conversion events. PBA attributes standard and conversion events in the same way. Raw data reports include both standard and conversion events. PBA dashboards include conversion events only. An event type can be changed at any time; however, the change isn't retroactive. To set conversion events: From the Brand Bundles page, select the brand bundle.The Update Brand bundles page opens. Go to the Web event settings tab. Turn on Mark as conversion eventas required. Click Update bundle. In-app event settings Conversion Paths take into consideration marked in-app events and marked web events as conversion events. Like web events, marketers set given in-app events as conversion events. [Default] In-app events having revenue are marked as conversion events. Note! If you change the default events, you must explicitly mark in-app revenue events yourself. To mark in-app events as conversion events: From the Brand Bundles page, select the brand bundle.The Update Brand bundles page opens. Go to the In-app event settings tab. Turn on Mark as conversion eventas required. Click Update bundle. Domain exclusion A domain exclusion mechanism, part of PBA media source rules, is implemented to prevent: Self-attribution: In other words, AppsFlyer will not attribute events to the website defined in the web app itself and to domains you specify are associated with that website. Attributing or recording events associated with domains that aren't part of your brand but participate in the user flow (for example, payment gateways). Domain type Description Impact of exclusion Primary The domain of the web app included in the brand bundle. This includes sub-domains. For example, if your domain is mydomain.co.za then subdomains like a.mydomain.co.za, b.mydomain.co.za are excluded automatically. The domain of a web app cannot be changed without deleting and recreating the web app. (This also means deleting the bundle in which the web app is included). No self-attribution Internal List other domains forming part of your brand, for example, mydomain.com, mydomain.in, mydomain.co.ng, abc.com No self-attribution External (listed by you) Domains used by your website directly, but not part of the brand. These include payment gateways, payment processing sites, etc. Visits are disregarded External (listed by AppsFlyer) Domains listed by AppsFlyer and always excluded. PayPal Stripe Adyen The list of automatic domains cannot be edited. Visits are disregarded Domain exclusion types To exclude internal or external domains: From the Brand Bundles page, select the brand bundle.The Update Brand bundles page opens. Go to the Domain exclusion tab. Click Add domain. Enter a domain name. Select a domain type: Internal or External. Click Add domain.It takes one hour for the exclusion to take effect. FAQ Can I include the same app in more than one bundle? No. Once an app is added to a bundle, it can't be added to another bundle. Can I add or remove apps after creating a bundle? No. Once a bundle has been created, the apps included in it cannot change. Why? Each app has its own data, and AppsFlyer uses this data to analyze the user journey across platforms (web and app). If an app changed, this would involve a different set of data that is not compatible with the previous data. How do I add or remove (delete) apps from a bundle? To change the bundle in which an app is included, delete the original bundle and create a new one that includes the app. What happens if I delete a bundle? faqs what happens if i delete a bundle If you delete a bundle: AppsFlyer stops attributing the bundle. The bundle data is retained (in other words, it's not permanently deleted), but the bundle itself can't be restored in order to view the data. Why? A new bundle uses a different web dev key so, even if it includes the same apps, the original bundle is not restored. Why are certain apps not available for me to add to a bundle? Admins: If you can't select an app when creating a bundle, be sure the app has been added to your AppsFlyer account and is not included in another bundle. Other account users: Check with an account admin to ensure you have the required role and permissions to access to the apps you are trying to add."
  },
  {
    "text": "At a glance: User location is determined using the device IP address which is mapped to the general location of the user (city, state, country, and so on). User location impacts creatives selection, campaign cost, engagement, and user quality. Determining user location User actions in the device are reported to AppsFlyer. The actions (events) contain various data fields including the device IP address. In some cases, the true device IP is masked by a VPN, mechanism like iOS 15 Private Relay, or SKAN postback proxy servers. Consequently, the IP address to geo-location conversion described in this article may be wrong or misleading. AppsFlyer has no control over this. The IP address is converted by AppsFlyer into geo-location information using data provided by Digital Element, the global IP location leader. The geo-location information can include: Territory (country): ISO 3166 (alpha-2) codes, or EU (Europe) or AS (Asia) if no territory-specific information is available. City: This can correlate to a neighborhood or district within the city without being directly related to the actual city boundaries. DMA (designated market area, regions, or geographic areas for television viewing measured by the Nielsen company. Metro codes in CSV file. Region: The geographic region or continent. State or province: See table of localized state names in CSV file. We use the region field in this table. This consists of up to 3 letters or numbers. Postal code. IP address to geo-location tables are updated at regular intervals, usually weekly. Example: Conversion of IP address to geolocation Note regarding the United Kingdom (UK) In the platform, the United Kingdom is denoted using the code UK. The ISO 3166 code for the United Kingdom is GB. UK is reserved, but not allocated, by ISO for the United Kingdom. Location discrepancies In some cases, there may be differences in the derived location of users between AppsFlyer and other platforms, even if other platform uses Digital Element to resolve IP addresses. Possible reasons for location discrepancy are: Database updates: to enable fast attribution, AppsFlyer resolves the IP addresses into location data internally. AppsFlyer fetches the global map from Digital Element periodically and not in real-time. If AppsFlyer and the other platform fetch Digital Element data at different times this can explain differences. ISP changes: Digital Element databases change rapidly as service providers (ISPs) change their IP mappings. Different plans/methods: Digital Element offers different package plans based on the required level of granularity. Other platforms using different Digital Element packages or different methods for defining a device's ID, may provide different results. Proxy, or VPN: If a user implements a VPN or proxy, then we won't know the true user IP address. The Geo resolution will be according to the VPN/proxy address. Related reading: IP geolocation myths by Digital Element."
  },
  {
    "text": "At a glance: Ad networks can report cost every time an ad is clicked. Advertisers use AppsFlyer\u2019s dashboard as their source of truth for all budget allocation decisions, making it easy to see where to invest. For networks wanting to be visible in that process, sharing cost data with AppsFlyer is an absolute must. Advertisers often check their top-performing partners using sort by ROI. Those that have no cost data always appear at the bottom of the list. How to share cost There are two ways to pass user-level cost data through AppsFlyer attribution URLs: unencrypted and encrypted. Encrypted cost pass allows partners to send cost data in the impression and/or click with displaying the values in plain text. Unencrypted cost can be passed by hardcoding the following 3 parameters to the click URL: af_cost_model=CPI (currently CPI is the only model viewable in AppsFlyer reporting) af_cost_ value={insert CPI value, for example: 1.00}Note: Values less than 1 require a 0 before the decimal, for example: 0.05. af_cost_currency={insert 3 letter currency code. If blank we will assume USD} NOTE: While any cost model can be sent via the attribution link, only CPI is currently supported for presenting cost data on the dashboard. Other cost models are available in the raw reports. An example of an attribution Link with an unencrypted cost pass: https://app.appsflyer.com/id554782625?pid=mediasource_int&c=campaignName&idfa=ABCDEFGH-ABCD-ABCD-ABCD- A12345678910&af_siteid=12345&af_cost_model=CPI&af_cost_value=1.00&af_cost_currency=USD Encrypted cost If you prefer not to reveal the actual cost value in the attribution URL, you can encrypt the cost parameters. The encrypted cost can be passed by following an AES-based encryption method. In addition to the cost model, value, and currency, partners will need a network-specific key to generate the encrypted cost value. Steps for encryption: Request your network encryption key from your Partner Development Manager or reach out to partners@appsflyer.com. Use the AES encryption method (shown below) to encrypt the required 4 values (network key, cost value, cost model, and cost currency) Append the generated encryption value to your AppsFlyer attribution URL in the af_enc_data= parameter. Sample attribution link with encrypted value pass: https://app.appsflyer.com/id554782625?pid=mediasource_int&c=campaignName&idfa=ABCDEFGH-ABCD-ABCD-ABCD-A12345678910&af_siteid=12345&af_enc_data=DvVvQRow%2F2N0LiQGZh0wvwucFygbll9IwAMSN%2B%2BDQxo%3D Note: Only ad networks that perform the cost encryption integration with AppsFlyer can actually send encrypted cost data with their clients' attribution links. AES encryption process To accomplish the encryption, partners must use the AES algorithm, with an ECB block mode, using PKCS5 padding. Then they must Base-64 encode the encrypted data, and finally, URL-encode the result. Networks can use any tech stack to accomplish this. See examples below for PHP, Java, and Python: PHP <?php $f = fopen( 'php://stdin', 'r' ); echo \"Enter private key: \"; $private_key = trim(fgets($f)); echo \"Enter cost model: \"; $cost_model = trim(fgets($f)); echo \"Enter cost value : \"; $cost_value = trim(fgets($f)); echo \"Enter cost currency : \"; $cost_currency = trim(fgets($f)); $params = array( \t'af_cost_model' => $cost_model, \t'af_cost_value' => $cost_value, \t'af_cost_currency' => $cost_currency ); $query_str = http_build_query($params); $block_size = mcrypt_get_block_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_ECB); $padding_size = $block_size - (strlen($query_str) % $block_size); $padded_query_str = $query_str . str_repeat(chr($padding_size), $padding_size); $enc_raw = mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $private_key, $padded_query_str, \"ecb\"); $enc_b64 = base64_encode($enc_raw); $enc_url_encoded = urlencode($enc_b64); echo \"\\n\\n\\r\"; echo \"Private key: \" . $private_key . \"\\r\\n\"; echo \"Query string: \" . $query_str . \"\\r\\n\"; echo \"\\n\\r\"; echo \"Encrypted query string: \" . $enc_url_encoded . \"\\r\\n\"; fclose( $f ); ?> Java private static final String CIPHER_ALGORITHM = \"AES/ECB/PKCS5Padding\"; private static final String encryptionKey = \"XXXXXXXXXXXXXXXX\"; // secret key provided by appsflyer private static final SecretKeySpec key = new SecretKeySpec(encryptionKey.getBytes(), \"AES\"); public static void main(String[] args) throws Exception { String queryParams = \"bid_value=0.01&bid_type=cpc\"; String cipher = encrypt(queryParams); System.out.println(cipher); } public static String encrypt(String str) throws Exception { Cipher cipherEncrypt = Cipher.getInstance(CIPHER_ALGORITHM); cipherEncrypt.init(Cipher.ENCRYPT_MODE, key); byte[] cipher = cipherEncrypt.doFinal(str.getBytes(\"UTF-8\")); String b64 = encode64(cipher); String result = urlencode(b64); return result; } Python import sys import base64 import urllib from Crypto.Cipher import AES def read_number(t): try: start = input(\"enter \" + t + \": \") start = float(start) return start except ValueError: print(\"\\n\\r\" + t + \" must be a number\") exit() def encrypt (secret_key, msg): cipher = AES.new(secret_key, AES.MODE_ECB) ciphertext = cipher.encrypt(msg) return ciphertext def padding (data): length = 16 - (len(data) % 16) data += chr(length)*length return data secret_key = input(\"enter secret key: \").strip() currency = input(\"enter cost currency: \").strip() model = \"CPI\" if len(currency) == 3: currency = currency.upper() else: print(\"currency must have 3 character (e.g. USD)\") exit() start = read_number(\"starting value\") end = read_number(\"final value\") step = read_number(\"step\") if end >= start: while start <= end: msg = \"af_cost_currency=%s&af_cost_model=%s&af_cost_value=%.2f\" % (currency, model, start) msg = padding(msg) enc = encrypt(secret_key, msg) start += step print(msg) print(urllib.quote_plus(base64.b64encode(enc))) Which networks support cost reporting? To see a full list of the networks that support cost reporting, click here."
  },
  {
    "text": "At a glance: create a robust Partner Marketplace profile page with the information about your company and its services and solutions. AppsFlyer Partner Marketplace is where advertisers can find new ad networks and marketing platforms to work with. Provide as much information as possible for them to make an educated choice. Full Partner profile Partner profile with partial information To edit your Partner Marketplace page: in the AppsFlyer dashboard, click the top-right drop-down menu, then click Partner setup. Note: certain fields are mandatory, and the profile cannot be saved or published if they are not filled in. Company details In this section, add and edit information about your company. To view how your page currently looks in the marketplace (with no navigation capability), click View published page. To view your currently saved draft, click Preview draft. General The information in this section is dynamic and is based on your existing AppsFlyer configuration and activity: Partner type Data richness Integration capabilities Industry categories and subcategories Geography of your traffic Additional Add or edit your company details (e.g., company logo (mandatory), description (mandatory), website, support languages, etc.) The short description is displayed on your preview in the Partner Marketplace search. The full description is displayed on your page in the Partner Marketplace. We recommend filling in all the details to provide as much information as possible and make your page in the Partner Marketplace more attractive to the potential customers. Contacts A list of representatives that can be contacted for sales or support.Sales contact is the person/entity who can be contacted by advertisers for further action. Sales contact email is required for publishing your page in the Partner marketplace, and it\u2019ll be displayed on your Partner profile page. Offices A list of your company offices. Note: This information is not displayed in the Partner Marketplace. Your offering In this section, add the details of the services you provide. We recommend adding as much information as possible for better discoverability in the Partner Marketplace. To add or edit the information about your services, click on the offering name. Overview Select up to 3 services that you offer from the list. Enter search tags. These are the keywords your potential customers can enter in the Partner Marketplace search bar. List the highlights of your offering as bullet points. Provide an extensive description of your offering. Characteristics Provide information about your services. Select all possible options that apply (they are used as filters in the Partner Marketplace): Pricing models. E.g. CPA, Flat, Subscription-based. Supported ad types. E.g. Banner, Video, Playable. Traffic types. Incentivized, Non-incentivized, Pre-loaded. Service types. Managed or Self-served. Supported platforms. Compliance standards. Sales Enter the sales details about the offer: Link to the terms of service Minimum budget required for the service Marketing collateral Add any additional marketing information about the offer: Images Marketing kit Customer success stories Video"
  },
  {
    "text": "At a glance: Learn about incoming and outgoing SSL cipher suites supported by AppsFlyer. Introduction AppsFlyer APIs use secured protocols. These protocols support: Incoming requests where AppsFlyer acts as a server Outgoing messages, where AppsFlyer acts as a client The AppsFlyer SSL Security profile supports the following SSL protocols: TLS V1.2 AppsFlyer supports different ciphers for incoming and outgoing messages, as detailed below. Incoming messages: AppsFlyer as server Incoming APIs The following APIs are AppsFlyer secure external APIs for incoming messages: List of APIs API Name Clicks Impressions OneLink GCD (get conversion data) S2S in-app event API OneLink API OneLink (China) Supported SSL ciphers suites for incoming messages The table that follows lists the TLS 1.2 supported cipher suites in server-preferred order (most-preferred listed first). List of TLS 1.2 supported ciphers TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA TLS_RSA_WITH_AES_128_GCM_SHA256 TLS_RSA_WITH_AES_128_CBC_SHA256 TLS_RSA_WITH_AES_128_CBC_SHA TLS_RSA_WITH_AES_256_GCM_SHA384 TLS_RSA_WITH_AES_256_CBC_SHA256 TLS_RSA_WITH_AES_256_CBC_SHA Outgoing messages: AppsFlyer as client For app owners, AppsFlyer acts as a client when sending out push messages. Supported SSL ciphers for Push API TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA TLS_RSA_WITH_AES_128_CBC_SHA TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA TLS_ECDH_RSA_WITH_AES_128_CBC_SHA TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 TLS_RSA_WITH_AES_128_GCM_SHA256 TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA SSL_RSA_WITH_3DES_EDE_CBC_SHA TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA TLS_EMPTY_RENEGOTIATION_INFO_SCSV"
  },
  {
    "text": "At a glance: APIs available to advertisers to access or update data. Advertiser API list and interfaces Specific information about reports, reporting tools, and reporting APIs: Raw-data reporting tools/APIs Aggregate and analytics reporting tools/APIs Interfaces for advertisers Arena API name Premium feature Description Authenticationtoken/key Interface type Mobile attribution Server-to-server events No Record in-app events that occur outside a mobile app SDK dev key REST API People-based Attribution (PBA) Server-to-server web No Report PBA events that occur in the Backend PBA key REST API Engagement OneLink Yes Manage OneLinks: create, update, retrieve, delete SDK dev key REST API Remarketing Audiences Yes Upload user lists to Audiences Import key REST API Privacy GDPRrequests No Data removal requests and status V1.0 REST API Reporting Master performance KPIs Yes Multi-app campaign performance metrics in CSV files V1.0 REST API Reporting Pull aggregate reports No Aggregate reports in CSV files V1.0 REST API Reporting Pull raw data Yes Raw data reports in CSV files V1.0 REST API Reporting Cohort analytics Yes Cohort metrics in JSON or CSV files V2.0 REST API Reporting Data Locker Yes Raw and aggregate data reports N/A Cloud storage Mobile attribution Push Yes Real-time installs and in-app events sent to advertisers' servers N/A REST API Campaign cost Ad spend ingestion No Report campaign cost N/A File upload Account Get app list No Get a list of apps in your account V2.0 REST API Reporting ETL Cost Yes Cost ETL granular campaign cost N/A Cloud storage Reporting SKAN reporting No SKAN aggregate reporting V2.0 REST API Integrated partners Copy partner integration settings No Copy integration configuration parameters from one app to the other V2.0 REST API Integrated partners Set install referrer decryption key No Set install referrer decryption key received from Facebook Ads V2.0 REST API"
  },
  {
    "text": "At a glance: Oracle Responsys, an email delivery and analytics platform, embeds AppsFlyer OneLink within emails. Email recipients who click the link are deep linked into your app. ESPs (Email Service Providers) can be excellent sources for segmented user traffic. One of the challenges with ESPs is performing correct attribution and deep linking. ESPs wrap the deep linking URL with their own ESP's click recording domain. This procedure often breaks the functionality of iOS Universal Links and Android App Links. However, deep linking and click recording are still possible with ESPs that support Universal Links and App Links on top of their click recording domain. In addition, you can set up your own click domain to act as the click recording domain. Prerequisites Configure your app to support deep linking with OneLink. Verify your SDK version (both Android and iOS) iOSAndroid AppsFlyer iOS SDK version 4.9.0 (or above) AppsFlyer Android SDK version 4.9.0 (or above) Setting up Oracle Responsys click domain Follow this section to set up your click domain (click recording domain) in Oracle Responsys. Step 1: Set up a click domain in Oracle Responsys To set up a click domain, follow Oracle Responsys official guide on how to create click domains. Oracle Responsys usesLink Tables to help recordclicks for a specific campaign Note, in Link tables, you can define IOS link URL to be the same as the Link URL: Once you setclick domains in Link Tables, Responsys uses these domains to wrap OneLinks that you include in email campaigns. This way, Responsys can record clicks in their system while preserving OneLink and deep linking functionality. Step 2: Give Responsys an AASA (iOS) and an Asset Links file (Android) AASA for iOS For Responsys to support iOS Universal Links, they need an AASA file. See the following instructions. When you set up OneLink with Universal Links, you already have an AASA associated with the OneLink. To obtain the AASA: Go to OneLink configuration and find a OneLink that is configured with Universal Links. Add /.well-known/apple-app-site-associationto the end of the OneLink URL. Paste the OneLink in the browser address bar and hit enter. For example:<OneLinkSubdomain>.onelink.me/.well-known/apple-app-site-association. When you do so, the AASA file is downloaded to your computer. You can open it using any simple text editor. Send this AASA file to Responsys. For more information and to learn more about the contents of this file, see page 11 of Oracle's guide. Asset Links for Android When you set up OneLink with App Links, you already have an Asset Links file associated with the OneLink. To obtain the Asset Links file. To obtain the Asset Links file: Go to OneLink configuration and find a OneLink that is configured with App Links. Add /.well-known/assetlinks.jsonto the end of the OneLink URL. Paste the OneLink in the browser address bar and hit enter. For example:<OneLinkSubdomain>.onelink.me/.well-known/assetlinks.json. When you do so, the Asset Links file is downloaded to your computer. You can open it using any simple text editor. Send this Asset Links file to Responsys. For more information and to learn more about the contents of this file, seethis guide. Setting up your app Step 1 for Android: Setting up your app to support App Links Adding the click domain to the activity in the Android manifest In the Android manifest, add the click domain host and any prefix in the activity tag of the activity you want to deep link into. <activity android:name=\".DeepLinkActivity\"> <intent-filter android:autoVerify=\"true\"> <action android:name=\"android.intent.action.VIEW\" /> <category android:name=\"android.intent.category.DEFAULT\" /> <category android:name=\"android.intent.category.BROWSABLE\" /> <data android:scheme=\"https\" android:host=\"click.example.com\" android:pathPrefix=\"/campaign\" /> </intent-filter> </activity> Setting up the app to resolve click domains The SDK needs to resolve the OneLink behind the click domain to get the campaign details. The details are returned in the onAppOpenAttribution method. Toresolve click domains: Make sure that your SDK version is at least 4.9.0. List the click domains in the SDK API setResolveDeepLinkURLs. This API needs to be called before SDK initialization. For more information please refer to SDK documentation here. AppsFlyerLib.getInstance().setResolveDeepLinkURLs(\"click.example.com\"); Important! If you are using Movable Ink (MI) in conjunction with Oracle, you need to get the MI CNAME and internal domains from your MI account manager and add them to setResolveDeepLinkURLs, in addition to the click link for Oracle. For example: AppsFlyerLib.getInstance().setResolveDeepLinkURLs(\"oracle-click.example.com\", \"mi.example.com\", \"example.micpn.com\"); Step 1 for iOS: Setting up your app to support Universal Links This section discusses how to set up your app to support Universal Links. Associating click domains in Xcode In Xcode, click on your project. Click on Capabilities. Turn Associated Domains on. Click the + sign and add your click domain. For example, applinks:click.example.com. Step 2: Setting up the app to resolve click domains The SDK needs to resolve the OneLink behind the click domain to get the campaign details. The details are returned in the onAppOpenAttribution method. To resolve click domains: Make sure that your SDK version is at least 4.9.0. List the click domains in the SDK property resolveDeepLinkURLs. This property needs to be set before SDK initialization. For more information please refer to SDK documentation here. Objective-C Swift [AppsFlyerTracker sharedTracker].resolveDeepLinkURLs = @[@\"example.com\",@\"click.example.com\"]; AppsFlyerTracker.shared().resolveDeepLinkURLs = [\"example.com\", \"click.example.com\"] Important! If you are using Movable Ink (MI) in conjunction with Oracle, you need to get the MI CNAME and internal domains from your MI account manager and add them to setResolveDeepLinkURLs, in addition to the click link for Oracle. Domain examples: Oracle domain: oracle-click.example.com MI CNAME domain: mi.example.com MI internal domain: example.micpn.com Add the following code so that the SDK can resolve the click recording domain: Objective-C Swift Add this code in AppDelgate.m - (NSDictionary *)allHTTPHeaderFieldsForResolveDeepLinkURL:(NSURL *)URL { if ([URL.host isEqual: @\"click.example.com\"]) { return [NSDictionary dictionary]; } else { return nil; } } Add this code in AppDelgate.swift func allHTTPHeaderFields(forResolveDeepLinkURL URL: URL!) -> [String : String]! { if (URL.host == \"click.example.com\") { /// Change User-Agent return [:] } else { return nil; } } Sending your first email Create a OneLink URL in the Link Management page (or manually). When creating the OneLink URL make sure to URL encode all parameter values. The following parameters are highly recommended to use: pid (media source) - Use a media source that signifies this usage such as Email. c (campaign) - The name of the campaign you want to measure. af_dp - The deep link URI scheme you want to deep link your users into. af_web_dp - Where to redirect users clicking the link on a desktop. af_ios_url - Where to redirect users that don\u2019t have the app clicking the link on an iOS device. af_android_url - Where to redirect users that don\u2019t have the app click the link on an Android device. Place the OneLink URL in the email that you create in Responsys. Example: <a href=\"greatapp.onelink.me/abcd/1234567\">Download my great app!</a> At this stage, Responsys wraps the above link with the click domain that you set in the previous steps. Any click on the click domain redirects to the OneLink attribution link. If the app is installed on the user's device, the click domain deep links into the app. Example URL parameters are not URL encoded in this example, just for the sake of readability: https://greatapp.onelink.me/abcd?pid=Email&c=Spring_Newsletter&is_retargeting=true& af_dp=testapp://path/to/content&af_web_dp=https://www.example.com/path/to/content& af_ios_url=https://www.example.com/path/to/content&af_android_url=https://www.example.com/path/to/content Testing your links After following all the required steps mentioned above, creating the appropriate OneLink URL, and placing it in an email, send yourself a test email. What should you expect? If you have the app installed, the app should be invoked. If the relevant AppsFlyer SDK deep linking APIs are implemented you should be deep linked into the relevant content.In addition, a click should appear in both the AppsFlyer dashboard, attributed to the provided media source and campaign, and also in Responsys data."
  },
  {
    "text": "At a glance: This script is deprecated as of December 17, 2020, and is replaced by the OneLink Smart Script. This version continues to work, but will not be updated or changed. The script generates URLs that are embedded behind a button on your mobile website and redirects visitors to download your app. The URLs also support install attribution and deep linking. Migrate to OneLink Smart Script Landing pages are a very common technique among digital marketers. They allow the marketers to capture their leads' details for remarketing, even if these users don\u2019t convert at first. However, for mobile user acquisition, the landing page strategy has upsides and downsides. The upsides: Leads, who eventually get to install, should be more engaged with the app. The more complicated services (for example, financial services) require more explanations to convert their leads, which is enabled by landing pages. The downsides: The longer funnel reduces the final number of converted leads. It is more technically challenging to attribute. The challenges of mobile attribution on landing pages Different media sources require different methods to complete the landing page scenario with the correct attribution data. Last click attribution model may cause loss of correct attribution, if the landing page has its own attribution links. Direct website visitors are recorded as organic, unless the landing page has its own attribution links. Desktop visitors are recorded as organic, unless the landing page has a method of recording their conversions into mobile users. The solution To solve the mentioned landing page attribution problems, you need to implement a javascript flow in your landing page. We offer a sample script implementation that you can use. Make sure to adjust the script to fit your requirements. In some cases, you also need to make some adjustments to your campaigns. The scenarios below cover the requirements for all possible media source cases. Landing page scenarios Follow the implementation instructions below for all the media sources sending leads to your landing pages. Facebook Ads: cross-platform attribution Description: Facebook is an SRN, which doesn't use external attribution links. Upon first app launch, AppsFlyer queries Facebook whether the user has previously (within the last 28 days) engaged with an ad for the app. If the user has engaged with a Facebook ad of the advertiser, Facebook self-attributes. Facebook also attributes cross-platform, meaning that the user may interact with any type of campaign, mobile or not, on any platform, to be self-attributed by Facebook. Conclusion: A lead with the available device ID, coming from Facebook to a landing page, gets correctly attributed to Facebook. This happens regardless of the new click recorded on the landing page.However, when users opt not to share their device ID, as is expected with iOS 14 users during 2021, Facebook's cross-platform attribution may not work anymore. When device ID sharing becomes optional, use the Other SRNs methodfor Facebook Ads. New users who share their device ID would be attributed to Facebook Ads correctly. New users who don't share their device ID would be attributed to \"Facebook_LP\". Instructions: On your Facebook account create a \u201cTraffic\u201d or \"Conversions\" campaign with mobile attribution enabled, sending leads to your landing page. Landing page Android download button - direct link to Google Play. Landing page iOS download button - direct link to iTunes (OR attribution link without the device ID). What the script does The landing page script makes no changes. The script is designed to detect a user coming from Facebook. If it does, it doesn't do anything. It leaves the landing page direct links to the app stores as they are. This prevents another click from being recorded which could affect CTR. In the script, look for a method calledisFacebook() to learn more about what the script does when a user comes from Facebook. Google Ads: GCLID + offline conversion upload Description: The usual process for install attribution of Google Ads campaigns requires clicking leads to be redirected to the app's store page URL. So, when redirecting leads from Google Ads to a landing page, use a mediator to connect between the mobile install and the original click on the non-mobile Google Ads campaign. Conclusion: The solution for Google Ads has 2 parts. The first part takes care of attributing on AppsFlyer the mobile users that get to the landing page from Google, and install the app from there. It requires tagging the click URLs from Google, identifying them on the landing page and creating a dynamic OneLink with data from the URL. The second part takes care of notifying Google Ads about these mobile installs, using Google's offline conversion upload method. Note This GCLID solution is not officially supported or recommended by Google.In case that Google deprecates the GCLID parameter, we will change the script to support the changes.We recommend following this article, by clicking the Follow button in the article header, to get informed when there is an update to the article or attached script. Instructions: Part 1 - Attributing to Google Ads on AppsFlyer On Google's dashboard - Enable Auto-tagging (here's how). With auto-tagging enabled, the URL to the landing page contains the GCLID parameter. URL example: http://www.yoursite.com/yourlandingpage?gclid={USER_GCLID}  On your landing page load - Activate the generateUrl Javascript function The function (see below) looks for the GCLID parameter and builds a long OneLink URL containing its value under the af_sub1 parameter (you can use any of the subscriber parameters af_sub1 - af_sub5). Landing page download button uses the generated OneLink URL.OneLink URL example: https://yourapp.onelink.me/abcd?pid=google_lp&c={CAMPAIGN_NAME}&af_sub1={USER_PARSED_GCLID} New mobile users are attributed to the google_lp media source and to the CAMPAIGN_NAME campaign (optional). No postback is sent to the media source At this point, the installs are reported in AppsFlyer under the google_lp media source, with the GCLID, but not in Google Ads. Part 2 - Uploading Installs to Google as Offline Conversions This step is only required if you want the conversions to be recorded in the Google Ads platform. For users attributed to google_lp, the AppsFlyer raw data now displays the GCLID value in the af_sub1 column. The GCLID is needed in order to upload offline conversions to Google Ads, you can find more information on the process here). The conversions can be uploaded manually or via an Adwords API (more info on the API here). You can export the CSVs with this information from your AppsFlyer account, or you can get this data from Push API in real-time for every install. Tip You can also see the keywords your users searched for in AppsFlyer's raw data in a similar fashion to getting the GCLID: For keyword recording, you must include the keyword ValueTrack parameter in the final URL from Google Ads to the landing pageURL example: http://www.yoursite.com/yourlandingpage?gclid={USER_GCLI  D}&keyword={USER_KEYWORD}  The Javascript function (see below) looks for the keyword parameter The value is added to the generated OneLink URL under af_keywordsOneLink URL example: https://yourapp.onelink.me/abcd?pid=google_lp&c={CAMPAIGN_NAME}&af_sub1={USER_PARSED_GCLID}&af_keywords={USER_PARSED_KEYWORD} The JS function below already contains the code to parse the keyword parameter as well. What the script does Google Ads carry with them agclid parameter. The script looks for this parameter in the landing page URL. If it sees it, it creates the OneLink such that it reflects that the user comes from Google Ads. The script then puts the OneLink as the link behind the download buttons on the landing page. In the script, look forgclidValue to learn how the script detects users coming from Google Ads and creates the OneLink accordingly. Other SRNs: add parameter Description: Other SRNs, for example, Snapchat or Twitter, are not cross-platform like Facebook, and require a bit of work to get your mobile users attributed to them. Your campaigns with other SRNs lead your users to the landing page, and you are billed according to clicking leads, unrelated to any derived mobile users. Conclusion: When defining the landing page URL for a campaign on SRNs (besides Facebook and Google Ads), add a Partner ID parameter to the URL, which states the original SRN.The landing page launches a javaScript (see below) that parses that parameter and builds a OneLink URL, which has the Partner ID value. When mobile users click on that OneLink and install, they get attributed to the stated media source. Instructions: On your SRN account - Create a non-mobile campaign When defining the landing page URL, add a Partner ID + landing page parameter to the URL (which is not an AF attribution link). The format is \"&af_pid=srn_lp\". (see example below) On your landing page load - Activate the generateUrl Javascript function The function looks for the af_pid parameter and builds a OneLink URL containing its value under the pid parameter Landing page download button uses the generated OneLink URL New mobile users are attributed to the custom \"Partner ID + landing page\" media source No postback is sent to the media source If you specify the real SRN name, e.g. twitter_int, a postback might be sent to this SRN. This could result in double charges. See the note below for alternative names. The script itself contains logic to prevent you from using these names. Look for var SRNs in the script. You should see a list of SRN names and a condition that checks if pidValue is any of these names. Remove this logic after you are done testing the script. Note If you're sending users to your landing page, we recommend that include the following parameter on the URL of your landing page: For Twitter: use \"&af_pid=twitter_lp\" For Snapchat: use \"&af_pid=snapchat_lp\" For Doubleclick: use \"&af_pid=doubleclick_lp\" For Facebook Post (unpaid): use \"&af_pid=fbpost_lp\" For Oath (formerly Yahoo Gemini): use \"&af_pid=oath_lp\" What the script does The script sees the af_pid parameter on the landing page URL and concludes that the user comes from an SRN or some other custom network. The script creates a OneLink accordingly and sets it as the link behind the download button on the landing page. To learn more about what the script does, look for pidValue in the script. Attribution links: redirect with af_r Description: Attribution links are used for any media source, which is not an SRN. That includes thousands of integrated partners and any owned media you wish to attribute. Luckily, the solution for landing page attribution when using AppsFlyer's attribution links is simple (and similar to the solution for Facebook). Conclusion: the attribution link redirects the lead to a landing page, and by that also takes care of the correct attribution (if a mobile install follows). All that is left to do is NOT prevent the correct attribution with another last click. Instructions: Create the attribution link for the media source Add the landing page parameter leading to your landing page to the attribution link Add &af_redirect=true to the landing page value under any redirection parameters (that is, af_r, af_ios_url, and af_android_url) in the attribution link.Example: https://yourapp.onelink.me/abcd?pid=email&c={CAMPAIGN_NAME}&af_r=http://www.yoursite.com/yourlandingpage?af_redirect=true Optional- add device ID (GAID / IDFA) to the attribution link to allow attribution by ID matching instead of Probabilistic modeling Landing page Android download button - direct link to Google Play Landing page iOS download button - direct link to iTunes Note The script and HTML sample page provide the option to set one download button that serves both Android and iOS. Read the comments in the script to learn how to implement it. What the script does The script looks for the af_redirect parameter in the landing page URL. If it sees it, it makes no changes to the download buttons on the landing page. This is because the af_redirect parameter indicates that the user reaches the landing page following a click. Therefore, there is no need for additional attribution links. To learn more about what the script does to handle cases where users reach the landing page after clicking an attribution link, see the method isAFLink() in the script. Links with utm parameters: dynamic OneLink Description You may have traffic sources, which redirect users to your landing page using links with UTM parameters. Conclusion: If the original URL is NOT an AppsFlyer attribution link, the script searches for theutm_source and utm_campaign parameters in the link. If they exist, the script prepares a OneLink URL, that has them as the media source name (pid) and campaign name (c), respectively. Note that with AppsFlyer attribution links, which also contain UTM parameters, the AppsFlyer parameters are being used, rather than the UTM ones. Instructions: On the media source - Make sure theutm_sourceexists in the link. utm_campaign parameter is optional but highly recommended. On your landing page load - Activate the generateUrl Javascript function The function looks for theutm_source and utm_campaign parameters and builds a OneLink URL containing their values Landing page download button uses the generated OneLink URL New mobile users are attributed to thevalue ofutm_source as themedia source No postback is sent to the media source. What the script does The script looks for UTM parameters in the landing page URL. If it finds any, it converts them to OneLink parameters. This way, campaign information is carried over to the final attribution. Mobile organic visitors: OneLink with pid=website Description Mobile organic visitors are, by definition, direct mobile web leads from unknown sources. They rarely visit dedicated landing pages but may be the vast majority of mobile installs coming from the advertiser's website. Conclusion: If you have a significant amount of mobile organic traffic from your website, it's highly recommended to record the attribution data of your own traffic. Instructions: To attribute mobile organic visitors, the website should have download or install buttons, with a OneLink attribution link behind them. OneLink enables diagnosing the device type and redirecting the lead to the correct app store according to it. To learn how to set and build OneLink URLs go here. Tip Add \"&pid=website\" to your attribution link to attribute all these visitors to your website.In each page of your website, which has a download/install button with an attribution Link, add \"&c={PAGE NAME}\". This can help you find the highest and lowest converting pages in your website. What the script does Exhausting all other options, the script determines that the user is an organic user that doesn't come from any campaign. The script creates a OneLink that reflects that and puts it as the link behind the download button on the landing page. Desktop visitors: telephone/email form Description All the options covered above assume the users use mobile devices when engaging with the campaign and the landing page. But what about desktop users? Desktop users may arrive at your landing page/website, and afterward \"independently\" visit the app store with their mobile devices, and install the mobile app. Without the preceding engagement with the mobile devices, it is impossible to attribute these users, and so, they are labeled as \"Organic\". Conclusion: A great solution to this attribution problem is using a text-to-download form on your landing page, only for desktop users. This is to be followed by sending the mobile device an SMS/Email with OneLink URL. Instructions: Identify that a visitor is a desktop user When your user types in their phone number, text them a link to your app, with a OneLink short URL. You can also ask for their email address to email them app download messages. The usage of OneLink is crucial here, as the mobile device platform isn't known when sending the message to the users. OneLink's diagnosis and redirection functionalities take care of this for you. Add \"&pid=desktop_website\" to the OneLink URL to identify this source. Add \"&c={PAGE NAME}\" to help you find the highest and lowest converting pages in your website for desktop users. What the script does The script detects the device or platform the user is on. If it's desktop, the script returns a link to a web form URL and puts it behind the download buttons. When the user clicks download, they are sent to a web form where they fill in their details to get an SMS or an email with a link to download the app. It's up to you to create the web form and provide the URL to it in the script. To learn more, look forisMobileDevice() in the script. Landing page javascript Below you can find the code implementation of the javascript that performs the full scope of attributing media sources and campaigns in landing page scenarios. If you want to have additional data such as ad sets and ad ids, you should make the necessary adjustments in the script. For your convenience, you can also download the attached landing page example. Below the code, you can find the instructions for adapting it to your landing page needs. The script Consider the following before you implement the script: The script is offered as an example only. It covers the common landing page to attribution flow. Adapt the script to fit your requirements. The script looks for specific parameters in the landing page URL, like media source, campaign, keywords etc. If you want to add more parameters like site id and ad sets, you need to modify the script accordingly. //Returns the value of a parameter existing in the page's URL or ' ' if not exists. function getParameterFromURL(name, url) { if (!url) url = window.location.href; name = name.replace(/[\\[\\]]/g, '\\\\$&'); var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'), results = regex.exec(url); if (!results) return null; if (!results[2]) return ''; return decodeURIComponent(results[2].replace(/\\+/g, ' ')); } function isMobileDevice() { return (typeof window.orientation !== \"undefined\") || (navigator.userAgent.indexOf('IEMobile') !== -1); } function getMobileOperatingSystem() { var userAgent = navigator.userAgent || navigator.vendor || window.opera; if (userAgent) { if (/android/i.test(userAgent)) { return \"Android\"; } // iOS detection from: http://stackoverflow.com/a/9039885/177710 if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) { return \"iOS\"; } } return \"unknown\"; } function isAFLink() { return getParameterFromURL('af_redirect'); } // Note - when device ID sharing becomes optional stop calling this method (or always return false) function isFacebook() { if (document.referrer && document.referrer != \"\") { return document.referrer.toLowerCase().includes('facebook'); } else { return false; } } // generateUrl returns the URL to use behind the iOS and Android \"Download\" buttons on a landing page, based on the source of the page visitor. // By default these buttons should direct to the apps' pages on iTunes and Google Play. // If these links should be kept with no change, generateUrl returns ' '. // Otherwise, generateUrl returns the URL to be used under BOTH buttons (a single app download button could also be used in this case). // Parameters: isDebug - if true, alerts are issued for each of the cases, otherwise not. \t function generateUrl(isDebug) { var oneLinkURL = 'https://yourapp.onelink.me/abcd'; // **** Replace with your own basic OneLink URL **** var webFormURL = 'https://yoursite.com/webform.html'; // **** Replace with your own web form URL for getting the user's email or SMS **** var finalURL = \"\"; var partnerIDParam = '?pid='; var campaignValue; if (getParameterFromURL('c')) { campaignValue = getParameterFromURL('c'); } else if (getParameterFromURL('utm_campaign')) { campaignValue = getParameterFromURL('utm_campaign'); } else if (document.getElementsByTagName('title')[0]) { campaignValue = document.getElementsByTagName('title')[0].innerText; } else { campaignValue = 'unknown'; } var campaignParam = '&c='; var gclidParam = '&af_sub1='; var gclidValue = getParameterFromURL('gclid'); var kwParam = '&af_keywords='; var pidValue; var kwValue = getParameterFromURL('keyword'); \t\t if (getParameterFromURL('af_pid')) { pidValue = getParameterFromURL('af_pid'); } else if (getParameterFromURL('utm_source')) { pidValue = getParameterFromURL('utm_source'); } // Prevent the use of real SRN names. Remove this part after you are done testing the script. var SRNs = [ 'twitter_int', 'facebook_int', 'snapchat_int', 'doubleclick_int', 'yahoogemini_int', 'yahoojapan_int', ]; if (SRNs.includes(pidValue)) { \talert(\"DO NOT USE NAMES OF SRNS IN af_pid or utm_source - use the names listed in Other SRNs: Add Parameter section in the landing page article\\nhttps://support.appsflyer.com/hc/en-us/articles/360000677217#other-srns-add-parameter\"); return; } // Desktop user if (!isMobileDevice()) { return webFormURL; } // User was redirected using af_r parameter on an AppsFlyer attribution link if (isAFLink()) { if (isDebug) { alert(\"This user comes from AppsFlyer by redirection and is ready to be attributed. \\nKeep direct app store links.\"); } return; // in this case, the original store links in the install buttons stay the same /* If you want one install button in the landing page that serves both iOS and Android, uncomment the code below The code identifies the operating system and returns the relevant direct link to Google Play or iTunes if (getMobileOperatingSystem() === 'Android') { return 'direct link to Google Play'; } if (getMobileOperatingSystem() === 'iOS') { return 'direct link to iTunes'; } */ } // Google Ads if (gclidValue) { partnerIDParam += 'google_lp'; campaignParam += campaignValue; gclidParam += gclidValue if (!kwValue) { finalURL = oneLinkURL + partnerIDParam + campaignParam + gclidParam; if (isDebug) { alert(\"This user comes from Google AdWords\\n \" + finalURL); } return finalURL; } else { // Google Ads with KW kwParam += kwValue; finalURL = oneLinkURL + partnerIDParam + campaignParam + gclidParam + kwParam; if (isDebug) { alert(\"This user comes from Google AdWords - there is a keyword associated with the ad\\n \" + finalURL); } return finalURL; } // Other SRNs and custom networks } else if (pidValue) { campaignParam += campaignValue; partnerIDParam += pidValue; finalURL = oneLinkURL + partnerIDParam + campaignParam; if (isDebug) { alert(\"This user comes the SRN or custom network \" + pidValue + \"\\n\" + finalURL); } return finalURL; } else if (isFacebook()) { if (isDebug) { alert(\"This user comes from a paid Facebook ad - don't do anything. \\nKeep direct app store links.\"); } return ' '; } else { // organic mobile user campaignParam += campaignValue; partnerIDParam += 'website'; //**** Replace value if you wish organic users to be attributed to another media source than 'website' **** finalURL = oneLinkURL + partnerIDParam + campaignParam; if (isDebug) { alert(\"This user comes from an unknown mobile source.\\n The user would be attributed to media source 'website' and to the campaign \" + campaignParam + \"\\n\" + finalURL); } return finalURL; } } HTML sample for landing page <html> <head> <title>Landing Page</title> </head> <body> <h1>Landing Page</h1> <!-- By default, the install buttons should have direct links to the stores --> <div> <a id=\"andrd_link\" href=\"https://play.google.com/store/apps/details?id=com.appsflyer.sampleapp\"><img src=\"/images/andrd.png\"alt=\"\"></a> </div> <div> <a id=\"ios_link\" href=\"https://itunes.apple.com/us/app/id3********\"><img src=\"/images/ios.png\" alt=\"\"></a> </div> <!-- If you want one button to serve both Android and iOS, use the code below instead <a id=\"store_link\" href=\"\"><img src=\"download.png\" alt=\"\"></a> --> <script type=\"text/javascript\" src=\"/landing-page-test.js\"></script> <script type=\"text/javascript\"> window.onload = function () { var url = generateUrl(true); // onelink is generated if (url) { document.getElementById('andrd_link').setAttribute('href', url); document.getElementById('ios_link').setAttribute('href', url); } //otherwise, if onelink is not generated it means that the user is redirected // and the store links in the buttons stay the same /* for the one button solution for both Android and iOS, use the code below instead document.getElementById('store_link').setAttribute('href', url); */ }; </script> </body> </html> Tip You can implement the javascript snippet using Google Tag Manager. Google Tag Manager makes it easier for you to control when and where the landing page javascript should be used. Instructions Activate the generateUrl script on page load of any page in your web site, which visitors can land on directly, and that has Download button/s for your mobile app/s. Important! By default the Download buttons should direct to the apps pages on iTunes and Google Play. If these links are kept with no change (i.e. visitor from AF attribution link or Facebook), generateUrl returns ' '. Otherwise, it returns the URL to be used with BOTH Download buttons (a single Download button could also be used in this case to cover for both apps with OneLink). Replace the oneLinkURL parameter value with your own basic OneLink URL in the exact format as the placeholder https://yourapp.onelink.me/abcd.MANDATORY to attribute visitors from all SRNs (except Facebook paid ads) and for mobile organic visitors. Replace the webFormURL parameter value with your own web form link. The web form should be able to get the user's email or SMS, and send the user's mobile device a message with a OneLink URL for downloading the app.MANDATORY to attribute desktop visitors. Replace the partnerIDParam parameter value, if you wish mobile organic users to be attributed to another media source than 'website'. By default, users are attributed to the web page they are at when clicking the Download button unless another campaign name is specified in the landing page URL (&c={CAMPAIGN_NAME}). To change that, replace the value of campaignParam parameter value.Optional for ALL scenarios, except Facebook paid ads. Viewing the results As with any media source, you can view your landing page results on your app's dashboard, raw data or via AppsFlyer APIs. If your mobile marketing funnel always leads to your landing page, these media sources represent the following: Source Description organic users that didn't go through the landing page, or didn't engage with it. Alternately, users that did engage but were not attributed for various reasons, e.g. passed the attribution look back window before launching the app. website organic mobile users visiting your landing page/website and installing afterward facebook ads users from paid Facebook ads fbpost_lp users from viral non-paid Facebook posts google_lp users from Google ads [SRN]_lp users from other SRNs, i.e. Twitter (twitter_lp), Snapchat (snapchat_lp), Doubleclick (doubleclick_lp) or Oath (oath_lp) Integrated partner ID users coming from an integrated partner's ad, which uses AppsFlyer's attribution link. For example, inmobi_int, tapjoy_int desktop desktop users filling in the web form, and completing an install after clicking on the SMS or email sent to their mobile devices afterwards Other sources users coming from owned media sources, which use AppsFlyer's attribution links. For example, email, sms, blog_post, etc OneLink for landing page solution OneLink\u2122 is a unique AppsFlyer attribution link, which is used for device detection and redirection, or for deep linking. The Social apps landing page solution requires the advertiser to have a basic OneLink URL.Users who click ads in social media apps are then redirected to an AppsFlyer-generated landing page. From there, theycan be deep linked, or continue to install the app. AppsFlyer provides a variety of social media apps landing page templates. Element positions in the templates are fixed, but the elements themselves are customizable, including background image or color, titles, texts, images, buttons, tags, and more. If you haven't implemented OneLink for your app: ConfigureOneLink template. Create a OneLink URL based on the template. In the script, replace https://yourapp.onelink.me/abcd with your OneLink URL."
  },
  {
    "text": "At a glance: EmailLabs, an email delivery and analytics platform, embeds AppsFlyer OneLink within emails. When email recipients click on the link, they are deep-linked into your app. Introduction ESPs (Email Service Providers) can be excellent sources for segmented user traffic. One of the challenges when using ESPs is recording clicks while persevering deep linking functionality. ESPs wrap the deep linking URL with their own click recording domain. This action often breaks iOS Universal Links. However, with ESPs that support Universal Links on top of their click recording domain, deep linking and click recording can still be performed successfully. SDK version prerequisites iOSAndroid AppsFlyer iOS SDK version 6.0.4 AppsFlyer Android SDK version 6.0.0 Step 1: Integration setup in EmailLabs To set up the integration in EmailLabs: Set up your domain according to this article Set up your click recording domain according to this article and the screenshot below. Enable link tracking according to this article and the screenshot below. Contact EmailLabs support at bok@emaillabs.pl and request to enable SSL. In EmailLabs, go to Panel > SMTP Accounts > Settings > Deep Links, and check the Activated box. For iOS apps, enter the Apple Application ID in the respective field. Step 2: Configuring your AppsFlyer SDK Note If you haven\u2019t already done so, make sure you have configured your app to support deep linking with OneLink. After configuring your click recording domain to support Universal Links as described previously, you need to set up your app to deep-link and resolve that Universal Link. Associate the click recording domain in Xcode: Provide the click recording domain to the SDK API setResolveDeepLinkURLs. This API needs to be called before SDK initialization. For more information please refer to SDK documentation here. [[AppsFlyerLib shared] resolveDeepLinkURLs = @[@\"example.com\",@\"click.example.com\"]; When the app is invoked due to a click on the Universal Link, the AppsFlyer SDK resolves the deep link and extracts the underlying OneLink. All deep link parameters are then propagated into the onAppOpenAttribution API for deep link logic execution. Step 3: Send emails with OneLink through EmailLabs Create a OneLink URL on the Link Management page (or manually). You must URL-encode parameter values. [Best practice] Use the following parameters: pid (media source): Use a media source that signifies this usage such as EmailLabs. c (campaign): Campaign name af_dp: The deep link URI scheme you want to deep-link your users into. af_web_dp: Where to redirect users clicking the link on desktop. af_ios_url: Where to redirect users that don\u2019t have the app clicking the link on an iOS device. af_android_url: Where to redirect users that don\u2019t have the app click the link on an Android device. Insert the OneLink URL in the email.Example: <a href=\"links.example.com data-msys-sublink=\"appsflyer\">Link to your app!</a> If the email is part of a retargeting campaign, add the parameter is_retargeting=true.This indicates that the attribution link is from a retargeting campaign. Learn more about retargeting. EmailLabs wraps the link with the defined click domain so that a click on the click domain redirects to the OneLink attribution link. Example The URL parameters in the example that follows aren't encoded to enable ease of reading. https://example.onelink.me/abcd?pid=emaillabs&c=Spring_Newsletter&is_retargeting=true& af_dp=testapp://path/to/content&af_web_dp=https://www.example.com/path/to/content& af_ios_url=https://www.example.com/path/to/content&af_android_url=https://www.example.com/path/to/content Step 4: Test your links To test the integration: Set up EmailLabs. Create a OneLink URL. Insert the URL in an email. Send a test email to yourself. Expected result: If you have the app installed, it should launch and you will be deep-linked into the defined app page. A click reflects in: The AppsFlyer dashboard, attributed to the media source and campaign. EmailLabs data."
  },
  {
    "text": "At a glance: At a glance: Use the PBA Web-Assisted Installs dashboard to understand the impact of your web marketing efforts on mobile app installs and to enhance the performance of web campaigns. Web-Assisted Installs use case Learn more about the other PBA dashboards:Website Attribution|Conversion Paths Web-Assisted Installs analysis Web-Assisted Installs measures the impact of web marketing efforts to drive users to install an app. Advertisers view web involvement in the context of the install event; they can determine the media source that drove website visitors towards app install. The best results in web-assisted installs is achieved if you set the CUID in the app and on the website. Web-Assisted Installs headline metrics The headline metrics display the total number of app installs relative to the number of website-assisted installs divided into organic and non-organic app installs. Consider the use-case scenarios, in the table that follows, to Web-Assisted Installs analysis. Install type Journey to install Considerations Total installs All installs engaging\u2014at some point\u2014with a web media source. What is the contribution of web marketing relative to all app installs? How are web marketing efforts distributed between media sources and channels? What is the contribution, if any, of Smart Banners? Organic installs App installs without engaging a mobile media source. What portion, if any, of organic installs are driven purely by web traffic? Which are the dominant media channels? What is the proportion between paid, owned, and earned media types? Non-organic installs User journeys begin on the web.The app is installed later after engaging with a mobile campaign. What volume of non-organic installs is influenced by the web? What web media channels and types influence non-organic installs? Do your paid mobile media sources overlap with web media sources? Web-Assisted Installs dashboard To go to the Web-Assisted Installs dashboard: Option 1 Option 2 My Apps > View brand bundles Click PBA dashboard. Go to the Web-Assisted Installs tab. Go to the navigation menu > People-based Attribution > Web-Assisted Installs tab Website assisted installs and reinstalls Installs are considered to have been influenced by a website if they occur within 30 days of a website visit.Installs and reinstalls including retargeting installs (reattributions) can be organic or non-organic. For information about data freshness, seePBA daily. Dashboard features Use dashboard features to: Understand and optimize the impact of web traffic campaigns on your app installs. Enhance collaboration between non-organic app install campaigns and web marketing. Feature Description Date picker & filters Set a date range; it will include app installs during that time. Filtered data includes the most recent web visit before install. Learn aboutsetting filters and groupings. Filters Filter installs using the web visit, app install, or both using the media source filter. You can set multiple instances of the media source filter. Example: Set the web visit media source filter to Google Search. To set the media source filter to Google Search: Add + filter type Media Source. Select Conversion. Select Google Search. Headline metrics The headline metrics display the number of app installs by attribution source (organic or non-organic). Metrics are broken down by: Organic: Installs occurring without engaging with a paid mobile media source. Non-organic: Installs occurring after engaging with a paid mobile media source. Web media channel Indicates web media channelcontributions that drove installs. Apply filters to evaluate the impact of different media channels. Web media source Indicates web media source contributions that drove users to install the app. Web-Assisted Installs over time Select a view\u2014media source or media channel\u2014to view web activity over time. Installs table The table indicates the interaction between the web and mobile media sources. Metrics, available as a combination of web/mobile media sources, indicate the position of the web media source: Installs:Number indicates installs whose web media source is considered the last non-direct web visit. Select a media source, web or mobile, to drill down to the campaign level. Export CSV Click Export CSV to export the Installs table."
  },
  {
    "text": "At a glance: Solve the sign-in error that displays during Apple Search Ads (ASA) cost integration. Issue date From May 5, 2021 Error When you try to sign in to Apple Search Ads for AppsFlyer cost integration, the following error message may display: Solution Close all of your open browsers. Relaunch the AppsFlyer dashboard. Try to enable Apple Search Ads cost integration again."
  },
  {
    "text": "At a glance: Redirect app users to a web URL or social media page by using a URL generated with OneLink. Redirect app users to a web URL Advertisers can post OneLink URLs leading to external web pages or social media sites. AppsFlyer measures the clicks on the link inside the app, by which you can determine the efficacy of the ad. Prerequisites: An AppsFlyer account with at least one app. To set up app-to-web redirection: Set up a OneLink template. In the When app is installed section, make sure you don't set up an app-opening method (Universal Links, App Links, or URI scheme). Create a OneLink custom link. In the When app isn\u2019t installed section, make sure the redirection settings are to the desired web URL. Don't add an af_dp parameter with a URI scheme. To test your link: Prerequisites: A mobile device with the app installed. Send the short or long URL to your phone, and click it.Note: Email or WhatsApp yourself the link, and open it on your phone. Don'tpaste into iOS notes, or directly into a mobile browser. You should be redirected to the web URL."
  },
  {
    "text": "What's new Get Facebook campaign raw data of ads that direct to Google Play Store using the Install Referrer. What's changing Starting October 29, 2021, user-level attribution data (raw data) of users brought by Facebook after this date will be restricted. Facebook makes this data available to MMPs like AppsFlyer, but not to advertisers. However, if the ad directs users to Google Play Store, attribution fields are available to advertisers in the Google Install Referrer which must be integrated into your app. The fields provided via the referrer populate AppsFlyer raw data reports available to you and enable AppsFlyer to attribute users who don't have an advertising ID (LAT-enabled). Using the referrer mechanism requires AppsFlyer SDK V5.4+ Note! Referrer data has priority over data provided by API and isn't restricted. Data in the referrer is encrypted by Facebook and is decrypted using a key available to you in your Facebook developer account. You must provide us with the decryption key described in the actions required row. Campaign attribution fields available via the referrer: Ad ID Ad name Adset ID Adset name Campaign ID Campaign name Account ID Channel Ad type (this field is not yet available) Note: No other fields are available via the referrer. This solution applies to click-through attribution and not view-through attribution. Referrer data isn't applicable to re-engagement campaigns, as users don't go through the store. When will AppsFlyer roll out this change? Starting October 29, 2021: Facebook restrictions to click-through data (in other words attribution raw data) are implemented. Advertisers can update the referrer decryption key in AppsFlyer. Starting November 3, 2021: AppsFlyer populates raw data and attributes using data provided by the referrer mechanism. Data availability summary How attributed Attribution data source Data available to advertisers Remarks Raw data Aggregate data Click-through Referrer (applies to Android apps downloaded from Google Play Store) Available Available LAT users attribution data available. Referrer takes priority over MMP data if both are available. Not applicable to re-engagement campaigns. Click-through MMP API Restricted* Available View-through MMP API Restricted* Available Referrer mechanism not supported. * Postbacks: If the data availability is restricted, install and in-app event postbacks aren't sent to partners. Note! This includes FMPs who also don't get postbacks. Data availability for users brought by Facebook starting October 29, 2021 Action required To get your decryption key from Facebook: [The following information is based on information provided to us by Facebook] Log in to your Facebook developer portal. Navigate to My Apps in the upper right-hand corner. Select the app for which you would like to access your decryption key. Navigate to Settings > Basic on the left-hand side of the page. Scroll down to the Android section and you will see your decryption key labeled Install Referrer decryption key underneath the Package Names field. Note:This is the same section in which you configured your package name and the Google Play Store. To enable the referrer mechanism in AppsFlyer. [Mandatory] Verify that AppsFlyer SDK V5.4+ is adopted in your app. Don't rely on earlier versions. Do one of the following: [Coming soon] Set the decryption key via API. To set the decryption key via the user interface: In AppsFlyer, go to Configuration > Integrated Partners. Select Facebook. In the Integration tab, paste the key in Install Referrer Decryption Key. Click Save integration. Update the decryption key via API [Coming soon] We will make an API that updates the decryption key. Click Followat the top of this article and we'll let you know when it is available. Raw data availability going forward If the attribution data is obtained via the referrer mechanism the data is unrestricted and is available via the raw data reports. If the attribution data is obtained via API, then raw data of users brought by Facebook is assigned to the restricted media source This change has no impact on the raw data of users brought before the change. In other words before October 29, 2021, 08:00 UTC. What's staying the same AppsFlyer continues to receive device-level data from Facebook, meaning that our attribution and reporting abilities (including multi-touch attribution, LTV, ROI, cohort, retention reports, fraud protection, Audiences, and other services) remain unchanged. See aggregate and analytics reporting tools. Note: If you provide us with the decryption key, we can attribute users who don't have an advertising ID (LAT-enabled). This improves attribution accuracy. For users attributed using the referrer mechanism, the channel parameter isn't currently available. This will change going forward. Changes to attribution Deferred deeplinking via GCD will be available for Android apps using the Google Install Referrer mechanism. It isn't available for iOS apps. FAQs Does the install referrer decryption key need to be updated?Once submitted, the decryption key doesn't need to be updated. When can I see user-level data in raw data reports?User-level data is displayed in raw date reports once a valid install referrer decryption key is submitted and an install is attributed to Facebook Ads. Is user-level attribution data available for installs that occurred between October 29, 2021, and November 3, 2021?Unfortunately, this data is not available."
  },
  {
    "text": "At a glance: Consider the additional SDK functionalities that are available and work with your developer to implement APIs such as uninstall measurement, user invite attribution, push notifications, and privacy settings. Related reading For a complete picture of planning the SDK integration with your app, be sure to read these articles: SDK integration overview Basic SDK integration guide Additional SDK integration guide (this article) Additional attribution methods Consider these additional attribution methods if you plan to measure TV, uninstalls, or pre-installed apps. All platforms TV attribution Attribute mobile users to TV ads aired in specific locations and at specific times. Measure uninstalls Measure the uninstall rate of users coming from different sources. Uninstall measurement can help you to analyze and optimize your campaigns according to this significant KPI. Learn how to set up uninstall measurement. Android only Pre-installed apps In pre-install campaigns, app owners contract with device manufacturers (OEMs) to pre-install their apps. With AppsFlyer, you can easily attribute installs of pre-installed apps. When users launch your app for the first time, AppsFlyer attributes the install to the preload partner as a media source. Sessions Measure user engagement with your app by counting the number of user sessions during a given period. All platforms Custom time between sessions By default, at least 5 seconds must pass between two app launches to count as two separate sessions. Learn more about counting sessions. Setting ahigh valueto the custom time between launches can impair APIs that rely on session data, such as deep linking. Android only Background sessions for utility apps You can manually report user sessions. This can be useful for utility apps that run in the background. Owned media Use OneLink to attribute your owned media sources such as websites, social media, and user invites. All platforms Resolve wrapped deep link URLs Some 3rd party services, such as email service providers, wrap links in emails with their own click recording domains. Some even allow you to set your own click recording domains. If OneLink is wrapped in such domains, it might limit its functionality. To overcome this issue, your developer needs to configure the app using these APIs: Android iOS Record push notifications AppsFlyer supports the measurement of push notification campaigns from all vendors, including Google Cloud Messaging and Apple push notification services. Learn more about push notification measurement. User invite attribution Allowing your existing users to invite their friends and contacts as new users to your app can be a key growth factor for your app. With AppsFlyer, you can attribute and record installs that originate from user invites within your app. Learn more about user invite attribution. Cross-promotion attribution Cross-promoting apps can be a major growth factor in driving additional installs for your apps. AppsFlyer enables you to attribute and record installs originating from a cross-promotion from the app the user currently has, to another one of your apps.Learn more about cross-promotion attribution. Attribute app sessions initiated from owned websites (domains) App owners that use App Links or Universal Links for deep linking (without OneLink), can configure the SDK to attribute sessions initiated via the domain associated with their app (Android/iOS). For example: A user searches Google and clicks on your domain, www.example.com. If the userdoesn\u2019t have the app installed, they are directed to the website (www.example.com). If the user has the app installed on their device, they are deep linked into the app associated with www.example.com. The session is attributed to the media source (pid parameter) configured in the SDK. Developer documentation is available as follows: Android SDK reference iOS SDK reference Tip! OneLink Smart Script can help app owners convert website visitors to app users. User privacy Review regulations like GDPR and CCPA and your business requirements, and consider which opt-in and opt-out policies to implement. All platforms Opt-out policy In some instances, you might need to instruct your developer to set the AppsFlyer SDK to stop or limit data collection, (for example, to comply with GDPR and CCPA regulations). Opting-out can take place at a number of different levels depending on regulatory and user requirements. For more information about the various scenarios, see Opting-out users. Exclude partners from getting data In some cases, advertisers may want to stop sharing user-level data with ad networks/partners for specific users. Reasons for this include: Privacy policies such as CCPA or GDPR User opt-out mechanisms Competition with some partners (ad networks, third parties) Data sharing with partners is controlled via the setSharingFilterForPartners method: Android iOS iOS only Strict-mode SDK Use the strict-mode SDK to completely remove IDFA collection functionality and AdSupport framework dependencies (for example, when developing apps for kids). If you market apps for kids, your developer needs to install the strict-mode SDK instead of the regular SDK. Note: IDFV remains available. Disable ad frameworks To disable the AdSupport and iAd frameworks, the SDK provides the following setters: disableCollectASA = true. Learn more disableAdvertisingIdentifier = true. Learn more"
  },
  {
    "text": "What's changing In the Export Data page, you can now set the report column sequence in addition to the existing field selection option. Effective date June 16, 2021 Where Export Data page What's changing Use the Report (CSV) field order setting to specify the sequence of columns in reports. Report field order options Setting Field selection allowed Remarks Default Yes Selected fields are ordered according to an AppsFlyer template. Going forward, the sequence will be preserved. Future fields will be appended to the right of the existing fields. Alphabetical (A-Z) Yes Selected fields are ordered alphabetically (ascending). Alphabetical (Z-A) Yes Selected fields are ordered in reverse order alphabetically (descending). Legacy No Fields are ordered according to the sequence of columns in reports prepared using the previous version of the export data page. Field selection is fixed and can't be changed. There is some variation of the reports per field depending on the actual report. The field order spreadsheet contains both a Default and Legacy sheet containing the relevant field order list. Procedure To change the field order: In the Report fields tab, select a Report (CSV) field order option. If required, change the selected fields by selecting or clear selecting the necessary fields. Click Download. List of what's new in AppsFlyer"
  },
  {
    "text": "At a glance: Integrate AppsFlyer into games developed in cocos2dX to measure installs, in-app events, media sources, and more. For the Cocos2dX AppsFlyer plugin for Android and iOS, follow this link: https://github.com/AppsFlyerSDK/AppsFlyerCocos2dX/tree/master"
  },
  {
    "text": "At a glance: Learn about the AppsFlyer SDK functionalities that are available for Android or iOS apps developed with Unity and determine which APIs you want your app to use. Related reading For a complete picture of integrating the Unity plugin with your apps, be sure to read these articles: Unity plugin V6 integration guide\u2014Overview (this article) Unity plugin V6 integration guide\u2014Basic SDK integration Unity plugin V6 integration guide\u2014Additional SDK integration Unity plugin V6 integration guide\u2014API reference About the Unity plugin V6 The Unity plugin V6 enables the development of iOS and Android apps using the Unity real-time platform. Based on the AppsFlyer mobile SDKs, it implements the same methods and supports the equivalent functionality of the platform-specific (iOS and Android) SDKs. The plugin is open-source and available on GitHub.In this article, the terms plugin and SDK are used interchangeably. Unity V6 support for iOS 14 The Unity plugin V6 includes support for iOS 14 and has significant API method changes from previous versions. Migrating to Unity V6 from a previous version causes breaking changes. These changes include new APIs, different classes and package names, and the removal of: com.appsflyer.GetDeepLinkingActivity To update your plugin from an earlier (V5) version, see our guide on migrating to the V6 beta (requires updating the Unity package). Note Unity plugin V4 is deprecated. The V4 integration guide is available for download in PDF format (link below). Integration tasks Mobile apps developed on the Unity platform use a common AppsFlyer plugin for both the Android and iOS platforms. Tab Content Result [Mandatory] Integration Add and configure the plugin App dashboard shows: New organic install New non-organicinstall [Recommended]Core APIs Use the plugin core APIs to: Measure in-app events Measure revenue Perform deep linking Gather conversion data App dashboard shows: In-app events Revenue Ready to: Perform deep linking Additional APIs Implement and use optional APIs for: Uninstall measurements Referrals (user invite attribution) Push notifications Ready to: Measure uninstalls Referrals User engagements with push notifications Handle user privacy scenarios and more. API reference Quick SDK API reference for developers Action list to integrate the Unity plugin into your apps"
  },
  {
    "text": "At a glance: Use two-factor authentication (2FA) to add an extra layer of security to the login process. Login credentials for account users are supplemented by Google Authenticator or SMS verification. Highlights 2FA is an optional feature activated by an admin user. Options areGoogle Authenticator and SMS verification. Activating/deactivating applies to all account users. Account users at the time of activation will be permitted to log in and prompted to set up 2FA at their next login. Admin: Managing 2FA Only an admin user can activate, reset, or deactivate a user's 2FA settings. Activate If an admin activates Google Authenticator and SMS verification, account users can choose which method they prefer to use. To activate 2FA: From the menu bar, access the user menu (email address drop-down). Select Security center. In the Enhanced login security section, click Configure login method to access the Login security page. In the Two-factor authentication (2FA) section, activate the toggle for Google Authenticator and/or SMS verification. Reset After reset, Google Authenticator is the default 2FA login screen. To reset a user's 2FA: From the menu bar, access the user menu (email address drop-down). Select User Management. Find the relevant user, and click the action menu (...) > Reset 2FA. Note: An admin can reset any other admin's 2FA other than their own or the account owner's. To reset the account owner's 2FA, contact the AppsFlyer Support team. Deactivate If 2FA is deactivated, account users will log in using only their username and password. To deactivate 2FA: From the menu bar, access the user menu (email address drop-down). Select Security center. In the Enhanced login security section, click Configure login method to access the Login security page. In the Two-factor authentication (2FA) section, deactivate the toggle for Google Authenticator and/or SMS verification. Confirm deactivation. Account users: Using Google Authenticator Google Authenticator is the initial default screen; however, the last 2FA method used appears at the next login. If you choose not to useGoogle Authenticator, then the setup and login screens have a link to the SMS verification2FA screen. First-time setup Before using 2FA for the first time, every account user must download Google Authenticator and aQR code app. These apps are available via Google Play (Android) or the App Store (iOS). New account user Follow email instructions and create a password. Log in to AppsFlyer,and you'll be redirected to the 2FA setup page. Set up 2FA. Download Google Authenticator and aQR code app. Scan the QR code. Enter the Google Authenticator-issued verification code. Click Verify, and you'll be redirected to the My apps page. Existing account users Log in to AppsFlyer (username and password), and you'll be redirected to the 2FA setup page. Set up 2FA. Download Google Authenticator and aQR code app. Scan the QR code. Enter the Google Authenticator-issued verification code. Click Verify, and you'll be redirected to the My apps page. Ongoing use Follow these steps for ongoing use. Log in to AppsFlyer (username and password), and you'll be redirected to the 2FA login page. Open Google Authenticator on your phone to get the verification code. Enter the code on the 2FA page. Click Verify, and you'll be redirected to the My apps page. Account users: Using SMS verification If you choose not to useSMS verification, then the setup and login screens have a link to Google Authenticator2FA screen. First-time SMS setup Google Authenticator is the default 2FA method. To reach the SMS verification method, click the SMS verification link. New account user Follow email instructions and create a password. Log in to AppsFlyer,and you'll be redirected to the 2FA setup page. Set up 2FA: Enter your phone number > click Send code. Enter SMS verification code > click Verify. Existing account users Log in to AppsFlyer (username and password), and you'll be redirected to the 2FA setup page. Set up 2FA: Enter your phone number > click Send code. Enter SMS verification code > click Verify. Ongoing SMS use Follow these steps for ongoing use: Log in to AppsFlyer(username and password), and you'll be redirected to the 2FA login page. The SMS verification page will appear if it was used at your last login. If not, click the link at the bottom of the Google Authenticator 2FA page. Your phone number will automatically display. Click Send code. Enter the verification code sent by SMS. Click Verify."
  },
  {
    "text": "At a glance: Download raw data reports in CSV files. Up to 1M rows per download. Limit reports to the data you need by using filters. Raw data export page Related reading: Aggregated data export page The following visual displays the first time you go to the Raw data export page; the My reports page displays if you have reports ready for download or duplication. My reports The My reports page lists reports previously generated and ready download, duplication, or both. The reports listed were generated during the previous 90 days; their download period is 7 days. After 7 days, if you still need the report, you must generate it again. For a description of the raw data reports, see Raw data reporting overview To generate or download reports, see the procedures section of this article. Raw data export page features and filter options The raw data export page provides reports having the features listed in the following table. Feature Remarks Report categories Differ according to your subscription plan Date range Raw data reports are filtered by activity date (event occurrence) Maximum number of rows 1M rows Rate limitation A quota mechanism limits the number of reports that can be generated per day. Retention/report window Install-related reports (installs, install postbacks) 60 out of the previous 90 days in a single download. In-app event-related reports: 31 out of the previous 90 days in a single download. Filter options The filters listed are available for use. In some cases, depending on the filter, filter options are populated. For example, when filtering by Geo the list of available countries is listed. Field selection The most important fields are pre-selected. You can add/clear select fields in the Report fields tab. Some fields may not have relevance to a given report. Nevertheless, you can select the field. We do this so that you can have consistent report formats (columns) For example, selecting fraud (Protect360) related fields in the user acquisition in-app events report returns blank columns. These fields are populated only in the context of explicit Protect360 reports. Report (CSV) field order Columns in reports are arranged according to the field order setting. The column sequence listed in a spreadsheet contains separate tabs for the legacy and default options. Setting Field selection allowed Remarks Default Yes Selected fields are ordered according to an AppsFlyer template. Going forward, the sequence will be preserved. Future fields will be appended to the right of the existing fields. Alphabetical (A-Z) Yes Selected fields are ordered alphabetically (ascending). Alphabetical (Z-A) Yes Selected fields are ordered in reverse order alphabetically (descending). Legacy No Fields are ordered according to the sequence of columns in reports prepared using the previous version of the export data page. Field selection is fixed and can't be changed. There is some variation of the reports per field depending on the actual report Features Filter Advertiser Ad network Agency Media source Yes No Yes Geo (territory/country) Yes Yes Yes In-app events (available for in-app event reports) Yes No Yes Filter options (per account type) Procedures Generate report To generate a report: Go to Reports > Raw Data Export Click Create report or + New report Select a report type Select the activity Date range.You can set the specific date or select from the options such as custom, yesterday, last 7 days, and so on. [Optional] Set the Maximum number of rows. Select from 100, 200K, 500K, or 1M rows. [Optional] Set filters: Click Add filter. Select a filter type, like Media source. Set the filter value. Select one or more or all filter values. If the filter option does not display, search for it. Add additional filters as needed. [Optional]: Reports are populated automatically with the necessary fields. You can add or remove fields as follows: Go to theReport fields tab.The list of selected fields displays. You can't change the selection of mandatory fields. Select or clear select fields as required. [Optional] Set Report (CSV) field Order to set the sequence of columns. [Option] Click Restore defaults if needed. Click Create. The My reportspage displays. Initially, the status indicates that the report is generating. Generation can take up to 10 minutes. During report generation, you can continue working, create additional reports, or navigate to other pages. Download report To download a report: Verify that you are on the Raw Data Export page. If necessary, navigate to Reports > Raw Data Export. Click (download), to download the report. Generated reports are available for download for 7 days. Duplicate and edit report settings To duplicate and edit report settings: Verify that you are on the Raw Data Export page. Click , to duplicate report settings and then edit the settings. Click Create. Generated reports are available for 7 days. The My reports page displays. Initially, the status indicates that the report is generating. Generation can take up to 10 minutes. During report generation, you can continue working, create additional reports, or navigate to other pages. Additional information Traits and limitations Trait Remarks Ad network access Yes Agency access Yes Agency transparency Yes App-specific time zone Yes App-specific currency Yes Limitations Up to 1M records per download Organic data Available Non-organic data Available Data freshness Report dependent Historical data Previous 90 days Account user access Users in roles with required permissions Email delivery Not supported Field sequence templates The Report field order setting allows you to specify the sequence of columns in reports and in some cases the fields themselves. Report field order options Setting Field selection allowed Remarks Default Yes Selected fields are ordered according to an AppsFlyer template. Going forward, the sequence will be preserved. Future fields will be appended to the right of the existing fields. Alphabetical (A-Z) Yes Selected fields are ordered alphabetically. Alphabetical (Z-A) Yes Selected fields are ordered in reverse order alphabetically Legacy No Fields are ordered according to the sequence of columns in reports prepared using the previous version of the export data page. Field selection is fixed and can't be changed. There is some variation of the reports per field depending on the actual report. This spreadsheet contains both a Default and Legacy sheet. Each contains the relevant field order list. To change the field order: In the Report fields tab, select a Report field order option. If necessary change the selected fields by selecting or clear selecting the necessary fields."
  },
  {
    "text": "What's changing: Raw-data fields:Channel,Match type Get conversion data (GCD) parameters in the SDK:af_channel,match_type Who is impacted:Advertisers and developers Where is it changing: SDK, dashboards, raw-data Effective change date: September 6, 2020 Take this into consideration, as it can affect raw-data import processes and logic within your app. Changes to channel / af_channelvalue for YouTube Before the change After the change UACE_Video UACE_Youtube UAC_Video UAC_Youtube Changes to match type /match_type Before the change After the change fingerprinting probabilistic (means probabilistic modeling)"
  },
  {
    "text": "At a glance: Set up cloud service buckets, folder paths, and files for use by the AppsFlyer Data Clean Room. Buckets can be located on AWS S3, GCS, or both. Overview The AppsFlyer Data Clean Room (DCR) allows advertisers to leverage the value of their first-party user-level data by matching and enriching it with AppsFlyer user-level attribution data. The resulting aggregated reports preserve user privacy while allowing advertisers the valuable insights that only this combined data can provide. Preparing to use the DCR involves setting up cloud service storage and ensuring that the data files you will upload are properly formatted and transmitted to the DCR. Cloud service storage Cloud service storage is used by the AppsFlyer Data Clean Room (DCR) for 2 primary purposes\u2014 Input: Location from which AppsFlyer reads first-party data files produced by your BI system Output: Destination to which AppsFlyer delivers reports after DCR processing You can use one or more buckets for these purposes (on AWS, GCS, or both). However, in most cases, the easiest-to-manage structure includes: A single bucket on a single cloud service A folder identified by your DCR Key directly underneath the bucket 2 separate folder paths underneath the top-level folder: one for input and one for output This article provides the instructions for creating this structure. DCR naming requirements The following naming requirements apply to all DCR data entities (buckets, folders, and files): Maximum length: 200 characters Valid characters: letters (A-Z, a-z) numbers (0-9), cannot be the first character of a name hyphens (-), cannot be the first character of a name Invalid characters: spaces all other symbols or special characters Characters used for special purposes only: equal signs (=), only where required in date and version folder names underscores (_), only where used to identify the parts of multi-part GZIP files or for naming _SUCCESS files dots (.), only directly before filename extensions (.csv, .gzip) Note AWS and GCS automatically append a slash (/) to the end of each folder name. Do not include this character when naming your buckets or folders. Creating a bucket Buckets are created using the interface of your selected cloud service, as described in the tabs below. The following requirements are relevant to buckets on both cloud services: Bucket name: The bucket name must begin with af-dcr- Example: af-dcr-example-bucket Additional: The AppsFlyer DCR service must be given bucket permissions. See instructions for granting these permissions in the tabs for each cloud service below. The bucket must be for the exclusive use of AppsFlyer Data Clean Room. In other words, no other service can write data to the bucket. AWS bucket Note: The following procedure must be performed by your AWS admin. To create a bucket and grant AppsFlyer permissions: Sign in to the AWS console. Go to the S3 service. To create the bucket: Click Create bucket. Complete the Bucket name, starting with af-dcr-, followed by your text (as described above). Click Create bucket. To grant AppsFlyer bucket permissions: Select the bucket you created. Go to the Permissions tab. In the Bucket policy section, click Edit.The Edit bucket policy window opens. Paste the following code snippet into the window. { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"AF-DCR\", \"Effect\": \"Allow\", \"Principal\": { \"AWS\": \"arn:aws:iam::195229424603:user/product=dcr-reporter__envtype=prod__ns=default\" }, \"Action\": [ \"s3:GetObject\", \"s3:ListBucket\", \"s3:DeleteObject\", \"s3:PutObject\" ], \"Resource\": [ \"arn:aws:s3:::af-dcr-mybucket\", \"arn:aws:s3:::af-dcr-mybucket/*\" ] } ] } In the snippet, replace af-dcr-mybucket (in the 2 lines in which it appears) with the name of the bucket you created.Caution! When replacing the bucket name in the snippet, be sure not to overwrite /* in the second line in which the bucket name appears. Click Save changes. GCS bucket Note: The following procedure must be performed by your Google Cloud admin. To create a bucket and grant AppsFlyer permissions: Sign in to your GCS console. Go to the Cloud Storage Browser page. To create the bucket: ClickCreate bucket. Enter your bucket information on theCreate a bucketpage. Include the bucket name, starting with af-dcr- and followed by your text (as described above). Click Continue. Click Create. To grant AppsFlyer bucket permissions: Select the bucket you created. Go to the Permissions tab. In the Permissions section, click + Add.The Add members window opens. In the New members box, paste the snippet that follows. appsflyer-dcr@dcr-report.iam.gserviceaccount.com From the Role list, select Cloud storage > Storage Admin. Click Save. Creating a DCR key folder To ensure maximum security, the folder directly beneath the bucket (the \"DCR key\") must be named with the 8-character, alphanumeric DCR key assigned to your account (for example, 01bcc5fb). Note that this is different from any other password or key associated with your AppsFlyer account. The DCR key folder is generally created manually using the interface of your selected cloud service. To get your account's DCR key, click the DCR key button at the top of the main DCR screen. Example After creating the DCR key folder, your bucket/folder structure would look something like this: af-dcr-example-bucket/01bcc5fb/ Creating an input folder path The detailed requirements for creating each element of the input folder path are described in the tabs below. Top-level input folder Though it is not required, best practice is to create a top-level input folder directly beneath the DCR key folder. This folder will be dedicated to files you upload to the DCR. The top-level input folder is generally created manually using the interface of your selected cloud service. This practice is even more highly recommended when you are using the same bucket both for uploading data files (input) and receiving reports (output). You can name this folder anything you want, so long as it complies with the DCR naming requirements. For ease of identification, it is usually named input/. Example After creating the top-level input folder, your bucket/folder structure might look something like this: af-dcr-example-bucket/01bcc5fb/input/ Second-level folder for each data source You can regularly upload different data source files to the DCR for processing. Each of these data sources must be assigned a separate folder (\"data source folders\"). So, for example, if you plan to upload 2 files to the DCR for processing every day: BI-data.csv and CRM-data.gzip, you would assign each of these data sources a folder. You could choose to call these folders BI-data/ and CRM-data/. The data source folders are generally created manually using the interface of your selected cloud service. Example After creating 2 data source folders, your bucket/folder structure might look something like this: af-dcr-example-bucket/01bcc5fb/input/BI-data/   CRM-data/ Nested subfolders for each date and version We've finally arrived at the part of the folder structure where the real action happens: the folders in which AppsFlyer continually looks for new data files to read into the DCR. Each time you want AppsFlyer to process a data source file and run a report based on it, you upload a new version of the file to the data source folder, within a series of nested subfolders indicating the date and version number (plus one extra subfolder to let AppsFlyer know where the data is): Within each data source folder --> 1 subfolder for each date (\"date folder\") Format: dt=yyyy-mm-dd/ Example: dt=2022-03-10/ Within each date folder --> 1 subfolder for each version on that date (\"version folder\") Format: v=n/ Example: v=1/ Note: The version folder is required even if you only upload the file one time per day. Within each version folder --> 1 subfolder to indicate the location of the data (\"data folder\") Format: data/ In most cases, you would use API calls or other available programmatic means to create the date/version/data folders automatically each time the data source file is uploaded. For additional information, see the API references for your cloud service: AWS, GCS. Since the full folder structure is programmatically created at the time files are uploaded, a realistic example includes both folders and files. See this illustration in the Files tab, below. Files Data source files Uploaded data source files must meet these name, file format, and location requirements: Must comply with DCR naming requirements CSV or GZIP format. The file underlying GZIP compression must be a CSV file. Number of data source files per data folder: CSV: Maximum of 1 GZIP: Maximum of 1 single-part file. Multi-part GZIP files are supported when named as follows: filename_part01.gzip, filename_part02.gzip, etc. Data within the source files must meet these requirements: Date and time: Format: yyyy-MM-dd hh:mm:ss Time zone: UTC Numbers: maximum 2 digits following the decimal point String length: maximum of 256 characters Character limitations: none (all characters are valid) _SUCCESS files Once the upload of a data source file to the data folder is complete, an empty file named _SUCCESS should be uploaded to the version folder. This alerts AppsFlyer that a new file is available to be processed. In most cases, you would use an API script to automatically generate and upload this file. Important! The _SUCCESS file is uploaded to the version folder, outside the data folder. The filename: Must be in ALL CAPS Must be preceded by an underscore (_) Should not have a file extension For multi-part files: Only one _SUCCESS file should be uploaded for all file parts. The _SUCCESS file should be uploaded only after all file part uploads are complete. Example After uploading source data files on 2 days (and programmatically creating date/version/data folders and _SUCCESS files), your bucket/folder structure might look something like this: af-dcr-example-bucket/01bcc5fb/input/BI-data/  dt=2022-03-10/    v=1/   _SUCCESS   data/    BI-data.csv  dt=2022-03-11/    v=1/   _SUCCESS   data/    BI-data.csv   CRM-data/  dt=2022-03-10/    v=1/   _SUCCESS   data/    CRM-data_part01.gzip    CRM-data_part02.gzip    v=2/   _SUCCESS   data/    CRM-data_part01.gzip    CRM-data_part02.gzip  dt=2022-03-11/    v=1/   _SUCCESS   data/    CRM-data_part01.gzip    CRM-data_part02.gzip    v=2/   _SUCCESS   data/    CRM-data_part01.gzip    CRM-data_part02.gzip Creating an output folder path The detailed requirements for creating each element of the output folder path are described in the tabs below. Top-level output folder Though it is not required, best practice is to create a top-level output folder directly beneath the DCR key folder. This folder will be dedicated to reports delivered by the DCR. The top-level ouput folder is generally created manually using the interface of your selected cloud service. This practice is even more highly recommended when you are using the same bucket both for uploading data files (input) and receiving reports (output). You can name this folder anything you want, so long as it complies with the DCR naming requirements. For ease of identification, it is usually named output/. Example After creating the top-level output folder, your bucket/folder structure might look something like this: af-dcr-example-bucket/01bcc5fb/output/ Second-level folder for each report You can regularly receive any number of custom-designed reports from the DCR. Each of these reports must be assigned a separate folder (\"report folders\"). So, for example, if you will be receiving 2 reports from the DCR: conversions report and retargeting report, you would assign each of these data sources a folder. You could choose to call these folders conversions/ and retargeting/. The report folders are generally created manually using the interface of your selected cloud service. Example After creating 2 report folders, your bucket/folder structure might look something like this: af-dcr-example-bucket/01bcc5fb/output/conversions/  retargeting/ Nested subfolders for each date and version (not customer-created) Unlike in the input folder path, you do not create nested date/version folders in the output folder path. AppsFlyer will automatically create this folder structure each time a report is delivered. Report file format DCR reports are delivered in CSV format."
  },
  {
    "text": "At a glance: Measure the quality of your users throughout their user journey by recording these suggested in-app events for your flight booking app. Flight booking Flight booking apps allow travelers to easily book flights while choosing from the best offers. The typical events that we suggest recording are booking a flight, searching for flights, and viewing offers. Recording events can help you: Learn about popular destinations Analyze seasonal trends Learn about popular airlines that users prefer to travel with Important! Make sure to read the instructions for marketers about implementing in-app events. To streamline the implementation process, use our In-app event generator. This tool includes all of the typical in-app events described in this article and lets you modify the events according to your business needs. Once complete, share the file with your developer. For each recommended event included in this article, there are code samples for iOS, Android, and Unity developers. Detailed instructions for your developer can be found in the AppsFlyer developer hub. For more information about recording in-app events, see the Rich in-app events guide. Recommended structures for predefined events The following section provides a list of event structures that are typical to the flight booking vertical. Each structure includes a predefined event name and the suggested event parameters to use. Note that in-app events can include any event parameters that meet your business needs. Complete registration (af_complete_registration) Purpose Learn how many users installed the app and completed the signup process, what signup methods your users prefer. Trigger When the user completes the signup process Event parameters Field name Description Example value af_registration_method Type of signup method email, Facebook Login (af_login) Purpose Understand the retention of your registered users Trigger When the user successfully logs in Event parameters Can be sent without any additional parameters Travel booking (af_travel_booking) Purpose The ability to book flights is the core function of the app. This event can help you determine: Popular destinations Popular airlines Seasonal trends Trigger When the user lands on the thank you page after successfully booking a flight Event parameters Name Description Example value af_revenue Revenue associated with booking 647.99 af_currency Currency code SGD af_price Price 674 af_content_id ID of the flight offer ODIRNH af_departing_departure_date Departure date 2018-06-21 af_returning_departure_date Return date 2018-06-26 af_destination_a First destination BKK af_destination_b Second destination (if applicable) SYD airline_code Code of the airline company KLM af_class Class the flight is booked to economy purchase_method Method used for the purchase credit card Content view (af_content_view) Purpose This event can help you determine: What flight offers users find most appealing Whether search results are relevant to search queries Trigger When a user clicks a search result Event parameters Name Description Example value af_departing_departure_date Departure date 2018-06-21 af_returning_departure_date Return date 2018-06-26 af_destination_a First destination BKK af_destination_b Second destination (if applicable) SYD Search (af_search) Purpose Flight booking apps let users search for flights and deals. One way of gaining insights into user preferences is to record the search parameters. This event can help you: Learn what users are looking for Understand which destinations are most popular See how many users travel with kids See what time of the year users prefer or plan to travel Trigger After the user fills in the search form and clicks the search button Event parameters Name Description Example value af_num_children Number of children that are traveling 0 af_destination_a First destination BKK af_destination_b Second destination (if relevant) SYD af_departing_departure_date Departure date 2018-06-21 af_returning_departure_date Return date 2018-06-26 af_num_infants Number of infants that are traveling 0 af_num_adults Number of adults that are traveling 1 Add payment info (af_add_payment_info) Purpose Record successful and unsuccessful attempts at adding payment info when booking a flight. Trigger When a user clicks on the book a flight button Event parameters Name Description Example value af_success Whether adding payment method is successful true Purchase (af_purchase) Purpose Learn about purchase trends in your flight booking app. This event can help you: Determine the LTV of your users and the ROI of your campaigns across ad networks and ad agencies Determine what offers are most popular with your users Cross-reference campaigns with purchased items in order to optimize campaign targeting Trigger When the user lands on the thank you page after a successful purchase Event parameters Name Description Example value af_revenue Estimated revenue from the purchase 1205.99 af_price Overall purchase sum 4000 af_content_id Item ID 121 af_content_type Item category flight af_currency Currency code AUD af_quantity Number of items in the cart 1 af_order_id ID of the order that is generated after the purchase X123ABC af_receipt_id Order ID, required for CRITEO and Google Ad Words retargeting integration X123ABC Recommended structures for custom events The following section provides a list of event structures that include custom event names and the suggested event parameters to use. Note that in-app events can include any event parameters that meet your business needs. First purchase (first_purchase) Purpose Same as the Purchase event. In addition, this event can help you determine: How long it takes a new buyer to purchase What flights first-time buyers prefer to purchase The average price and revenue of first-time purchases Trigger When the user completes their first purchase Event parameters Name Description Example value af_revenue Revenue from purchase 1205.99 af_price Overall purchase sum 4000 af_content_id Item ID 121, 262 af_content_type Item category flight af_currency Currency AUD af_quantity Quantity of items in the cart 1 af_order_id ID of the order that is generated after purchase X123ABC af_receipt_id Order ID, required for CRITEO and Google AdWords retargeting integration X123ABC"
  },
  {
    "text": "At a glance: Understand the discrepancies that might occur between AppsFlyer and Google Analytics. Related reading For a complete picture of working with Google Analytics in AppsFlyer, check out these articles: Google Analytics integration\u2014Setup Google Analytics integration\u2014Viewing data Google Analytics integration\u2014Custom dimensions Google Analytics integration\u2014Discrepancies (this article) Discrepancies in data between AppsFlyer and Google Analytics Listed below are reasons for discrepancies between AppsFlyer and Google Analytics. High volume of non-consenting iOS 14.5+ users When AAP is enabled for your app, AppsFlyer doesn't send postbacks to Google Analytics for non-consenting iOS 14.5+ users. In case your app has a large number of such users, there will be a discrepancy between AppsFlyer and Google Analytics dashboards. Incorrect tracking ID Make sure to specify the correct Google Analytics Tracking ID when integrating with AppsFlyer. If you set an incorrect tracking ID, data might be reported to the wrong dashboard or not reported at all. Example The Google Analytics Tracking ID has the format of UA-123456789-1. This is the tracking ID that you should specify in the integration.UA-123456789, 123456789-1 and 123456789 are incorrect formats. Customer user ID Google Analytics associates events by Customer User ID. The Customer User ID that AppsFlyer sends by default is GAID or IDFA. Therefore, Google Analytics sees re-installing users (users who install, uninstall and then reinstall) as the same users. Example A user installs your app and then uninstalls it. The user then re-installs the app through a retargeting campaign within the re-attribution window. Google Analytics sees this user as the same user. In User Explorer in Google Analytics, this user has listed under them all of the following: regular-install regular-in-app-event reattribution-install reattribution-in-app-event AppsFlyer, on the other hand, sees this user as two different users: A user that comes from a UA campaign A user that comes from a retargeting campaign In addition, discrepancies might arise if you implement both GA and AppsFlyer SDK. Time zone differences If the time zone of your GA dashboard differs from that of your app's timezone in AppsFlyer, data might not align. Example Your app's dashboard is configured to GMT +13 and your GA dashboard is configured to GMT. This means that your app's dashboard is ahead of your GA's dashboard by one day. Therefore, data that appears in GA dashboard for March 2nd only appears in your app's dashboard if you choose March 3rd in the date range filter. Duplicate events If events occur in close proximity to each other, both AppsFlyer and Google Analytics might drop them as duplicate events. AppsFlyer'sevent deduplication mechanismis different than the one that Google Analytics uses. Because AppsFlyer and Google Analytics deduplicate events differently, discrepancies in events data might occur. Session count AppsFlyer counts sessions each time the app is launched or comes back to the foreground. Google Analytics counts sessions according to CID (customer user id) and activity. Example A user launches your app, performs some actions and then sends the app to the background. The user then repeats the process 4 times, each time in an interval of about 5 minutes. To AppsFlyer, this counts as 5 different sessions. However, to Google Analytics this counts as a single session. To learn more about how AppsFlyer and Google Analytics calculate sessions, check the resources below. How AppsFlyer counts sessions Google Analytics sessions Google Analytics views and filters Google Analytics allows you to create different views and apply different filters to them. When you compare data from AppsFlyer and Google Analytics, make sure you view data in the All Web Site Data view in Google Analytics."
  },
  {
    "text": "At a glance: Find the Apple bundle ID and use it as needed. The Apple bundle ID is a unique identifier associated with iOS apps. App owners set this ID Apple recommends that app owners name the ID using a reverse domain-name notation.Example: com.domain.appname To locate the Apple bundle ID: Log into your iTunes Connect account. Click the relevant app. Go to General > App Information.The Bundle ID is displayed."
  },
  {
    "text": "At a glance: Learn what defines a loyal user in AppsFlyer, and how you can customize it. What is a loyal user? According to the AppsFlyer default setting, a loyal user is a user who after downloading and opening the app for the first time, opens it a further 3 times. This is an important KPI for user engagement. Changing the loyal user definition You can define a loyal user per app by specifying an in-app event trigger.To change the loyal-user event trigger, seeApp settings. Example Users who perform registration or in-app purchases can be more indicative of being loyal users than the default 3 session definition."
  },
  {
    "text": "At a glance: Measure the quality of your users throughout their user journey by recording these suggested in-app events for your eCommerce app. eCommerce eCommerce apps allow buyers to easily search for and buy goods online. The typical events that we suggest recording are search, purchase, adding to cart, and adding to wishlist. Recording events can help you determine: The most popular categories What buyers are searching for How many buyers completed a checkout How many buyers are recurring buyers and how many are just one-time buyers Important! Make sure to read the instructions for marketers about implementing in-app events. To streamline the implementation process, use ourIn-app event generator. This tool includes all of the typical in-app events described in this article and lets you modify the events according to your business needs. Once complete, share the file with your developer. For each recommended event included in this article, there are code samples for iOS, Android, and Unity developers. Detailed instructions for your developer can be found in the AppsFlyer developer hub. For more information about recording in-app events, see the Rich in-app events guide. Recommended structures for predefined events The following section provides a list of event structures that are typical to the eCommerce vertical. Each structure includes a predefined event name and the suggested event parameters to use. Note that in-app events can include any event parameters that meet your business needs. Complete registration (af_complete_registration) Purpose Learn how many users installed the app and completed the signup process, and what signup methods your users prefer. Trigger When the user completes the signup process Event parameters Name Description Example value af_registration_method Type of signup method Email, Facebook Login (af_login) Purpose Understand the retention of your registered users Trigger When the user successfully logs in Event parameters Can be sent without any additional parameters Search (af_search) Purpose Learn what users are looking for, and which search results are the most relevant and lead to a purchase. Trigger One of the following: When the user clicks on the search button When the user lands on the search results page Event parameters Name Description Example value af_search_string Search term Red dress, running shoes af_content_list List of content IDs 001, 092 Content view (af_content_view) Purpose Determine the view rate of specific products. This event can help you: Correlate product views with product sales Understand what categories are the most popular according to product views See the correlation between buyers' currency and the products they view Trigger When the user views a specific product details page Event parameters Name Description Example value af_price Product price 2000 af_content International Article Number (EAN) when applicable, or other product or content identifier Required parameter for Facebook dynamic ads ABC123 af_content_id Product ID Required parameter for Facebook dynamic ads 102 af_content_type Product category Required parameter for Facebook dynamic ads Shoes af_currency Currency in the product details page THB, USD List view (af_list_view) Purpose Record which lists (for example, newly added products, related products, or recommended products) buyers view the most. Trigger When the user views a specific list Event parameters Name Description Example value af_content_type Type of list Related, recommended, new arrivals af_content_list List of content IDs from the category 001, 092 Add to wishlist (af_add_to_wishlist) Purpose Record what products and categories buyers add to their wishlists. When you know what products are often added to wishlists, you can then offer these products in sales or discounts and encourage buyers to purchase them. You can also retarget users according to the products that they added to their wishlist. Trigger When the user adds items to their wishlist Event parameters Name Description Example value af_price Price of the product 600 af_content_id Product ID 300 af_content_type Product category Shoes, electronics af_currency Currency displayed on the product details page GBP Add to cart (af_add_to_cart) Purpose Record when a user adds products to their cart. This event can help you determine: How many products on average buyers add in one purchase How much time passes between adding two different products How many buyers abandon their cart Trigger When the user adds a product to the cart Event parameters Field name Description Example value af_price Product price 350, 1000 af_content International Article Number (EAN) when applicable, or other product or content identifier Required parameter for Facebook dynamic ads ABC123 af_content_id Product ID Required parameter for Facebook dynamic ads 001, 092 af_content_type Product type Required parameter for Facebook dynamic ads Shirt, shoes af_currency Product currency THB, USD af_quantity How many items of the same product were added to the cart 2, 5 Initiated checkout (af_initiated_checkout) Purpose Understand how buyers behave when they proceed to checkout. This event can help you determine: The average price when buyers check out compared with the average price in the purchase event Whether users add or remove products after proceeding to checkout Trigger When the user initiates the checkout but didn't yet complete the checkout Event parameters Field name Description Example value af_price Total price in the cart 4000 af_content_id ID of products in the cart 221, 124 af_content_type List of product categories Shirt, pants af_currency Currency during time of checkout THB af_quantity Total number of items in the cart 2, 5 Purchase (af_purchase) Purpose Learn about purchase trends in your app. This event can help you: Determine the LTV of your users and the ROI of your campaigns across ad networks and ad agencies Determine which offers are most popular with your users Cross-reference campaigns with purchased items in order to optimize campaign targeting Trigger When the user lands on the thank you page after a successful purchase Event parameters Name Description Example value af_revenue Estimated revenue from the purchase 1205.99 af_price Overall purchase sum 4000 af_content International Article Number (EAN) when applicable, or other product or content identifier Required parameter for Facebook dynamic ads ABC123 af_content_id Item ID Required parameter for Facebook dynamic ads 121, 262 af_content_type Item category Required parameter for Facebook dynamic ads Shoes, pants af_currency Currency code AUD af_quantity Number of items in the cart 2, 5 af_order_id ID of the order that is generated after the purchase X123ABC af_receipt_id Order ID Required parameter for CRITEO and Google Ad Words for purchase validation X123ABC Recommended structures for custom events The following section provides a list of event structures that include custom event names and the suggested event parameters to use. Note that in-app events can include any event parameters that meet your business needs. First purchase (first_purchase) Purpose Same as the Purchase event. In addition, this event can help you determine: How long it takes a new buyer to purchase What products first-time buyers prefer to purchase The average price and revenue of first-time purchases Trigger When the user completes their first purchase Event parameters Name Description Example value af_revenue Revenue from purchase 1205.99 af_price Overall purchase sum 4000 af_content International Article Number (EAN) when applicable, or other product or content identifier Required parameter for Facebook dynamic ads ABC123 af_content_id Item ID Required parameter for Facebook dynamic ads 121, 262 af_content_type Item category Required parameter for Facebook dynamic ads Shoes, pants af_currency Currency AUD af_quantity Quantity of items in the cart 2, 5 af_order_id ID of the order that is generated after the purchase X123ABC af_receipt_id Order ID Required parameter for CRITEO and Google AdWords retargeting integration X123ABC Remove from cart (remove_from_cart) Purpose Recording this event can help you: Determine what items buyers remove from their cart Determine the product categories of items that buyers remove from their cart Compare the data from the Add to cart event to gain insights into products that don't make it to checkout Trigger When the user removes an item from the cart Event parameters Name Description Example value af_content_id Item or product ID 521 af_content_type Item or product category Shoes"
  },
  {
    "text": "At a glance: deltaDNA, an AppsFlyer integrated partner, is the leading real-time analytics and marketing platform for mobile gaming. The combination of market-leading deep data functionality, ultra-high performance and a flexible, open environment allows users to maximize engagement and lifetime value through player segmentation, predictive modeling and real-time targeted interventions. Important! Some media sources restrict sharing data with 3rd parties. AppsFlyer cannot share user-level data of users acquired through these media sources with 3rd party platforms or services. All installs from such media sources are therefore sent as organic. For more details and a list of media sources that restrict sharing data with 3rd parties, click here. Integrating with deltaDNA Important! The deltaDNA SDK userID, whether auto-generated or provided by the game, must be set as the customer user id in the AppsFlyer SDK to ensure the attribution data received from AppsFlyer is applied to the correct user. This must only be done on builds of the game integrated against the LIVE environment on the deltaDNA side. If you are using a propriety user id and populating this id both in AppsFlyer custom_user_id parameter and in deltaDNA user parameter \u2013 No additional code implementation is needed. If you are not using a propriety user id, you must take your userID property from deltaDNA and implement it in the AppsFlyer SDK under the customer_user_id parameter. The following code should be implemented after both SDKs are initiated. Android iOS Unity AppsflyerLib.getInstance().setCustomerUserId(DDNA.instance().getUserId()) [AppsFlyerTracker sharedTracker].customerUserID = [DDNASDK sharedInstance].userID; AppsFlyer.setCustomerUserID (DDNA.Instance.UserID) Follow the instructions below to configure the integration with deltaDNA 1. Create an AppsFlyerAttribution event in deltaDNA with the Event Management tool 2. Get the Live environment key on the Game Details page in deltaDNA dashboard: 3. Configure deltaDNA in AppsFlyer\u2019s Dashboard: Go to Configuration > Integrated Partners. Search and select deltaDNA. In the Integration tab, turn Activate partner on. Insert the Enviorment_key taken from deltaDNA console (see Section 2). Set the Sending option to All media sources, including organic. Click Save Integration. Once you have saved the configuration, AppsFlyer sends the following data to deltaDNA for every organic and non-organic install: Environment key User ID Install Time Media Source Campaign name Note deltaDNA rejects install postbacks from AppsFlyer if there is no Customer User ID or UserID defined. Viewing the attribution data in the deltaDNA console Attribution data received from AppsFlyer can be used to: Filter Measure charts Build custom dashboards and reports Run detailed analysis Create custom player segments to target players with personalized campaigns and offers. The Acquisition Channel filter at the top of all the Measure charts, the retention Matrices, LTV and Retention Predictors uses and is based on the AppsFlyer Media Source. There are 8 attribution parameters that AppsFlyer can send to deltaDNA for use in your analysis, reports and queries. They are all prefixed with the letters afAttr. E.g. afAttrCampaign, afAttrAgency, afAttrMediaSource for the campaign, agency, and media source respectively. All attribution parameters are listed within the appsFlyerAttribution added to your Event Management screen. Use them to build custom analysis queries and reports in any of the deltaDNA Analyze tools."
  },
  {
    "text": "What's new Validation Rules page has a new layout and increased functionality. Where Validation Rules page Raw data reports Rejection postbacks Required actions Who:Advertisers What: Familiarize yourself with the new layout and features. No action is required for existing rules; they are automatically migrated. Advertisers with the Protect360 Premium plan should use Protect360 fraud reports for installs, in-app events, and install postbacks, instead of the Targeting validation rules reports. Effective Date December 7, 2020 Highlights Starting on the effective date, the new layout and functionality becomes available. Changes: Rules list: The rules page lists all the rules contained in your account. Rule builder: Multiple rule combinations allowed. Rules can be applied to single or multiple apps. Rules can be applied to all sources of traffic: Organic, non-organic, agency, SRN, etc. One rule builder for campaign targeting rules and Protect360 rules (additional options available for Protect360 customers). Protect360 customers can also create rules to block in-app events. New rule conditions available. New options for rules to either block installs or block attribution. Installs/in-app events can be blocked by multiple rules. Raw data reports: Targeting validation rules reports Where data is now available With Protect360 Premium plan Without Protect360 Premium plan Invalid installs Protect360 installs raw data report Protect360 installs raw data report Invalid in-app events Protect360 in-app events raw data report - Invalid install postbacks Protect360 blocked install postback report Protect360 blocked install postback report Raw data reports contain the rule name entered by the rule creator/editor as the blocked_reason_value; not the rule ID. Postbacks: Contain the rule name entered by the rule creator/editor as the blocked_reason_value; not the rule ID. What you must know Ad networks and agencies need permission to access raw data reports. Ad networks and agencies of non-Protect360 customers are not able to access the Protect360 dashboards to view validation rule data. Rules with a CTIT condition, are changed during migration to CTITAND is_preinstalled=no AND is_deeplink=no. Related reading Validation Rules for app owners"
  },
  {
    "text": "At a glance: Set or change an app-specific time zone in order to view the app's data more closely aligned with your time zone or that of your advertising partners. Understand the effect of time zone changes on the reporting of data within the AppsFlyer platform. Why change the time zone? The default time zone for new apps is UTC (UTC +0). If the app time zone is changed, this affects how data appears in the platform. Scenario: You work in a time zone that is not UTC. However, you want app data aligned to your time zone or to the time zone you selected with other partners like Facebook and Google. Goal: Simplify data comparisons between AppsFlyer and other networks. Solution: Align the time zone in the AppsFlyer platform with the other service providers you use. Accurate Daylight savings time is supported by default (not configurable). Agencies and ad networks: Agencies: view data using the time zone set by the app owner. Agencies can't set the time zone. Ad networks: view data using UTC at all times irrespective of the timezone set by the advertiser. Changing the time zone An admin user can make time-zone changes. To change the app time zone: In AppsFlyer, go to Configuration > App settings. In Localization >Time Zone, select UTC. Click Save settings, then wait 48 hours. Note! the setting can only be set once per day. Thereafter, the setting is unavailable. Go to Configuration > App settings. In Localization >Time Zone> select a time zone (per city/country). Click Save settings.Change takes effect at the beginning of the next day at 00:00 UTC. Example October 24 at 22:00, the time zone is changed. October 25 at 00:00 UTC, the change takes effect. After changing the time-zone: The time zone used in the presentation of data depends on the reporting period and method as detailed in the tables that follow. Aggregate reports will have some anomalies on the day and the day following the time zone change. Cost data is duplicated on the day of the change. Aggregate data Report date range Reporting method Starts and ends before the change Starts and ends after the change Starts before and ends after the change LTV dashboards: Overview, Retargeting, Events, and Custom UTC Current time zone Split: Before the change: UTC After the change: current time zone Activity dashboard Previous time zone Current time zone UTC Cohort, Retention, Pivot UTC Current time zone (1) UTC Master API Default: UTC Option:Select the time zone when you pull data Notes:(1) All apps must use the same app-specific time zone for a given reporting period. If not, then the time zone reverts to UTC. Raw data reports Report date range Reporting method Starts and ends before the change Starts and ends after the change Starts before and ends after the change Export page raw data Current time zone Current time zone Current time zone Push API Separate fields for UTC and the app-specific time zone calculated using the selected time zone at the time of the event. Pull API Default: UTC Option: Select the time zone when you pull the data Data Locker No impact\u2014date fields are in UTC"
  },
  {
    "text": "What's new Change in the calculation of the sessions metric Effective Date February 15, 2021 What's changing The sessions metric is calculated by counting sessions reported by the SDK in the app. Starting on the Effective Date, the sessions metric is calculated taking into account a minimum time between sessions timer. This means that some sessions aren't counted as illustrated in the example that follows. The timer has a default duration of 10 minutes and the possible values are: 1-60 minutes 1-24 hours Example: Sessions counting with a minimum time between sessions of 10 minutes. In this example, the sessions reporting times are stated as minutes elapsed since 00:00 Example Session reporting times Number of sessions counted Sessions disregarded A 0, 10, 20, 30 4 None B 0, 1, 9, 11 2 1, 9 C 0, 10, 15, 21 3 15 Impact of the change Expect a reduction in the sessions metric starting from the Effective Date in the Analytics tools and sessions raw data available to clients having Data Locker. Ad network partners, if you consume the session event via postbacks expect a reduction due to this change. What's staying the same Implementation of this change (using the default setting of 10 minutes) won't affect any of the following metrics: Metrics: Daily active users (DAU) Monthly active users (MAU) Retention Loyal users using the default setting of 3 app opens Re-engagement conversions including deep-linking Historical data (sessions) recorded before the Effective Date However, going forward consider that if the Minimum time between sessions is increased to more than one hour, and users don't open the app many times a day, then some retention metrics can be impacted. This is especially true in the case of apps where users typically open the app once a day. [Optional] Setting change If needed, you can change the default setting of 10 minutes, to one that suits your users\u2019 behavior and interaction style with the app. To change the minimum time between sessions duration: In AppsFlyer. go to Configuration > App settings. Set Minimum time between sessions. Click Save settings.The change takes effect within an hour. List of what's new in AppsFlyer"
  },
  {
    "text": "What's new OneLink templates provide an option to redirect users without your app to third-party Android app stores. Effective date May 19, 2021 Where OneLink template setup What Before the change: OneLink templates provided options for users without your app to be redirected to Apple App Store, Google Play, or a web URL. After the change: OneLink templates also provide options for users without your app to be redirected to the following third-party Android app stores: Huawei AppGallery Xiaomi Market Samsung Galaxy Store Oppo App Market Vivo App Store What you must know Redirecting to third-party Android app stores requires your app in the other stores to have the same package name as the Android app selected in your OneLink template. The APK package name (for example: com.shop.app) is used for the redirection, so make sure the APK package name exists in the third-party app store before you select it. Only the package name is extracted from the Android app to redirect users. For example, if the AppsFlyer name includes a channel as well, like com.shop.app-store, only com.shop.app is extracted. In such a case, redirection works, but attribution doesn't. If you select an Android app that is not in Google Play, you must enter a URL to which all Android users are redirected."
  },
  {
    "text": "At a glance: Learn the differences between an Agency account and an Ad Network integration, and the advantages of each. Agency account AppsFlyer Agency Solution enables you to manage all your advertiser's performance under one universal dashboard! Agency Account Key Features: Access to real-time analytics, once our SDK is embedded within the app. Access to all data, including in-app events, generated by the agency. Self-serve dashboard for generating AppsFlyer attribution links which enable the agency to work with 1500+ different Ad Networks. Click this link to learn more about how to set up an Agency Account. Ad network integration Integrating with AppsFlyer as an ad network enables you to receive information via postbacks. As AppsFlyer integrated partner, you receive an ad network login that holds install and postback information. Note As an integrated ad network, you do not have access to any in-app event information unless approved by the advertiser (a secondary integration is required). As an AppsFlyer integrated partner, your name and logo are presented on the AppsFlyer website. See Ad Network Integration Guide. To proceed, provide your Click URL, Postback URL, and company logo (a 200x50 transparent PNG)."
  },
  {
    "text": "At a glance: Enrich PBA data with auto-tagging gclid campaign information by connecting to Google Ads. Integrating Google Ads campaign data in PBA Connect your Google Ads account (1 or more) to your brand bundle.Google Ads campaign data improves dashboard analytics capabilities and further enriches raw data reports. If the gclid is present on a web visit URL, PBA gets the following data from Google using TCLID. Note! The GCLID solution is not officially supported by Google Ads, which may deprecate the parameter in the future. The integration enriches the following fields. Field availability depends on the PBA dashboard and raw data reports. Campaign name and campaign ID Adset name and adset ID Ad group name and ad group ID The data provided by integration takes priority and overwrites campaign name data extracted from UTM fields. Campaign and campaign ID are available in raw data reports. If you have multiple Google Ads accounts, make sure that you connect the accounts that run campaigns bringing traffic to your website. Website Attribution dashboard with campaign hierarchy populated Campaign and ad hierarchy data is available in dashboards and raw data as follows: Dashboards Website Attribution: Campaign > Adset > Ad levels supported. Web-Assisted Installs: Campaign level Conversion Paths downloadable report: Campaign level Raw-data: Web-to-App: web_googleads_campaign_id,web_googleads_campaign_name Conversion Paths:touchpoint_googleads_campaign_id,touchpoint_googleads_campaign_name To connect to Google Ads: Go to Configuration >Brand bundles. Select the brand bundle. Go to Google Ads integration tab. Click Connect account.The Google Ads sign-in page opens. Sign in to the Google Ads account. Complete the process to give AppsFlyer access. Manage Google Ads connections On the Google Ads integration page, the following actions are available: Delete connection Enable/disable the connection PBA\u2014Google Ads status messages Status Meaning Remarks/action required Active The connection is live and pulling data N/A Inactive The connection was disabled manually Enable the connection to begin pulling data again Never synced The setup is complete The setup is complete. It may take up to 24 hours for AppsFlyer to get data from Google Ads for the first time. If the message persists for more than 24 hours contact AppsFlyer support. No data The connection was successful Google Ads did not return any data to our query. Ensure that you connect all the relevant Google Ads accounts to PBA. No response We can't contact Google Ads servers At present, we can't connect to the Google Ads servers. If the status persists for more than 24 hours contact AppsFlyer support. Invalid credentials AppsFlyer can't get the data as the credentials are not valid. Ensure that the correct credentials are set in the Google Ads integration page. Try to connect again using the most recent credentials. If the problem persists contact AppsFlyer support. General error If this status persists for more than 24 hours contact AppsFlyer support"
  },
  {
    "text": "At a glance: Measure the quality of your users throughout their user journey by recording these suggested in-app events for your telecommunication app. Telecommunication Telecommunication apps enable users to purchase and manage cell phone plans, data plans, and so on. The typical events that we suggest recording include purchases, top-ups, and subscriptions. Recording these events can help you determine: Which gateway plans are most popular What products or packages users can afford Which plans are most likely to get long-term commitments from customers Important! Make sure to read the instructions for marketers about implementing in-app events. To streamline the implementation process, use our In-app event generator. This tool includes all of the typical in-app events described in this article and lets you modify the events according to your business needs. Once complete, share the file with your developer. For each recommended event included in this article, there are code samples for iOS, Android, and Unity developers. Detailed instructions for your developer can be found in the AppsFlyer developer hub. For more information about recording in-app events, see the Rich in-app events guide. Recommended structures for predefined events The following section provides a list of event structures that are typical to the telecommunication vertical. Each structure includes a predefined event name and the suggested event parameters to use. Note that in-app events can include any event parameters that meet your business needs Login (af_login) Purpose Understand the retention of your registered users Trigger Whenever the user successfully logs in Event parameters Can be sent without any additional parameters Complete registration (af_complete_registration) Purpose Learn how many users installed the app and completed the signup process, and what signup methods your users prefer. Trigger When the user completes the signup process Event parameters Name Description Example value af_registration_method Type of signup method email, Facebook Content view (af_content_view) Purpose Determine the view rate of specific products and: Correlate product views with product sales Understand what categories are the most popular according to product views See the correlation between buyers' currency and the products that they view Trigger When the user views a specific product details page Event parameters Name Description Example value af_price Product price 200 af_content_id Product ID 102 af_content_type Product category Internet packages af_currency Currency in the product details page THB, USD List view (af_list_view) Purpose Record which lists (for example, newly added products, related products, or recommended products) buyers view the most. Trigger When the user views a specific list Event parameters Name Description Example value af_content_type Type of list Related, recommended, new arrivals af_content_list List of content IDs from the category 001, 092 Purchase (af_purchase) Purpose Many telecommunications apps allow users to purchase items such as extra data. Recording this event can help you: Determine the LTV of your users and the ROI of your campaigns across ad networks and ad agencies Determine what offers are most popular with your users Cross-reference campaigns with purchased items in order to optimize campaign targeting Trigger When the user lands on the thank you page after a successful purchase Event parameters Name Description Example value af_revenue Estimated revenue from the purchase 2050.50 af_currency Currency code THB af_content_type Name of the package bought 5G af_order_id Order ID 9277 payment_method_type Type of payment method credit card, local payment Recommended structures for custom events The following section provides an event structure that includes a custom event name and the suggested event parameter to use. Note that in-app events can include any event parameters that meet your business needs. Select package (select_package) Purpose Record when a user decides to buy a package but has not made the payment yet. You can use this data, for example, to retarget users and send them offers about other services. Trigger When the user selects a package but has not completed the payment Event parameters Name Description Example value price Price of the subscription 50000 af_content_type Type of content the user selected Data 5 GB Top-up success (top_up_success) Purpose Top-up funds can be used to buy any package or any other service offered inside the app. Record this event and compare it with other data to learn more about your users. For example, you can learn what amounts users are willing to deposit into their accounts, and then use the top-up amounts to target them with customized campaigns within their budgets. Trigger When the user completes the top-up Event parameters Name Description Example value af_revenue Amount of the top-up 2050.50 top_up_id ID of the top-up 397 payment_method_type Type of payment method credit card, local payment Top-up unsuccessful (top_up_unsuccessful) Purpose Record this event and compare it with other data to learn more about your users. For example, you can learn how many users try to top-up but fail. Trigger When the user tries to top up but the action fails Event parameters Name Description Example value error_reason Reason for the top-up failure exceeded_daily_limit Subscription complete (subscription_complete) Purpose Recording this event can help you: See which campaigns bring users that subscribe Compare the number of subscribed users against unsubscribed users Record revenue generated from subscriptions and attribute it to campaigns and media sources Trigger When the user successfully subscribes When a subscription is renewed Event parameters Name Description Example value subscription_type Type of subscription Monthly 30 GB af_revenue Amount of the subscription 555.50"
  },
  {
    "text": "At a glance: Integrate AppsFlyer into apps developed using Xamarin to measure installs, in-app events, media sources, and more. Important! On March 1st, 2020, AppsFlyer deprecated old SDK versions. To learn about which versions have been deprecated, how it affects you, and how to update to the latest SDK version, click here. Android: Follow these instructions for the AppsFlyer Xamarin Android binding: https://github.com/AppsFlyerSDK/XamarinAndroidBinding iOS: Follow these instructions for the AppsFlyer Xamarin iOS binding: https://github.com/AppsFlyerSDK/XamariniOSBinding"
  },
  {
    "text": "At a glance: Test your Android or iOS app integration with AppsFlyer. Related reading for ad networks: Ad network integration testing Overview Carefully tested integration ensures accurate and comprehensive data collection. By testing the SDK integration, you can verify that the SDK is communicating successfully with AppsFlyer servers, installs, in-app events, and retargeting are recorded and attributed correctly. Once the SDK integration is complete, any team member with access to the AppsFlyer dashboard can perform basic testing. Developers can utilize debug logs in the development environment. This article describes the testing procedures from the dashboard and gives links to the documentation that the marketer should provide to the developer. Testing methods The following sections describe the various tests to perform and the available methods. Testing from the dashboard To test the SDK integration from the dashboard, you must first register a test device (Android or iOS). This allows you to use the same device repeatedly and prevents installs from being recorded as reinstalls. You should perform the following: Test organic installs. Test basic integration functionality (non-organic installs, in-app events, and retargeting).Available methods include: SDK integration test page: A wizard in the AppsFlyer dashboard that leads you through the process of running each test. Tests using attribution links: All non-SRN ad networks and owned media sources rely on AppsFlyer attribution links; therefore, conducting tests using attribution links is highly recommended. You create attribution links, and then run tests to verify that the SDK is attributing non-organic installs and in-app events to the correct media sources. In addition, you should run tests to verify that retargeting (re-attribution and re-engagement) is recorded and attributed to the correct media sources. iOS 14+ testing consideration Starting with iOS 14.5, IDFA is only available if the user consents via the AppTransparency Tracking (ATT) prompt. If the ATT prompt was implemented on your app, you can run tests as a consenting or non-consenting user. For more information, see the guidelines for registering your test device with IDFA or IDFV. Testing in the development environment A developer can perform the following: Enable and inspect the debug logs, and test scenarios such as purchase validation, conversion data, and deep linking. Note If your developer receives a 403 response in the logs, it might be because you have the Zero package. This package does not include attribution data, only data about clicks and impressions. For more information about our packages, contact the CEM team at hello@appsflyer.com or visit AppsFlyer pricing. Create a debug app to test the SDK integration. When performing tests, data is recorded and displayed in the dashboard. Once data is recorded, it can't be deleted. If you don't want test data recorded as part of a production app, you can ask your developer to test the SDK integration using debug apps. A debug app differs from a production app in that it has a different AppsFlyer app ID, its own dashboard, and it is not published in app stores. Add debug apps to the dashboard If your developer creates a debug app, you must add the app to the dashboard. Once your developer starts to perform tests using the app, data will display in the app's dashboard. Perform one of the following procedures to add the debug app: Add debug apps (Android) Add debug apps (iOS) To add a debug app to the dashboard: Get the package name of the debug app from your developer, and add the app to your AppsFlyer dashboard. Set the app status to one of the following: Pending approval Unpublished To add a debug app to the dashboard: Add the app to your AppsFlyer dashboard. The app ID is the ID given to the app once it is published to the app store. However, since this is a debug app, you can give it whatever ID you want as long as it is not taken by another app. Make sure the ID is 9 digits and starts with four 1s, for example, 111167538. The remaining digits should be random. Set the app status to one of the following: Pending approval Unpublished Provide your developer with the app ID. Special test cases Special test cases include the following: Android TV: The SDK is compatible with Android-based smart TVs. A marketer or any team member can test these TV apps by following the procedures in this article. Apple TV (tvOS): The SDK is compatible with Apple TVs (tvOS). A marketer or any team member can test these TV apps by following the procedures in this article. Unpublished tvOS apps: Requires a marketer and developer to work together (see Testing tvOS integration before publishing). Amazon Fire TV: A marketer can perform tests from the dashboard (see Testing alternate Android stores). PBA web events: Requires a marketer and developer to work together (see Testing PBA web SDK integration). Testing basic SDK functionality The following section describes the procedures you should follow to test the basic SDK integration. Test organic installs We recommend that you start by testing an organic install. To test an organic install: Install the app on a registered test device. Launch the app. The app's dashboard displays a new organic install. Allow up to 30 minutes for the install to appear. Test using the SDK Integration Tests page Use the SDK Integration Tests page to test non-organic installs, in-app events, and deep linking (retargeting), and locate any integration issues in your project. Before you begin: Prepare a device (Android or iOS) that does not have the app installed. If needed, uninstall the app from the device. Register the device as a test device. Step 1: Test non-organic installs In the dashboard, select the app. Go to Integration SDK Integration Tests.The SDK integration tests page opens. Run the Non-Organic Install test. Select a listed test device. Select the store from which to install the app: For Android: Google Play Other (for example, Out-of store, Android Studio, APK file) For iOS: App Store Other (for example, XCode, TestFlight) Scan the QR code with the registered test device and follow the instructions on the device. Note that for Android devices, this test uses the install referrer method, and therefore, the attribution link does not include GAID. If you selected Other, install the app from your development environment. Wait until the non-organic install is registered on the SDK Integration Tests page, indicating the test is successful. This can take up to 2 minutes. If the app does not record a non-organic install, possible reasons might be: IDFA is available but the test device was not registered with this identifier on the Test devices page. You have more than 1 of your apps, besides the test app, installed on the test device but the test device was not registered with IDFV on the Test devices page. An organic install was recorded. The test was performed on a version of the app that does not include the SDK. For integration errors, contact your developer. Step 2: Test in-app events Before you begin: Make sure you use the same test device that was used to record a non-organic install. Run the In-app Events test. Select a listed test device, and then click Next. Launch your app and start generating in-app events. You will see a log of these events as they are registered in real-time. Step 3: Test deep links (retargeting) Before you begin: Make sure you use the same test device that was used to record a non-organic install. Launch the test app at least 3 times. To test deep linking (retargeting), OneLink must be defined for your app. For more information, see the OneLink Setup guide. Verify that retargeting is turned on. Run the Deep linking test. Select a listed test device. Select a test type: OneLink: Select the OneLink. URI Scheme: Enter the URI scheme (for example, greatapps://cars). Click Next. Scan the QR code with your registered test device and follow the instructions on your device. Once a test is finished, the Deep Linking Test is registered as successful. Testing using attribution links The following section describes the procedures you should follow to test installs with attribution links. You can perform these tests even if the app is still pending (meaning, not listed in the Google Play Store or Apple App Store). Test install attribution Testing installs allows you to verify that the AppsFlyer SDK is attributing installs correctly to various media sources. To test install attribution: Copy the following link (Android or iOS), and make these changes: app_id value: Add your app ID in AppsFlyer. pid parameter: Specify the name of the media source to which the install is attributed. c parameter: Specify the name of the campaign. If you are testing an app available via a third-party Android store, add the af_r parameter to the attribution link. Replace the GAID, IDFA, or IDFV with your specific device identifier. Android iOS https://app.appsflyer.com/<app_id>?pid=Test&c=Test&advertising_id=<GAID> IDFA https://app.appsflyer.com/<app_id>?pid=Test&c=Test&idfa=<IDFA> IDFV https://app.appsflyer.com/<app_id>?pid=Test&c=Test&idfv=<IDFV> The following are examples of attribution links with specific values: Android iOS https://app.appsflyer.com/com.my.app?pid=Test&c=Test&advertising_id=12345f9*-eba*-421*-876*-7654ac67876* https://app.appsflyer.com/id123456789?pid=Test&c=Test&idfa=1A2B****-9128-4***-123*-04E***654321 Copy your updated link, send it to the test device, and then click the link. Note In iOS, use iMessage or email to send the link to the device. Don't paste the link in the iOS Notes app and click the link. This action can cause the link to break. Do one of the following: If the app is live, proceed to install it. If the app is pending, the following message displays: \"The app you are looking for is not available in the market yet.\" This is the expected result. Since the app is not live, the attribution link doesn't lead to any app store. However, the attribution link is still valid for attribution purposes and you should install the app as follows: For Android: From an APK file (or Android Studio for developers) For iOS: From TestFlight (or Xcode for developers) You should see an install that is attributed to the test campaign under the media source called Test. Allow up to 30 minutes for the install to appear in the app's dashboard. Tip The following describes alternative ways to verify your test results: If you have access to raw-data reports, download the Installs raw data report. This report takes several minutes to download. To download the report: In the dashboard, go to Reports >Export Data. From the User acquisition (non-organic) list, click Installs, and then download the report. If you have access to the debug logs, you can use the SDK integration test API to retrieve the attribution results for a specific install. Test in-app events attribution Testing in-app events allows you to verify that revenue associated with an event is displayed and that in-app events are attributed to the media source that generates the install. To test attribution of in-app events: Launch the app, and then generate a few in-app events. Open the app's dashboard, and click Events. You should see the events, their revenue (if revenue is associated with them), and the media source to which they are associated. Allow up to 60-70 minutes for the events to appear in the dashboard. Tip! Consider downloading the in-app events raw data report to verify that events are attributed correctly. This report takes several minutes to download. To download the report: In the dashboard, go to Reports > Export Data. In the Raw Data Reports section, download the in-app events raw data report. Test OneLink OneLink allows you to set a single attribution link for both Android and iOS. OneLink recognizes the user's device and redirects them to the relevant app store. In addition, OneLink enables deep linking. Deep linking allows you to open the app in a specific app activity while serving customized content. For more information, see our guide on testing OneLink URLs. Testing retargeting using attribution links The following sections describe the procedures you should follow to test retargeting attribution. About retargeting tests Retargeting attribution occurs when a user engages with a retargeting campaign by clicking on a retargeting attribution link. This results in a re-attribution or a re-engagement event. For more information, see the Retargeting attribution guide. Retargeting tests include the following : For re-attribution: Uninstalling and reinstalling the app. Then, verifying in the dashboard that an install was recorded. For re-engagement: Clicking a retargeting attribution link or a deep link, and then verifying that a re-engagement is attributed to the correct media source. Prerequisites to run retargeting tests Before running retargeting tests, the following setup is required: Retargeting must be activated for the app you are testing. Create an app-specific link or retrieve a OneLink custom link. These links must include the retargeting parameter. To set up retargeting tests: Enable retargeting in the app's settings. In the app's dashboard, click App Settings and turn on Enable retargeting attribution. Do one of the following: Create an app-specific attribution link. Make sure to include the retargeting parameter, is_retargeting=true, and the advertising ID. To view the GAID, IDFA, or IDFV, follow the Registering a test device instructions. The following is an example of an attribution link that includes an Android-specific parameter as the device identifier (GAID). For more information about adding other device identifier parameters, such as IDFA or IDFV, see Attribution link structure and parameters. https://app.appsflyer.com/<app_id>?pid=Test&c=Test&is_retargeting=true&advertising_id=<GAID> Retrieve the custom link's long URLfrom a OneLink template. Make sure to activate Retargeting campaign. The following image shows an example of a custom long URL: You can now proceed to test re-attribution and re-engagement. Test re-attribution Before you begin: Follow the instructions for setting up retargeting tests. Make sure your test device is not registered. To test re-attribution: Uninstall the app from the device. If you just installed the app, wait for a few minutes. Copy the attribution link you created previously, either the app-specific attribution link or custom long link from the OneLink template, send it to the test device, and then click the link. Note In iOS, use iMessage or email to send the link to the device. Don't paste the link in the iOS Notes app and click the link. This action may cause the link to break. Do one of the following: If the app is live, proceed to install it. If the app is pending, install it as follows: For Android: Install from Android Studio or an APK file. For iOS: Install from TestFlight. Open the app's dashboard, and in the View type box, select Retargeting. In the Attribution type box, select Re-attributions. You should see the install attributed to the media source and campaign. Allow up to 30 minutes for the retargeted install to appear in the dashboard. Tip The following describes alternative ways to verify your test results: If you have access to raw-data reports, download the Conversions raw-data report. This report takes several minutes to download. To download the report: In the dashboard, go to Reports >Export Data. From the Retargetinglist, click Conversions (re-engagements & re-attributions), and then download the report. If you have access to the debug logs, you can use the SDK integration test API to retrieve the attribution results for a specific install. Test re-engagement Before you begin: Follow the instructions for setting up retargeting tests. For testing purposes, set the minimum time between conversions to None. This allows all of the re-engagement conversions to be recorded and attributed during testing. Make sure the app is installed on your test device and has been launched several times. If you just installed the app, wait for a few minutes. To test re-engagement (direct deep linking): Make sure that your app is configured for deep linking, and then follow this procedure for testing. To test re-engagement (indirect deep linking): Copy the attribution link you created previously, either the app-specific attribution link or custom long link from the OneLink template. Send the link to your test device, and then click the link. To open the app, do one of the following: In the app store, click Open. Launch the app from your device. In the dashboard, you should see a re-engagement attributed to the media source and campaign. Allow up to 30 minutes for the re-engagement to appear. Tip! Consider downloading the conversions raw data report to verify that the re-engagement was attributed to the correct media source. This report takes several minutes to download. To download the report: In the dashboard, go to Reports > Export Data. In the Retargeting section, download the Conversions (re-engagements & re-attributions) report."
  },
  {
    "text": "At a glance: Update an existing AppsFlyer iOS SDK/wrapper integration to iOS SDK V6. About iOS SDK V6 Reference in this article to SDK V6. The AppsFlyer iOS SDK V6: Allowsapp owners and developers to prepare for iOS 14 release. Give you the option to ask users for permission to collect IDFA. Provides app attribution and event reporting functionality to iOS mobile apps. Includes significant API method changes from previous versions. For full information about the SDK V6, and to integrate it into a new app that does not have an earlier version of the AppsFlyer SDK, read our iOS SDK integration guide for marketers. Update to iOS SDK V6 To update to iOS SDK V6, complete the procedures (1-5) that follow. 1. Update SDK version Download and add the SDK V6to your Xcode. 2. Implement SDK V6 Add the following code to the SDK initialization: Objective-CSwift In AppDelegate.h, do the following: #import \"AppDelegate.h\" #import <AppsFlyerLib/AppsFlyerLib.h> #import <AppTrackingTransparency/AppTrackingTransparency.h> #import <UserNotifications/UserNotifications.h> @interface AppDelegate () @end @implementation AppDelegate - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions { // 1 - Get AppsFlyer preferences from .plist file NSString *path = [[NSBundle mainBundle] pathForResource:@\"afdevkey_donotpush\" ofType:@\".plist\"]; NSDictionary* properties = [NSDictionary dictionaryWithContentsOfFile:path]; if (properties == nil || path == nil) { [NSException raise:@\"Error\" format:@\"Cannot find .plist file\"]; } NSString* appsFlyerDevKey = [properties objectForKey:@\"appsFlyerDevKey\"]; NSString* appleAppID = [properties objectForKey:@\"appleAppID\"]; if (appsFlyerDevKey == nil || appleAppID == nil) { [NSException raise:@\"Error\" format:@\"Cannot find appsFlyerDevKey or appleAppID\"]; } // 2 - Replace 'appsFlyerDevKey', `appleAppID` with your DevKey, Apple App ID [[AppsFlyerLib shared] setAppsFlyerDevKey:appsFlyerDevKey]; [[AppsFlyerLib shared] setAppleAppID:appleAppID]; [AppsFlyerLib shared].delegate = self; // Set isDebug to true to see AppsFlyer debug logs [AppsFlyerLib shared].isDebug = true; if (@available(iOS 10, *)) { UIUserNotificationSettings *settings = [UIUserNotificationSettings settingsForTypes: UIUserNotificationTypeAlert | UIUserNotificationTypeSound | UIUserNotificationTypeBadge categories:nil]; [[UIApplication sharedApplication] registerUserNotificationSettings:settings]; [[UIApplication sharedApplication] registerForRemoteNotifications]; } return YES; } - (void)applicationDidBecomeActive:(UIApplication *)application { [[AppsFlyerLib shared] start]; } // Deep linking // Open URI-scheme for iOS 9 and above - (BOOL)application:(UIApplication *)application openURL:(NSURL *)url options:(NSDictionary *) options { [[AppsFlyerLib shared] handleOpenUrl:url options:options]; return YES; } // Open URI-scheme for iOS 8 and below - (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString*)sourceApplication annotation:(id)annotation { [[AppsFlyerLib shared] handleOpenURL:url sourceApplication:sourceApplication withAnnotation:annotation]; return YES; } // Open Universal Links - (BOOL)application:(UIApplication *)application continueUserActivity:(NSUserActivity *)userActivity restorationHandler:(void (^)(NSArray * _Nullable))restorationHandler { [[AppsFlyerLib shared] continueUserActivity:userActivity restorationHandler:restorationHandler]; return YES; } // Report Push Notification attribution data for re-engagements - (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler { [[AppsFlyerLib shared] handlePushNotification:userInfo]; } // AppsFlyerLib implementation //Handle Conversion Data (Deferred Deep Link) -(void)onConversionDataSuccess:(NSDictionary*) installData { id status = [installData objectForKey:@\"af_status\"]; if([status isEqualToString:@\"Non-organic\"]) { id sourceID = [installData objectForKey:@\"media_source\"]; id campaign = [installData objectForKey:@\"campaign\"]; NSLog(@\"This is a none organic install. Media source: %@ Campaign: %@\",sourceID,campaign); } else if([status isEqualToString:@\"Organic\"]) { NSLog(@\"This is an organic install.\"); } } -(void)onConversionDataFail:(NSError *) error { NSLog(@\"%@\",error); } //Handle Direct Deep Link - (void) onAppOpenAttribution:(NSDictionary*) attributionData { NSLog(@\"%@\",attributionData); } - (void) onAppOpenAttributionFailure:(NSError *)error { NSLog(@\"%@\",error); } // support for scene delegate #pragma mark - UISceneSession lifecycle - (UISceneConfiguration *)application:(UIApplication *)application configurationForConnectingSceneSession:(UISceneSession *)connectingSceneSession options:(UISceneConnectionOptions *)options API_AVAILABLE(ios(13)){ // Called when a new scene session is being created. // Use this method to select a configuration to create the new scene with. return [[UISceneConfiguration alloc] initWithName:@\"Default Configuration\" sessionRole:connectingSceneSession.role]; } - (void)application:(UIApplication *)application didDiscardSceneSessions:(NSSet *)sceneSessions API_AVAILABLE(ios(13.0)){ // Called when the user discards a scene session. // If any sessions were discarded while the application was not running, this will be called shortly after application:didFinishLaunchingWithOptions. // Use this method to release any resources that were specific to the discarded scenes, as they will not return. } @end In AppDelegate.swift, add the following: import UIKit import AppTrackingTransparency import AppsFlyerLib import UserNotifications @UIApplicationMain class AppDelegate: UIResponder, UIApplicationDelegate { var window: UIWindow? func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool { // 1 - Get AppsFlyer preferences from .plist file guard let propertiesPath = Bundle.main.path(forResource: \"afdevkey_donotpush\", ofType: \"plist\"), let properties = NSDictionary(contentsOfFile: propertiesPath) as? [String:String] else {  fatalError(\"Cannot find `afdevkey_donotpush`\") } guard let appsFlyerDevKey = properties[\"appsFlyerDevKey\"],  let appleAppID = properties[\"appleAppID\"] else { fatalError(\"Cannot find `appsFlyerDevKey` or `appleAppID` key\") } // 2 - Replace 'appsFlyerDevKey', `appleAppID` with your DevKey, Apple App ID AppsFlyerLib.shared().appsFlyerDevKey = appsFlyerDevKey AppsFlyerLib.shared().appleAppID = appleAppID  AppsFlyerLib.shared().delegate = self // Set isDebug to true to see AppsFlyer debug logs AppsFlyerLib.shared().isDebug = true // iOS 10 or later if #available(iOS 10, *) { UNUserNotificationCenter.current().requestAuthorization(options: [.badge, .alert, .sound]) { _, _ in } application.registerForRemoteNotifications() } // iOS 9 support - Given for reference. This demo app supports iOS 13 and above else { UIApplication.shared.registerUserNotificationSettings(UIUserNotificationSettings(types: [.badge, .sound, .alert], categories: nil)) UIApplication.shared.registerForRemoteNotifications() } return true } func applicationDidBecomeActive(_ application: UIApplication) { // Start the SDK (start the IDFA timeout set above, for iOS 14 or later) AppsFlyerLib.shared().start() } // Open Univerasal Links // For Swift version < 4.2 replace function signature with the commented out code // func application(_ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([Any]?) -> Void) -> Bool { // this line for Swift < 4.2 func application(_ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([UIUserActivityRestoring]?) -> Void) -> Bool { AppsFlyerLib.shared().continue(userActivity, restorationHandler: nil) return true } // Open Deeplinks // Open URI-scheme for iOS 8 and below func application(_ application: UIApplication, open url: URL, sourceApplication: String?, annotation: Any) -> Bool { AppsFlyerLib.shared().handleOpen(url, sourceApplication: sourceApplication, withAnnotation: annotation) return true } // Open URI-scheme for iOS 9 and above func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -> Bool { AppsFlyerLib.shared().handleOpen(url, options: options) return true } // Report Push Notification attribution data for re-engagements func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) { AppsFlyerLib.shared().handlePushNotification(userInfo) } } extension AppDelegate: AppsFlyerLibDelegate { // Handle Organic/Non-organic installation func onConversionDataSuccess(_ data: [AnyHashable: Any]) { print(\"onConversionDataSuccess data:\") for (key, value) in data { print(key, \":\", value) } if let status = data[\"af_status\"] as? String { if (status == \"Non-organic\") {  if let sourceID = data[\"media_source\"], let campaign = data[\"campaign\"] { print(\"This is a Non-Organic install. Media source: \\(sourceID) Campaign: \\(campaign)\")  } } else {  print(\"This is an organic install.\") } if let is_first_launch = data[\"is_first_launch\"] as? Bool,  is_first_launch {  print(\"First Launch\") } else {  print(\"Not First Launch\") } } } func onConversionDataFail(_ error: Error) { print(\"\\(error)\") } // Handle Deeplink func onAppOpenAttribution(_ attributionData: [AnyHashable: Any]) { //Handle Deep Link Data print(\"onAppOpenAttribution data:\") for (key, value) in attributionData { print(key, \":\",value) } } func onAppOpenAttributionFailure(_ error: Error) { print(\"\\(error)\") } } 3. Support for SKAdNetwork attribution SKAdNetwork is a class used by iOS that validates advertiser-driven app installations. The app install validation process involves the source app and the advertised app. A source app is an app that participates in ad campaigns by displaying ads signed by an ad network. Configuring your app to display ads is not within the scope of the AppsFlyer SDK. To configure, you must follow the iOS instructions. For configuring the advertised app, the AppsFlyer SKAdNetwork Solution uses the SKAdNetwork to provide advertisers and ad networks with LTV analytics, reports, and postbacks, while maintaining user privacy. On launching the app for the first time, the AppsFlyer platform, using the configuration set by the marketer, instructs the SDK how to set the SKAdNetwork conversion value. To use the SKAdNetwork Solution: The developer does nothing. AppsFlyer SDK automatically calls the necessary SKAdNetwork APIs, meaning registerAppForAdNetworkAttribution() and updateConversionValue(). The developer must not call them. Don't allow other SDKs to call SKAdNet APIs. Doing so can delay iOS in sending the postback to AppsFlyer and change the conversion value which we use to populate the SKAdNetwork dashboard with user quality measurement data as configured by the marketer in the dashboard. The marketer needs to configure SKAdNetwork measurement in AppsFlyer. There is no other action or registration process required by either the developer or the marketer in the App Store. 4. Change APIs The AppsFlyer iOS SDK V6 has some API name changes. See the following table to change the API names from the earlier SDK versions to the current names. API name (before V6) Current API name (V6 and later) AppsFlyerTracker AppsFlyerLib disableIAdTracking disableCollectASA trackAppLaunchWithCompletionHandler startWithCompletionHandler trackLocation logLocation trackAppLaunch start trackEvent logEvent disableAppleAdSupportTracking disableAdvertisingIdentifier validateAndTrackInAppPurchase validateAndLogInAppPurchase isStopTracking isStopped deviceTrackingDisabled/deviceLoggingDisabled anonymizeUser sharedTracker (Objective C) shared API name changes 5. Ensure push notification integration The following is required if push notification integration is already implemented. Follow the push notification instructions to ensure you have push notifications integrated using the handlePushNotificationData method. Plugins The following V6 plugins are available: Unity The AppsFlyer Unity V6 pluginhelps app owners and developers support iOS 14, providing app attribution and event reporting functionality to Android and iOS mobile apps developed on the Unity development platform. The plugin is functionally equivalent to the AppsFlyer iOS and Android SDKs. To update your plugin from an earlier version, see our guides on updating to the Unity plugin V6: From Unity plugin V4 (requires removal of the old plugin) From Unity plugin V5 (requires an update of the Unity package) React Native The AppsFlyer React Native plugin helps app owners and developers prepare for iOS 14, providing app attribution and event reporting functionality to Android and iOS mobile apps. The plugin is functionally equivalent to the AppsFlyer iOS and Android SDKs. To update your plugin from an earlier version: Remove the earlier plugin and replace it following the instructions in our GitHub guide. Change the integration code by renaming and deleting the necessary APIs. Segment The AppsFlyer Segment plugin helps app owners and developers prepare for iOS 14, providing app attribution and event reporting functionality to Android and iOS mobile apps. The plugin is functionally equivalent to the AppsFlyer iOS and Android SDKs. To update your plugin from an earlier version, remove the earlier plugin and replace it following the instructions in our GitHub guide. Cordova The AppsFlyer Cordova plugin helps app owners and developers prepare for iOS 14, providing app attribution and event reporting functionality to Android and iOS mobile apps. The plugin is functionally equivalent to the AppsFlyer iOS and Android SDKs. To update your plugin from an earlier version, remove the earlier plugin and replace it following the instructions in our GitHub guide. Flutter The AppsFlyer Flutter plugin helps app owners and developers prepare for iOS 14, providing app attribution and event reporting functionality to Android and iOS mobile apps. The plugin is functionally equivalent to the AppsFlyer iOS and Android SDKs. To update your plugin from an earlier version, remove the earlier plugin and add the V6 version to pubspec.yaml, following the instructions in our pub.dev guide. Adobe AIR The AppsFlyer Adobe AIR plugin helps app owners and developers prepare for iOS 14, providing app attribution and event reporting functionality to Android and iOS mobile apps. The plugin is functionally equivalent to the AppsFlyer iOS and Android SDKs. To update your plugin from an earlier version, remove the earlier plugin and replace it following the instructions in our GitHub guide."
  },
  {
    "text": "At a glance: Returning additional parameters for deep linking existing users via UDL method. What's new AppsFlyer SDK V6.6+ allows UDL method to return additional parameters for deep linking existing users (with the app installed). Effective date April 27, 2022 Where UDL method for deep linking existing users with the app installed What Before the change: UDL method only returned deep_link_value and deep_link_sub1-10 parameters for deep linking existing users. After the change: UDL method returns additional parameters for deep linking existing users (with the app installed): path scheme host af_c_id af_adset af_adset_id af_ad af_ad_id af_ad_type af_channel af_dp esp_name link What you must know Best practice: Even though these parameters are available for deep linking existing users, we recommend you create new links using only deep_link_value and deep_link_sub1-10 parameters, as documented in our deep linking guide. This change is only intended for customers with existing links using legacy methods for deep linking. These customers can now implement the UDL method for deep linking and use these additional parameters to deep link existing users, while continuing to use the same links. New links don't have to be created. AppsFlyer SDK V6.6+ required"
  },
  {
    "text": "At a glance: Hubspot, an email delivery and analytics platform, embeds AppsFlyer OneLink links within emails. Email recipients clicking on the link are deep-linked into an app. Email service providers (ESPs) are excellent sources of segmented user traffic. They wrap deep linking URLs with their own click recording domain. In some cases, doing so breaks iOS Universal Links. To overcome this, Hubspot uses Universal Links in addition to the click recording domain. They integrate with AppsFlyer and use OneLink branded link capabilities, enabling deep linking and click recording. Set up Hubspot Configure Hubspot and the AppsFlyer SDK, to send emails containing OneLink branded links. Prerequisites Mobile SDK versions: iOS: V4.9.0 or later Android: Currently not supported Step 1: Set up a Hubspot account Set up a Hubspot domain here. Set up hosting landing pages. Learn about this hereHubspot domains (example): Set up AppsFlyer Step 2: Create OneLink Create a OneLink template for your email campaigns. Configure the app to support deep linking with OneLink. Set up your app to support Universal Links Step 3: Associate click domains in Xcode In Xcode, click your project. Click the Capabilities tab. Turn on Associated Domains, click the + sign, and add your click domain. For example, applinks:click.example.com. Step 4: Resolve deep links Installation: Add the AppsFlyerURLResolver to your project Podfile: pod'AppsFlyerURLResolver'. Variable definition: Copy the code snippet below to your Xcode project var window: UIWindow? class AppDelegate: UIResponder, UIApplicationDelegate {  var window: UIWindow? varJSDeeplinkURL? // <<-- here we keep the hubspot link as a variable Resolve click domains: To get campaign details, the SDK needs to resolve the OneLink behind the click domain. The details are returned in the onAppOpenAttribution method. Definethe click domains in the SDK property resolveDeepLinkURLs using the code below. Make sure to set this property before SDK initialization. [[AppsFlyerTracker sharedTracker].resolveDeepLinkURLs = @[@\"click.example.com\",@\"click.example.com\"]]; Add the following code so that the SDK can resolve the click recording domain: (NSDictionary *)allHTTPHeaderFieldsForResolveDeepLinkURL:(NSURL *)URL { if ([URL.host isEqual: @\"click.example.com\"]) {  return [NSDictionary dictionary]; } else {  return nil; } } Add the following code and define the domain that needs to be resolved, as highlighted in the following example: func application(_ application: UIApplication, continue userActivity: NSUserActivity,restorationHandler: @escaping ([UIUserActivityRestoring]?) -> Void) -> Bool { // This statement must include only the URL which will be resolved to JS script which inludes AppsFlyer URL if (userActivity.webpageURL?.absoluteString.contains(\u201cclick.example.com\u201d) == true) { // This line will trigger URLResolver JSDeeplink = userActivity.webpageURL } else { // This is regular ESP links without JS resolving AppsFlyerLib.shared().continue(userActivity, restorationHandler: nil) } return true } To resolve the HubspotURL, copy the code below: func applicationDidBecomeActive(_ application: UIApplication) { if let deeplink = JSDeeplink { JSDeeplink = nil URLResolver(isDebug: false).resolveJSRedirection(url: deeplink.absoluteString) { resolveURLStr in if let resolveURLStr = resolveURLStr, let resolveURL = URL(string: resolveURLStr) { AppsFlyerLib.shared().handleOpen(resolveURL, options: nil) } AppsFlyerLib.shared().start() } } else { AppsFlyerLib.shared().start() } } Set up Hubspot deep linking Step 5: Upload an AASA file to Hubspot For Hubspot to support iOS Universal Links, an AASA file is required. The AASA file is automatically created and associated with OneLink whensetting up OneLink with Universal Links. To obtain the AASA file and upload it to Hubspot: Under Experiences & Deep Linking in AppsFlyer, go to OneLink Management and find a OneLink link that's configured with Universal Links. Add /.well-known/apple-app-site-association to the end of the OneLink URL. Paste the OneLink link into your browser address bar and press Enter. For example, <OneLinkSubdomain>.onelink.me/.well-known/apple-app-site-association. The AASA file is downloaded to your computer and you can open it using any text editor. Upload the AASA file to Hubspot according to these guidelines. After uploading the AASA file, it appears under Files and folders: Step 6: Set up a URL redirection Traffic from your domain that requires using an AASA file will be redirected to the Hubspot platform, where the file is located. The link address will include <yourdomain>/hubfs/\u2026. To set up URL redirections, read here. The following example shows the URL redirection setup: The following example shows a completed URL redirect: For more information on setting up Hubspot, reach out to Hubspot support via the Hubsport platform. Sending your first email Create a OneLink URL on the Link Management page (or manually). When creating the OneLink URL, make sure to URL-encode all parameter values. The following parameters are highly recommended to use: pid (media source) - Use a media source that signifies this usage such as Email. c (campaign) - The name of the campaign you want to measure. af_dp - The deep link URI scheme you want to deep link your users into. af_web_dp - Where to redirect users clicking the link on the desktop. af_ios_url - Where to redirect users that don\u2019t have the app clicking the link on an iOS device. af_android_url - Where to redirect users that don\u2019t have the app click the link on an Android device. Place the OneLink URL in the email that you've created in Hubspot. For example: <a href=\"greatapp.onelink.me/abcd/1234567\">Download my great app!</a> At this stage, Hubspot wraps the above link with the click domain that you set in the previous steps. Any click on the click domain redirects to the OneLink attribution link. If the app is installed on the user's device, the click domain deep-links into the app. Example URL parameters are not URL encoded in this example, just for the sake of readability: https://greatapp.onelink.me/abcd?pid=Email_Hubspot&c=Spring_Newsletter&is_retargeting=true& \taf_dp=testapp://path/to/content&af_web_dp=https://www.example.com/path/to/content& \taf_ios_url=https://www.example.com/path/to/content&af_android_url=https://www.example.com/path/to/content Testing your links After following all the required steps mentioned above, creating the appropriate OneLink URL, and placing it in an email, send yourself a test email. What should you expect? If you have the app installed, the app should be invoked. If the relevant AppsFlyer SDK deep linking APIs are implemented, you should be deep-linked into the relevant content. In addition, a click should appear in both the AppsFlyer dashboard, attributed to the provided media source and campaign, and in Hubspot."
  },
  {
    "text": "At a glance: Learn how to use and configure the Android sample app to quickly integrate and test the AppsFlyer Android SDK. For Android Version 4.8.7 Note The Android sample app was developed using the Android Studio environment. Introduction The AppsFlyer sample app enables you to see how our newest SDK is integrated into a working project. You can use this project as a reference to your own project to verify and debug the integration process. In addition, you can use the sample app to run end-to-end test scenarios and review the results in your dashboard, such as reports and Push API. GitHub Repository For your convenience, the project contains instructions in the comments under the tag: AppsFlyer. Using the sample app for testing The following sections are covered in this guide: Configuration Using the sample app Customizing your Sample app Deep linking Configuration You can use this project to test the functionality of the SDK and view changes made in your AppsFlyer dashboard. Follow these instructions to link the project to your AppsFlyer account: Open the project using Android Studio Change the package name to match the name configured in your AppsFlyer dashboard (your new package name must be unique). Make sure your new package name appears in all references throughout the project (Make sure the same name appears in build.gradle). Under the Java directory, open the Java file MainActivity.java. You can find the method located in onCreate. AppsFlyerLib.getInstance().startTracking(this.getApplication(), \"YOUR_DEV_KEY\"); (Replace your_dev_key with the one listed under the SDK Integration section of your AppsFlyer dashboard.) Build the app to your test device. Make sure your test device is allowlisted in your AppsFlyer dashboard. See this articlefor more information. Now you can test the sample app on your device and see the changes in your dashboard. Be sure to use a custom generated AppsFlyer link when installing the app on your device, in order to receive a non-organic install. Using the sample app Once you have configured the project to be associated with your AppsFlyer account, you can open it and the following screen is displayed: Attribution Values: Displays the core values of your installation - You can see if you received a non-organic install after clicking a custom link, as well as your media source, click time (on your link) and install time (on your device). Track Event: Click this button to launch an event recording call which you can view in your dashboard (See Deep linking below for details of customization of this button). Customizing your sample app The sample app project contains a button to trigger a custom event recording call. By default, this button is set to record a purchase event which can then be viewed in your dashboard as a revenue increase of $200. To test different events, use the code from the MainActivity.java file, under the buttonOnClick method. To review all available event types you can record with the AppsFlyer SDK, see this article. In addition, under the registerConversionListener method, you can find several attribution parameters which are shown in a TextView. To view all available parameters, see this article. Note Unpublished apps and parameters other than those printed in the default code of the sample app are returned as Null. To edit your deep linking scheme: Go to the AndroidManifest file. Edit the <data> tags under <intent-filter>, inside Deep link <activity>. Generate a custom media source link using the AppsFlyer dashboard. See this article for guidance. (Be sure to include \"&advertising_id=YOUR_ ADVERTISING_ID \" in your link in order to receive a non-organic install.) Add the following tags to your link: If using only a scheme: &af_dp=your_scheme%3A%2F%2F If using a scheme and a host: &af_dp=your_scheme%3A%2F%2Fyour_host Deep linking In your AndroidManifest file, you can view your custom deep linking schemes and hosts and change them as required. They are located under the <intent-filter> tab inside the Deep Link <activity> tab. By default, you can test the deep linking in the sample app using the following links: For http://aftest.com\u2014 http://app.appsflyer.com/YOUR_PACKAGE_NAME?pid=Blog&af_dp=http%3A%2F%2Faftest.com For aftest://\u2014 http://app.appsflyer.com/YOUR_PACKAGE_NAME?pid=Blog&af_dp=aftest%3A%2F%2F Make sure the app is installed on your device before testing the deep links, as unpublished apps are not redirected to Google Play unless pre-installed. Click one of the deep links, and you are redirected to the Deep Link activity (which cannot be accessed any other way). In Deep Link activity, you can also see the link you navigated from. By using the sendDeepLinkData method in the Deeplink.java file (located in onCreate), you can attribute the deep linking to the corresponding media source."
  },
  {
    "text": "At a glance: Create robust email campaigns with email service providers using OneLink branded links and deep linking. Why use ESPs? Email service providers enable running large-scale email campaigns so that you can: Acquire new usersYour company generates leads through various channels. You can target those leads in email campaigns and convert them to mobile app users. Convert existing usersSend emails to all your desktop users and convert them to mobile app users. Increasing user engagementOn holidays and special occasions, you can send out promotions to your existing users to promote sales. You can use deep linking for a better user experience that increases the chance that users will end up making a purchase. Supported email service providers ESP email campaigns for mobile app users can cause attribution and deep linking issues. To overcome those issues and work with the ESPs, you must follow their exact integration steps. Use the links in the table that follows to go to the article on the ESP you wish to use for email campaigns. Email service providers  ESP deep linking challenges iOS Universal Links Implementing deep linking using Universal links Developers need to associate their apps with specific domains to perform deep linking with Universal Links. This is a security measure in iOS (9 and above) that ensures that only specific domains can launch associated apps. Developers that use the AppsFlyer OneLink solution associate OneLink domain with their app. When a user clicks on OneLink, it launches the app that is associated with it. The developer then gathers information from the AppsFlyer SDK for deep linking and customizing the user experience. Issues with links in emails from ESPs ESPs wrap links in emails with their own links. They do so in order to measure and report engagements. However, this practice could break the OneLink flow if not handled properly. The app doesn't launch and it results in a broken user experience. Some ESPs support iOS Universal Links while wrapping the links with their own measurement links. Apps launch when users click on links in the emails. However, the OneLink flow still breaks which results in the following: No measurement of engagements (clicks) on AppsFlyer end App Launch is not attributed to a click AppsFlyer SDK doesn't pass attribution data to the App developer The solution by AppsFlyer AppsFlyer joins forces with prominent ESPs in order to solve the problem with broken deep linking. The solution combines several technologies: ESP Link Branding (viaBranded Links) Apple App Site Association AppsFlyer SDK The combination of these technologies allows the SDK to resolve the underlying OneLink, even though it is wrapped in other links. As the SDK resolves the underlying OneLink, it is able to provide the developer with the necessary information for deep linking and customizing the user experience. The following ESPs fully support AppsFlyer solution for deep linking with Universal Links in emails: Braze Iterable Oracle Responsys Salesforce Sendgrid Other ESPs require some additional work during integration to ensure a smooth OneLink deep linking experience. Android App Links Android developers might experience a similar problem with App Links. However, deep linking using URI scheme is still widely supported on Android. What this means is that developers can still use URI scheme to deep link from emails that are sent by ESPs."
  },
  {
    "text": "At a glance: All you need to know for requesting changes for your initial integration settings. Important! AppsFlyer postbacks and attribution URL structures are global. This means that any change in these structures impacts all existing and future campaigns across all apps. Use the partner assistant widget to open a ticket for changing your partner settings: From the top right of any AppsFlyer page, click the Help icon. Select the following sequence of options in the widget:Contact our team > (2) I would like to understand or update my integration > (1) Update my integration. Select either Advanced privacy or SKAD mode or Default mode. Provide the necessary requirements, as specified in the table below. Request Details Requirements Enable view-through attribution Allow view-through attribution measurement.The macro attributed_touch_type contains impression or click to indicate the engagement type. More on view-through attribution. Select Default mode from the widget. Write \"Enable VTA\" as the ticket title. Share the following information: Your PID or login username [Recommended] Your receiving parameter name associated with the macro Enable rejected installs and in-app events postback Get postbacks of rejected installs and in-app events due to fraud or non-compliance with validation rules.Include the macros listed in the postback to differentiate between rejected and legitimate installs/events and see the reason for the block: is-rejected blocked-reason blocked-sub-reason blocked-reason-value More on rejected installs and in-app event postbacks. Select Default mode from the widget. Write \"Rejected install/in-app postback\" as the ticket title. Share the following information: Your PID or Partner Dashboard login [Recommended] For each macro listed, provide a receiving parameter name Indicate if rejected in-app events together with rejected installs are sent in the postback. Enable retargeting Allow retargeting activity measurement.AppsFlyer provides the following macros in the postback to identify if the campaign is a retargeting campaign and the conversion type (re-attribution or re-engagement): is-retarget retargeting_conversion_type More about retargeting. Select Default mode from the widget. Write \"Enable Retargeting\"as the ticket title. Share the following information: Your PID or Partner Dashboard login [Recommended] The names of the receiving parameters (defined by your technical team) for the macros is-retarget and retargeting_conversion_type, if you want to receive these values via your existingintegrated regular install/in-app event postback. To which type of postback (install, in-app event, or both) the parameters should be added Indicate if a re-engagement postback is required for re-engagement events (meaning the first app-open of an existing app after clicking on a retargeting campaign ad) Enable uninstall Get postbacks of af_uninstall in-app events to measure uninstalls. More on uninstalls. Select Default mode from the widget. Write \"Enable af_uninstall in-app event postback\" as the ticket title. Share your PID or login username Add additional postback endpoint Additional postback endpoint to gradually migrate from one performance marketing platform to another or work with several performance marketing platforms. Define the endpoint that AppsFlyer uses if an advertiser adds af_additionalpostback=1 to the attribution link. Postbacks aren't sent in parallel to both endpoints but only to one endpoint. The current postback template is used as the fallback endpoint unless specified otherwise. Select Default mode from the widget. Write \"Add additional postback endpoint\" as the ticket title. Share the following information: Your PID or login username The new endpoint to use for af_additionalpostback=1 (both for installs and for in-app events) Enable sending session data Allow data sharing for af_app_opened in-app event. More about session data. Select Default mode from the widget. Write \"Enable af_app_opened postback\" as the ticket title. Share your PID or login username. Enable postbacks retry Enable sending a postback several times in case of a sending failure.Use postback-id macro to identify the postback ID. More about postback retries. Select Default mode from the widget. Write \"Enable Postbacks Retry\" as the ticket title. Share the following information: Your PID or login username The receiving parameter name for the postback-id macro Update postback Change the current postback structure (for example, delete/add parameters, change endpoint URL.) More about postbacks and macros. Select Default mode from the widget. Write \"Update postback\" as the ticket title. Share the following information: Your PID or login username The new postback structure, based on available macros Enable Advanced Privacy postback Setup Advanced Privacy integration to comply with an advertiser's data sharing policy. More about Advanced Privacy postbacks. Follow the instructions for Advanced Privacy postback configuration in the AppsFlyer dashboard. Make sure your attribution link has all mandatory parameters. In case of any issues, or if you must add parameters to your attribution link template: Select Advanced privacy or SKAD modefrom the widget. Write \"Enable Advanced Privacy postback\" as the ticket title. Share the following information: Your PID or login username Advanced Privacy postback structure based on available macros For the link update: new parameters and their corresponding macros Enable SKAdNetwork postback Setup SKAdNetwork integration and the ability to receive decoded data from AppsFlyer via postbacks. More about SKAdNetwork postbacks. Follow the instructions for SKAdNetwork postback configuration in the AppsFlyer dashboard. In case of any issues: Select Advanced privacy or SKAD modefrom the widget. Write \"Enable Advanced Privacy postback\" as the ticket title. Share the following information: Your PID or login username SKAdNetwork postback structure based on available macros from KB Apple SKAdNetwork ID Update the logo Add a logo, or replace the current one. Make sure you have a suitable logo file: (200x50px transparent PNG) Log in to the AppsFlyer dashboard. Click the email address in the top right corner > Select Partner setup. Go to Profile tab > Company logo. Click the Upload icon. Select the logo file and confirm. Click Save at the bottom of the page. The logo is updated immediately. Update the click attribution URL Update click attribution URL that advertisers use for running campaigns with you.More about attribution links. Select Default mode from the widget. Write \"Update click attribution URL\" as the ticket title. Share the following information: Your PID or login username New parameters and their corresponding macros. After the click attribution URL is updated, ask the advertiser for the updated attribution link URL. Create/update the partner dashboard login email Required for login to the AppsFlyer account, checking dashboard data, and exporting reports from the AppsFlyer dashboard. Select Default mode from the widget. Write \"Update partner dashboard login\" as the ticket title. Share the following information: Your PID or login username The new login email After the dashboard login has been created/updated, use the new/updated email to reset the password. Disable integration If integration is disabled, installs and in-app events aren't attributed to the disabled integration. Note: Before disabling, verify that advertisers have stopped working with the integration. Select Default mode from the widget. Write \"Disable integration\" as the ticket title. Share the following information: Your PID or login username Which integration to disable: install, or in-app events Add new dashboard parameter Allow advertisers to provide a specific parameter in the AppsFlyer advertiser dashboard, so they can be received via a postback. Select Default mode from the widget. Write \"Add new dashboard parameter\" as the ticket title. Share the following information: Your PID or login username The new dashboard parameter name The receiving parameter\u2014if you want to receive it via install or in-app event postback [Recommended] The description of the parameter that will be displayed in a tooltip next to the parameter field in the AppsFlyer dashboard for advertisers Provide the postback template to the partner Review your current integration Select Default mode from the widget. Write \"Provide postback template\" as the ticket title. Share the following information: Your PID or login username Specify which postback you want to check: install postback, in-app event postback, or rejected postback Implement click signing Add signature validation to clicks to avoid fraud liabilities and so fraudulent clicks aren't attributed to your ad network. Follow these instructions to implement click signing on your side.In case of questions: Select Default mode from the widget. Write \"Click signing\" as the ticket title. Share your PID or login username."
  },
  {
    "text": "At a glance: PBA raw data reports are available via Data Locker. PBA raw data reports Use PBA raw data reports to analyze user journeys and actions. Report descriptions PBA raw data report topics Raw data report topic Description Website visits Visits to the website. Measure user exposure and engagement with web traffic campaigns. Website events Contain the actions performed by website visitors like subscribe or purchase. Events are attributed to the last non-direct web visit occurring in the previous 30 days. Attribution parameters associated with the event can include media source, media channel, campaign, and so on. Use these parameters to optimize your marketing efforts. Analyze user behavior per media source. The values for these fields are determined through the attributed visit using PBA media source attribution rules. The intent is to associate events with a specific website visit and not a specific page view. Use this to find out which sources and campaigns drive users and what actions the users perform. Website-assisted installs Website-assisted installs reports contain the website visits driving the user to install the app. Check the position of web media source in the installation journey: last or assist (meaning not last) Examine the combination of web media sources with the most potential for driving installs. For example, Web media source A and mobile media source B often appear in the user journey. Assumption: This combination has the potential to drive installs. Conversion paths Contains the touchpoints encountered on the way to conversion, each touchpoint having its own record. Conversions are identified by a unique conversion ID. Use this to identify touchpoints relating to the same conversion. In the dashboard, consecutive identical touchpoints are aggregated into steps. In raw data, each touchpoint has a record. This provides maximum granularity. Raw-data report fields Website visits and website events Sample reports Website events: CSV Website visits: CSV Raw data fields are populated in part from data originating in the mobile app user attribution link and app install event. Download field list as CSV Field list website visits and website events report Field name Description Format Example advertising_id Advertising ID (GAID) String 7fzzz3fa-8bad-46c9-bb03-fffffffffffffffffffffffff af_web_id Cookie ID sent from the web SDK String 68972980-58f9-4ca6-8743-c0d633364b6d amazon_aid Amazon Fire TV advertising ID String df07c7dc-cea7-4a89-b328-810ff5acb15d android_id Android device ID String 68999980-58f9-4ca6-8743-c0d633364b6d app_id The most recent app ID installed String id123456789 app_name The most recent app name String My App app_version The most recent app version String 6.32 appsflyer_id AppsFlyer (install) ID String 1594825729709-5655157112349378588 attributed_touch_time On web visits, the timestamp of the web visit On web events, the timestamp of the attributed web visit yyyy-mm-dd hh:mm:ss 9/17/2020 0:09:25 attributed_touch_type The type of touchpoint. Currently, always set to website visit. String web visit bundle_id PBA bundle ID String 048db9bf-97r7-4m2f-919b-607b7kk806d0 campaign Attributed to the website visit String Summer Campaign campaign_id Attributed to the website visit String 12343425 city Resolved using the IP address String Spring Valley country_code Resolved using the IP address String US customer_user_id Customer User Identifier (CUID) String 5a8771ecbb986ABC device_type The type of device String Desktop dma Resolved using the IP address String 501 event_name In the website visit report: Always website visit. In the website event report: eventName sent by the web SDK. String purchase event_revenue Event revenue amount in purchase currency String 199.99 event_revenue_currency 3 digit currency code of the event_revenue String USD, ZAR, EUR event_revenue_usd event_revenue converted to USD String 57.46 event_source Either web SDK or Server-to-server String web SDK, S2S event_time Website visits: time of visit Website event: time of event yyyy-mm-dd hh:mm:ss 9/17/2020 0:09:25 event_type The following: Standard event, conversion event, website visit String conversion event event_url URL of the webpage where event occurred (Equals Original URL in website visits) String http://www.brandpit.com/checkout event_value Website events: Event value details contained in a JSON. Website visits: Always null JSON {\"sku\": \"ABC123\", \u201ccolor\": \"blue\", \"unit_price\":3.99,\"currency\": \"USD\"} idfa Advertising identifier String A56B9887-FEBA-458C-BEFC-C891F9DF7681 idfv Advertising identifier String EBC2F523-B1E5-4484-A4C8-ADC32DC7C23D imei Device identifier String 3532211234 install_time The most recent app install time yyyy-mm-dd hh:mm:ss 9/17/2020 0:09:25 ip Visitor IP address String 24.7.104.115 language Reported by user agent String English media_channel Attribtued to the website visit String Ad media_source Attribtued to the website visit String googleadwords_int media_type Attribtued to the website visit String Paid oaid Advertising identifier String df07c7dc-cea7-4a89-b328-810ff5acb15d original_url URL address redirecting the user to the website on the attributed website visit String https://www.brandpitt.com/signin?utm_source=Googleg&utm_term=shoes&utm_campaign=cool&c=summer&af_siteid=publisher&af_sub1=helloworld platform The platform String macOS postal_code Resolved using the IP address String 10977 query_params Query params on the redirecting URL (after the ?) Example: https://www.brandpitt.com/signin?utm_source=Google&utm_term=shoes&utm_campaign=cool&c=summer&af_siteid=publisher&af_sub1=helloworld&af_keyword=shoes If URL has no query params, the value will be null JSON {\"c\":\"summer\",af_siteid\":\"publisher\",af_sub1\":helloworld\",af_keywords\":\"shoes\",\"utm_source\":\"Google\",\"utm_campaign\":\"cool\",\"utm_term\":\"shoes\"} referrer HTTP document referrer of the attributed website visit String https://www.google.com/ region Resolved using the IP address String NA state Resolved using the IP address String NY Website-assisted installs The record structure of the report is as follows: The record fields are grouped as follows: Event:The install conversion event. Touchpoint: Touchpoints encountered prior to the install conversion. An install conversion consists of one or more touchpoints. Each touchpoint has a record in raw data. The install_id groups the touchpoints of an install together. Example web to app report: Website-assisted installs example Field group Field name Description Event bundle_name Brand bundle name configured in the Brand Bundle page Event bundle_id Brand bundle ID Event app_id App ID Event install_id Unique install ID grouping the touchpoints of the user journey. Calculated as bundle_id+appsflyer_id+install_time Event appsflyer_id AppsFlyer ID assigned to a mobile device when a user installs an app Event install_time Install time Event install_name install, reinstall (meaning a user who installed the app, deleted it, and then installed it again) irrespective of the reinstall cause. Event install_type Install type: organic_install, custom_link_install, smart_banner_install, non-organic_install Event final_data True or False: If true, the row is final. Example: Install takes place on January 1. For the next 7 days, report rows associated with this install contain the valuefalseunder the final_data column On January 8, the conversion is finalized and the value changes to true.Reports starting January 9 no longer contain the install. Event mobile_media_source The mobile media source engaged last, before the install Event mobile_campaign The campaign engaged last, before the install Event mobile_campaign_id The campaign ID engaged last, before the install Event mobile_device_category Device type used: phone, tablet Touchpoint touchpoint_contirubtion Last (last or only web media source before install) Assist (not the last touchpoint before install) This filed replacespath_touch_type now deprecated. Event mobile_platform Device operating system: Android, iOS Event mobile_country Country of install according to the device IP address Touchpoint web_timestamp Time the web touchpoint occurred Touchpoint web_media_source Web media source touchpoint Touchpoint web_campaign Web campaign touchpoint Touchpoint web_campaign_id Web campaign ID touchpoint Touchpoint web_media_type Media source type Touchpoint web_media_channel Media channels Touchpoint web_device_category Value for this touchpoint: Desktop, other, smartphone, tv, tablet Touchpoint web_platform The operating system of the device used for the touchpoint: Android, iOS, Windows, macOS, Chrome-os, Linux Touchpoint web_country Touchpoint country Touchpoint web_pid UTM value for website visits Touchpoint web_utm_source UTM value for website visits Touchpoint web_utm_medium UTM value for website visits Touchpoint web_utm_campaign UTM value for website visits Touchpoint web_utm_content UTM value for website visits Touchpoint web_utm_term UTM term (keywords) parameter at a touchpoint Touchpoint web_referrer The HTTP referrer of the web visit that the install was attributed to. Touchpoint web_googleads_campaign_id Campaign ID provided by Google Ads integration (Available from August 6, 2020) Touchpoint web_googleads_campaign_name Campaign name provided by Google Ads integration(Available from August 6, 2020) Touchpoint web_utm_id UTM value for website visits Event customer_user_id Customer user ID as set by the web SDK Touchpoint idfa The ID of the device installing the app Touchpoint idfv The ID of the device installing the app Touchpoint android_id The ID of the device installing the app Touchpoint advertising_id The ID of the device installing the app Touchpoint amazon_fire_id The ID of the device installing the app Touchpoint imei The ID of the device installing the app Website assisted installs Conversion paths Report record structure Fields grouped as follows: Event: The conversion event and associated information. Touchpoint: Details of a touchpoint in the path to conversion. A conversion consists of one or more touchpoints. In the file, each touchpoint is represented by a record. Example Conversion Paths reportConversion_paths_example_oct20.csv Conversion paths fields Field group Field name Description Event conversion_id Unique conversion ID grouping the touchpoints of a conversion. Calculated asbundle_id+appsflyer_id+conversion_time Event bundle_name Brand bundle name set in the brand bundle page Event bundle_id Brand bundle ID Event final_data True or False: If true, the row is final. Example: A conversion takes place on January 1. For the next 7 days, report rows associated with this conversion contain the valuefalseunder the final_data column On January 8, the conversion is finalized and the value changes to true. Reports starting January 9 no longer contain the conversion. Event conversion_type mobile_conversion, web_converson, install Event app_id App ID Event appsflyer_id ID assigned to a mobile device when a user installs an app Event conversion_time - Event conversion_name Sent by web SDK or web S2S, or the in-app event name sent by the mobile device/mobile S2S. Event conversion_media_source Attributed media source Event conversion_campaign Attributed campaign Event conversion_campaign_id Attributed campaign ID Event conversion_media_type Attributed media type: Paid, owned, earned Event conversion_media_channel Attributed media channel: Direct, organic search, social media, email, ad, referral Event conversion_device_category Device category: Phone, tablet, desktop Event conversion_platform Platform, for example, MacOs, windows Event conversion_country User location Event conversion_url Web conversions: the page the conversion took place on.Mobile: Null Touchpoint touchpoint_time - Touchpoint touchpoint_type Web visit, mobile click, mobile impression Touchpoint touchpoint_media_source - Touchpoint touchpoint_campaign - Touchpoint touchpoint_campaign_id - Touchpoint touchpoint_media_type Paid, owned, earned Touchpoint touchpoint_media_channel Direct, organic search, social media, email, ad, referral Touchpoint touchpoint_device_category Phone, tablet Touchpoint touchpoint_platform Android, iOS Touchpoint touchpoint_country Country code Touchpoint touchpoint_utm_source UTM values for website visits Touchpoint touchpoint_utm_medium UTM values for website visits Touchpoint touchpoint_utm_campaign UTM values for website visits Touchpoint touchpoint_utm_content UTM values for website visits Touchpoint touchpoint_utm_term UTM values for website visits Touchpoint touchpoint_utm_id UTM values for website visits Touchpoint touchpoint_referrer URL referring the user to the website for this touchpoint. In the case of a mobile touchpoint, the value will be null. Touchpoint web_googleads_campaign_id Campaign ID provided by Google Ads integration.(Available from August 6, 2020) Touchpoint web_googleads_campaign_name Campaign name provided by Google Ads integration.(Available from August 6, 2020) Event customer_user_id Customer user ID went with the vent Event idfa Device ID used during the conversion Event idfv Device ID used during the conversion Event android_id Device ID used during the conversion Event advertising_id Device ID used during the conversion Event amazon_fire_id Device ID used during the conversion Event imei Device ID used during the conversion Field release notes Date Report Change 2020-01-17 Website-Assisted Installs The name of the report in Data Locker has changed. 2020-11-18 Website events Website visits The report names and structure are changed: Web touchpoints replaced byWebsite visits Web events replaced byWebsite events 2020-10-04 Web-to-app Fields added: mobile_campaign_id web_campaign_id 2020-10-04 Conversion paths Fields added: conversion_campaign_id touchpoing_campaign_id Procedures Setting up PBA reports in Data Locker PBA reports are written Daily to the Data Locker in h=23 folder for events occurring on a given day. Data can't be written retroactively. To enable PBA reports an account admin must set up Data Locker: Go to Integration > Data Locker. Select all the reports in the People-Based Attribution section. Click Save configuration. To download reports, see accessing Data Locker reports. Data LockerPBA raw data reports are made available in the h=23 folder. Example: t=website_events/dt=2020-11-26/h=23 Combining PBA and mobile data The data reflects the users most likely to engage with both your mobile app and website. Combine mobile app and website data. Solution: Combine reports using customer user ID (CUID) Use the same CUID for both mobile and weband combine reports using CUID as the key. Then, combine reports using the CUID field PBA cross-platform user identification: PBA can determine that a web and a mobile user are the same person. If so, then web reports with PBA include a mobile advertising ID: Android advertising ID, iOS IDFA, OAID, or Amazon advertising ID. Then, combine mobile and web reports based on mobile advertising ID. Use cases for PBA and mobile Combine mobile and web data to see user activity across platforms and devices. The combined data lets you: Follow the user journey across your brand's digital properties Analyze user behavior in each platform Consider which platform shows more user engagement See which platform produces more conversions Measure your efforts at switching users from web to mobile Application note - downloading and combining Data Locker files PBA raw data is available in Data Locker. For a given report, the data is contained in the h=23 folder of report type and consists of multiple compressed files. Use this procedure to: Copy the files from Data Locker using Cyber-Duck or any other tool for copying S3 files. Combine the files into a single CSV file using Q. Copying PBA data from Data Locker Before you begin: Install and set up Cyber-Duck. To copy data using Cyber Duck: Open CyberduckThe list of data types available displays. Double-click on a PBA report type and choose from web_events, web_to_app, or web_touch_points.The list of report dates available displays. Right-click on a given date. Select Download to a specific location and complete the location.The files download. Repeat the above steps to copy data from other report types. Each report type and date must be stored in a different directory on your computer. Creating a combined CSV file: Before you begin: Install Q on your computer. To combine the data in a CSV file using Q: Using the command line/ma\u0441 terminal, go to the directory containing the data. Use the command that follows to combine the compressed files into a single file having the name pbadata.csv.Note: The symbol ~ represents the path/home folder where the Q command is located on your computer. You may need to include the full path to invoke the command. ~q \"SELECT * from part*.gz\" -d , -H -z -O >pbadata.csv Open the file using Excel or any other tool"
  },
  {
    "text": "At a glance: View user acquisition LTV in-app event performance metrics across media sources and use them to optimize your campaigns. Related reading: Raw-data report\u2014in-app-events Events dashboard access To open the Events dashboard: In AppsFlyer, go to Dashboard > Events. At the top of the page, set filters as follows: Media source Geo LTV period Considerations: The dashboard is limited to events attributed to user acquisition campaigns (UA). This includes events double-attributed in the context of a retargeting engagement. The date range in the dashboard relates to the LTV (install) date. Use the Activity dashboard to get metrics based on the actual date of the user action. Top Events Chart By default, the Top Events Chart displays the in-app events with the most actions. You can select the in-app events that interest you. Events Drill Down table The table can be grouped by campaign or event. Information presented in the table relates to users acquired during the LTV period. Media source: Attributed media source. In-app events: Name of the in-app event reported by the SDK. Unique users: Number of unique users (unique AppsFlyer ID) who performed the event.For Organic in-app events, re-installing users don't increase the unique users count, so the number sometimes appears as zero. Number of actions: Total number of actions means the number of times the in-app event was performed by users. Revenue: Revenue generated from the in-app events. Average actions per user: The number of actions/unique users. Limitations Currently, the Events dashboard does not fully reflect campaign name changes."
  },
  {
    "text": "At a glance:PBA setup checklist. Related reading: PBA getting started | PBA brand bundles Setting up PBA Setting up PBA consists of several action items described here and listed in the table that follows. Group brand digital properties into a brand bundle. Integrate the web SDK into your website and the mobile SDK into your app. AppsFlyer collects and attributes the data. Data is collected from several different sources. Recorded data is divided into touchpoints and events. Events are attributed to the last non-direct web visit in the previous 30 days. Advertisers can designate some events as conversion events. For example, purchases. Conversion events are analyzed in the dashboards. Raw data is used to perform custom data analyses. Analyze customer journeys to optimize campaigns. PBA set-up steps Setup tasks are detailed in the table. Download this spreadsheet to record your progress. Best practice: Implement CUID in the app and on your website. AppsFlyer will receive the CUID when a user registers or logs on. PBA set-up checklist Responsibility Actions Remarks 1 Advertiser Add a web app to your AppsFlyer account. The web app specifies the URL of the website for which you want to measure traffic andit is used to prevent self-attribution. Set up brand bundles; they combine a brand's digital properties (mobile apps and a web app). Specify additional excluded domains. Analyses and reports are aggregated within the brand. 2 Webmaster Install the Web SDK on the website defined by the web app. Configure the web SDK to: Record visits Record events Set CUID Test implementation with the SDK test tool SDK records visits and events. Integration is fully supported through Google Tag Manager (GTM), Adobe, or Tealium. Mandatory: Call SetCustomerUserID() immediately after a user registers or logs on. If you don't have a CUID, discuss alternatives with your CSM. 3 Advertiser Ensure that the webmaster used the SDK test tool to verify that the website the SDK is configured to: Record visits Record events Set the CUID Advertiser! Don't proceed until this step is complete. 4 Developer & Advertiser [Optional] Web server-to-serverAPI Reports web-related events like automatic subscription renewal 5 Advertiser Mark conversion events: Web events [Optional] Mobile in-app events (impacts conversion paths) Wait for daily* processing to complete before doing so. 6 Advertiser Begin to use the dashboards Website Attribution Web-Assisted Installs Conversion Paths 7 Advertiser Set up Data Locker Provides access to PBA raw-data reports including touchpoints, standard and conversion events, and specialized reports for Web-Assisted Installs and Conversion Paths 8 Advertiser [Optional]Begin to use raw data Data is available after daily* processing. * Due to processing, data is available 10 hours after midnight UTC on the day of the event. Meaning Monday's events are available Tuesday 10:00 UTC. PBA data-acquisition via SDK/API PBA data-acquisition tools Web platform Mobile (app) platform SDK Web JavaScript tag SDK installed on the website Reports website visits, and web events Mobile App SDK integrated into iOS, Android, Unity, etc. Reports app installs and user actions occurring in the app Server-to-server API Web server-to-server Reports events occurring in backend servers (not the web) Example: subscription renewal Mobile server-to-server Reports events occurring in backend servers (not the app) Example: subscription renewal"
  },
  {
    "text": "At a glance: Attribute your Twitter retargeting campaigns in AppsFlyer. For retargeting campaigns on Twitter, AppsFlyer supportsRe-engagementmeasurement only. That is an engagement with a retargeting campaign by a user who already has the app installed at the time of engagement. Currently, re-attribution measurement is not supported by Twitter. Enabling Twitter re-engagement attribution on the dashboard To enable re-engagement attribution for Twitter, follow these steps: Ensure Retargeting is enabled for the app on the App Settings page. For details, click here. Go to Integrated Partners enter Twitter and from the Twitter Integration window, enable Re-engagement attribution. Configure click-through lookback window. If needed, activate Re-engagement view-through attribution and configure the Re-engagement view-through lookback window. Configure the re-engagement window(the period when the user's in-app events are attributed to the retargeting media source). Read more about Twitter re-engagement configuration. Viewing the reports Once Twitter Retargeting Attribution is enabled on your AppsFlyer account, you can view your retargeting campaigns in the Overview dashboard by selecting Retargeting in the selection panel.All available information in the dashboard now displays the retargeting campaigns and the downstream in-app events reported after the engagement with the retargeting campaign."
  },
  {
    "text": "At a glance: Test the Web SDK PBA plugin integration. Test PBA web events Principles of using the test page Web SDK sends web events to PBA, which are made available via PBA dashboards and raw data reports, after daily processing. To enable an efficient testing process, you send test events without waiting for daily processing. Test events are: Parsed and validated on receipt. Made available to you in the user interface. This includes processing errors. If they exist, send corrected events again to make sure they are processed correctly. Are processed like any other event during daily processing. This means they are added to the dashboards and raw data. Web SDK integration test page Page main view The most recent events appear first. Event cache: Contains up to 100 events Older events are deleted to make way for newer events Cached events are deleted after 24 hours Page controls: Refresh rate indicator: The page refreshes automatically every 5 seconds. Clear all: Clears events from the cache permanently. Note! The cache is common to websites sharing the same web dev key. Thus, if another developer is using the test page, it will clear for them as well. Pause/start: Pauses automatic refresh. New events don't display until you click start. Event table columns Field Description Time (UTC) Event time Event type Event types are as follows: Events sent by you: EVENT setCustomerUserId pageLoad: Sent by the web SDK each time a page is loaded/refreshed on your website Event content The event payload, as recorded by PBA. Comments Valid: PBA received and recorded the event. No further action is required. Invalid: List of errors requiring corrective action. The error message format is:event field name: error description Hover over error messages to see details: Drill-down view Click an event row to display its contents after processing. See Web SDK event parameters for additional information Procedures Complete the procedures that follow. Enable test mode Prerequisites Before testing, the web SDK must be implemented on your website or on a test website. Browser limitation If test mode is enabled on a given browser, irrespective of the tab; the browser can only be used to connect to the website specified and not to any other website. Use a different browser, for example, Safari instead of Chrome, to connect from the same machine to a different website. To enable test mode: Verify that the SDK is loaded: In AppsFlyer, go toMy Apps>View brand bundles. Select the requiredWeb SDK integration test.The integration page opens. The web dev key is displayed. In a new browser tab, go to your website (that has the Web SDK installed). Right-click and select inspect to open the browser developer tools. Go to the Consoletab. In the console, enter: window.AF_SDK.initPluginsConfig.pba.webAppId The webAppID displays. Verify that the webAppID is identical to the web dev key in the Web SDK integration test page. Enable test mode: In the website browser tab, go to the Console tab. Enter: window.AF_SDK.PLUGINS.PBA.turnOnDevMode() The function returnsundefined. Verify that test mode is enabled: In Console tab, Enter: window.AF_SDK.PLUGINS.PBA.isDevModeOn() The return value is true. This indicates that test mode is active. Send test events In test mode, events that you send are displayed in the test integration page Note! Test events are processed and subsequently will be included in PBA reports. To avoid distorting reports, populate eventRevenue with low (small) values. If no value is sent, PBA populates it with 0. Send example events of each of the types described. Step Action (Enter commands) Web SDK test integration page (Expected result) 1 Open a new tab in the browser and browse to any page on your website. PBA registers a 'pageLoad' event whenever your website opens/refreshes: 2 Login/register to your website as a user to trigger a setCustomerUserId event. 3 Start sending web events to verify PBA processes them correctly. Note: If not specified, eventRevenue and eventRevenueCurrency are populated with default values: eventRevenueCurrency: \"USD\" eventRevenue: 0 See Web SDK event parameters for additional details. Troubleshooting Events do not display in the test page In the browser developer tools, go to Network tab. In the filter field, enter \"websdk.\" Based on the HTTP response code, proceed as follows: 200: Reach out to AppsFlyer technical support. 400: Check that all parameters are enclosed in \" \"."
  },
  {
    "text": "At a glance: Test your AppsFlyer Android integration using the AppsFlyer Partner Integrations app to trigger postbacks. Android integration testing Testing consists of the following elements: Use the Android version of the AppsFlyer Partner Integrations app to generate test install and purchase in-app events. These tests, in turn, trigger postbacks sent to your endpoints. You also have the option to test login and registration in-app events. On receipt of the postbacks, verify that you are able to ingest them. Testing scope The following table lists test scenarios according to the setting combinations available. For each scenario, you can test installs and in-app events. For in-app events, you can use in-app event mapping to map advertiser events to your events. Testing Complete the prerequisites and then perform the test procedures in the sections that follow. The test sections each contain a table you can use to record your test results. Prerequisites Complete the prerequisites before beginning to execute the test procedure. Prerequisites Integrate the Android test app into your account. Verify that the test app is integrated into your account Map in-app events to your event names. Event names to be mapped: purchase, login, registration Prepare attribution link Test install attribution using a device running Android Test in-app event attribution using an Android device Test retargeting attribution using an Android device Test install attribution To trigger postbacks: Send the attribution link previously prepared to a test device. Click on the link, install and then open the app.The Install Data page displays. Validate the attribution using the following parameters. If the validation fails, see Troubleshooting. install_time: near the current time. Time is in UTC. af_status: Non-organicIf this is not the case, the install was not attributed. media_source: your ad network Tap In-App Event Tests. Tap Purchase Event.The Purchase Event confirmation displays. Verify that: You received install and purchase postbacks. The event name is mapped correctly (if you mapped in-app events). You are able to ingest the postback. Supplementary information and procedures About the Partner Integrations test app The Partner Integrations app is available in Google Play. The app sends install and in-app events to the AppsFlyer platform. When the app is opened for the first time,the Install Data page displays the conversion data recorded in the AppsFlyer platform. Test in-app events are triggered in the user interface. The following functions are available: In-App Event TestsSend purchase,login, and registration and in-app events. By mapping the app in-app event names to your event names, postbacks are populated using your event names. Attribution link Prepare an attribution link in the AppsFlyer dashboard, using one of the following methods: Generate the link in the AppsFlyer dashboard. Edit the example link that follows. To generate a link in the dashboard: In AppsFlyer, go to My Apps. Select adNetworkTest. Go to Configuration> Integrated Partners > select your ad network > Attribution link tab. In the Attribution link tab, set the parameters listed. You can add additional parameters if required. Link to attribution linkd Parameter Example value Remark Campaign c-test-2020-12-20 Set a value that is identifiable in your postbacks PID pitestap Copy the resulting link for later use. Example attribution link: https://app.appsflyer.com/com.appsflyer.adNetworkTest?pid=pitestap_int&c=c-test-2020-12-20 Test app integrated in your account To verify that the test app is available in your account: In AppsFlyer, go to My Apps. Verify that the app Partner Integrations adNewtorkTestdisplays under Available Apps. If this is not the case, contact your Partner Development Manager. Troubleshooting Symptom Cause/corrective action The install time is not the current time The app was not deleted before the install. Delete the app and repeat the procedure. The media source is not your media source Verify that you have set the correct pid value on the attribution link. Verify that you are using the correct attribution link af_status is Organic Check the format of the attribution link, especially the value of pid. Test retargeting attribution You can also test retargeting attribution. The process is almost the same except for one parameter that you add to the attribution link. Generate a new attribution link and add the parameter is_retargeting=true to it. https://app.appsflyer.com/com.appsflyer.adNetworkTest?pid=YOUR_PID&c=YOUR_CAMPAIGN&af_click_lookback=7d  &clickid={clickid}&is_retargeting=true Install the app using the retargeting link. The flow is the same as described in testing install attribution. Viewing retargeted installs in the dashboard Access your AppsFlyer dashboard and click on Re-targeting in the left-side menu. Allow up to 30 minutes for the retargeted install to appear in the dashboard. Test view-through attribution In AppsFlyer, go to My Apps. Select adNetworkTest. Go to Configuration> Integrated Partners > select your ad network > Integration tab. Make sure that Enable view-through attribution is ON. Copy the Impression attribution link. https://impression.appsflyer.com/com.appsflyer.adNetworkTest?pid=YOUR_PID&c=YOUR_CAMPAIGN&af_viewthrough_lookback=24h&advertising_id=YOUR_GAID&af_siteid=YOUR_SITEID Replace the parameters as follows: YOUR_PID - your partner ID supplied by AppsFlyer (ending with _int) YOUR_CAMPAIGN - any campaign name YOUR_GAID - your Google Advertising ID YOUR_SITEID - any site ID Note: the parameters in the link are the basic parameters used here for the purpose of testing. You can have other parameters in the view-through attribution link according to your requirements. Send the view-through attribution link to the test device. Open the link in the browser and install the app from the store. Launch the app.The following screen displays: If you don't see this message, make sure that the view-through attribution link is formatted correctly. Uninstall the app and reinstall using the view-through attribution link with the new test device. Tip For more elaborate results, repeat the installation process using the view-through attribution link with the new test device. Uninstall the app, change the parameters in the link (the campaign name, af_siteid, and advertising_id), and install again by clicking the URL. View installs in the dashboard Once you install and launch the app, you can see the results in your AppsFlyer dashboard. Allow up to 30 minutes for the install to appear in the app dashboard. Raw data export Data related to apps whose install is attributed to your ad network can be exported in CSV format. The data includes the following: Installs In-app events Retargeting installs In-app events of apps installed from retargeting campaigns To export raw data: In AppsFlyer go to, Reports >Export data. Select the date range. Select a report.The report downloads within a few minutes. Verify postback data Every install generates a postback that is sent to your servers. To verify the postback URL, its structure, and the parameters that are appended to it, export the Installation postbacks report. The Installation postbacks report contains a column titled Postback URL. This column lists the postback URLs as generated for each and every install. Review the data in that column to verify the following: The URL endpoint is the correct one The parameters appended to the URL correspond to those appended to the AppsFlyer attribution link The Postback Error Message column is empty"
  },
  {
    "text": "At a glance: Use SKAN recommendations to optimize your conversion value settings and receive more accurate post-install activity measurements. Overview SKAdNetwork (SKAN), part of Apple iOS, lets advertisers measure campaign performance while simultaneously preserving user privacy. With SKAdNetwork, post-install activity is measured using only numbers\u2014conversions values\u2014 between 0-63. The AppsFlyerConversion Studio provides you with maximum flexibility to make every conversion value (CV) count. You determine precisely what measurement data should be encoded within the CV\u2014including what activities should be measured during the post-install period, and for how long. However, given the limited measurement capabilities of SKAN, it can be difficult to decide what to measure (for example, revenue, in-app events, or retention) and how to best utilize the CVs between 0-63. Decisions may be based on estimates, trial and error, or machine learning tools that use internal app data. And the measurements are not always as accurate as they could be. AppsFlyer SKAN recommendations: Gives suggestions to improve your current CV settings and enhanceyour CV efficiency and measurement accuracy. Solves the difficulties you may have in making CV settings decisions. Are based on your specific vertical, geo, SKAN and non-SKAN app data, and user behavior. Recommendations Revenue Understanding revenue recommendations Having the right revenue configuration schema is crucial to getting accurate revenue reporting. The conversion value (CV) configuration you have to report revenue isn't necessarily 100% accurate, and SKAN-reported revenue may differ from actual revenue. For example, the actual (AF reported) ARPPU may be $10, but your current CV configuration reports SKAN ARPPU of $7, meaning SKAN underreports revenue for each paying user by $3. AppsFlyer checks your non-SKAN revenue data (which is 100% accurate) on a daily basis, to make customized recommendations you can implement to improve the accuracy of your SKAN revenue reporting. The recommendations are also based on your saved activity window configuration in Conversion Studio, as well as your specific vertical, geo, and app user behavior. The recommendations: Give you a clear picture of campaign performance with accurate revenue reporting. Save conversion values by using fewer ranges to accurately measure revenue. Take into account both in-app purchases and ad revenue. Revenue recommendations layout A Activity window as saved in your Conversion Studio configuration, during which SKAN revenue is measured. B Actual app average revenue per paying user (ARPPU) based on precise data from organic and non-organic users attributed via AppsFlyer (AF) methods. C Current configuration ARPPU (SKAN ARPPU), meaning the ARPPU measured based on your current configuration in Conversion Studio for activity window and CV configuration for revenue reporting. D Estimated ARPPU: The expected ARPPU for your selected number of ranges. See F and G. E Approximate error: The difference between B and C. This can be a positive or negative error, depending on whether your SKAN ARPPU is overreported or underreported. Example: If actual ARPPU is $10 and SKAN ARPPU is $7, the approximate error is an underreporting of 30% (-$3 dollars per user). F Recommendations for your SKAN revenue configuration. Select the number of ranges you want to include in your configuration. G Your current revenue configuration as set in Conversion Studio. Using revenue recommendations Prerequisite:Revenue recommendations require at least 14 days of revenue data. To use revenue recommendations: In AppsFlyer, depending on whether you use custom or fixed mode, go to either: Configuration > SKAN Conversion Studio > Custom > Overall revenue. Configuration > SKAN Conversion Studio >Revenue. If you already have a revenue range configured, skip this step. If you don't have a revenue range configured, configure it now.When the revenue range is configured, information about your configuration accuracy and approximate error displays. Click Check recommendations.Information about your current configuration displays, along with the revenue range recommendations and the estimated accuracy (approximate error) they will provide if implemented. Recommendations are provided for both keeping and changing the number of ranges. Select a range recommendation. Click Apply recommendation. If you have your revenue configuration set in custom mode, the recommendation is applied. If you have your revenue configuration in fixed mode (revenue), you need record the range recommendation, go toSKAN Conversion Studio > Custom > Overall revenue, and configure the recommended range. Click Save. If you then change anything in your revenue configuration, you can recheck your configuration and view new recommendations."
  },
  {
    "text": "At a glance: Instructions for setting up event sending reported via Firebase SDK to AppsFlyer in your app. Configuring events in the app This section discusses how to set up and create events in the app with Google Tag Manager (GTM). Related reading Sending events and installs using Firebase and GTM\u2014Overview GTM setup Sending events and installs using Firebase and GTM (this article) When the event is sent, GTM checks to see if there is a tag that is configured to process this event with the help of the event trigger. The event trigger is set to fire the tag whenever a specific event is sent. If a specific event is sent and it has a corresponding trigger, the tag is fired. When the tag is fired, Google Tag Manager collects all the data in the event. Such data includes the AppsFlyer ID, Dev Key, event name, and event parameters. After collecting all the data, Google Tag Manager sends the event to AppsFlyer. Creating event variables for revenue and price Android JavaKotlin In the MainActivity class, create two variables to hold AppsFlyer Device ID and DevKey: public static String appsFlyerID; public static String devKey; In the AFApplication class, create a method that returns the DevKey: public static String getAfDevKey(){return AF_DEV_KEY;} Back in the MainActivity class, in the onCreate method and after super.onCreate, pass the AppsFlyer ID and Dev Key values to the two variables: appsFlyerID = AppsFlyerLib.getInstance().getAppsFlyerUID(this); devKey = AFApplication.getAfDevKey(); In the MainActivity class, create two variables to hold AppsFlyer Device ID and DevKey: var appsFlyerID: String? = null var devKey: String? = null In AFApplication.kt, create a method that returns the DevKey: class AFApplication: Application() companion object {  fun getAfDevKey(): String? { return AF_DEV_KEY  } } } Back in the MainActivity class, in the onCreate method and after super.onCreate, pass the AppsFlyer ID and Dev Key values to the two variables: override fun onCreate(savedInstanceState: Bundle?) {  ...  appsFlyerID = AppsFlyerLib.getInstance().getAppsFlyerUID(this)  devKey = AFApplication.getAfDevKey() } iOS For iOS, parameters are available across the app. You can retrieve them through the AppsFlyerTracker instance. Objective C Swift AppsFlyer Device ID - [AppsFlyerTracker sharedTracker].getAppsFlyerUID AppsFlyer Dev Key - [AppsFlyerTracker sharedTracker].appsFlyerDevKey Apple App ID - [AppsFlyerTracker sharedTracker].appleAppID AppsFlyer Device ID - AppsFlyerTracker.shared().getAppsFlyerUID() AppsFlyer Dev Key - AppsFlyerTracker.shared().appsFlyerDevKey Apple App ID - AppsFlyerTracker.shared().appleAppID Adding events in the app The first step is to configure the event in the app. The event is sent using Firebase Event Logging In the event you specify the AppsFlyer ID, Dev Key, event name, and event parameters. The AppsFlyer ID and Dev Key are retrieved from the variables that are created in the setup step. Google Tag Manager uses Firebase Analytics Events to trigger tag events. Whenever an event is sent to Firebase, Tag Manager recognizes the event and sends it to AppsFlyer as well. Android JavaKotlin In the desired activity, add the import statement for Firebase: import com.google.firebase.analytics.FirebaseAnalytics; Add the following code to run whenever a purchase event occurs: Bundle bundle = new Bundle(); // notice \"af_id\", this is the name of the event parameter // for AppsFlyer ID that we created in the previous step bundle.putString(\"af_id\", appsFlyerID); // notice \"dev_key\", this is the name of the event parameter // for AppsFlyer Dev Key that we created in the previous step bundle.putString(\"dev_key\", devKey); bundle.putString(\"af_revenue\", \"200\"); bundle.putString(\"af_price\", \"250\"); mFirebaseAnalytics.logEvent(\"af_purchase\", bundle); In the desired activity, add the import statement for Firebase: import com.google.firebase.analytics.FirebaseAnalytics Add the following code to run whenever a purchase event occurs: val bundle = Bundle() // notice \"af_id\", this is the name of the event parameter // for AppsFlyer ID that we created in the previous step bundle.putString(\"af_id\", appsFlyerID) // notice \"dev_key\", this is the name of the event parameter // for AppsFlyer Dev Key that we created in the previous step bundle.putString(\"dev_key\", devKey) bundle.putString(\"af_revenue\", \"200\") bundle.putString(\"af_price\", \"250\") FirebaseAnalytics.getInstance(this).logEvent(\"af_purchase\", bundle) iOS Objective-C Swift In the view where the event is sent add @import Firebase Add the following code to run whenever a purchase event occurs: NSString *id_prefix = @\"id\";NSString *apple_app_id = [id_prefix stringByAppendingString:[AppsFlyerTracker sharedTracker].appleAppID];[FIRAnalytics logEventWithName:@\"af_purchase\" parameters:@{ @\"apple_app_id\": apple_app_id, @\"af_id\": [AppsFlyerTracker sharedTracker].getAppsFlyerUID, @\"dev_key\": [AppsFlyerTracker sharedTracker].appsFlyerDevKey, @\"af_revenue\": @250, @\"af_price\": @375 }]; In the view where the event is sent add import Firebase Add the following code to run whenever a purchase event occurs: Analytics.logEvent(\"af_purchase\", parameters: [ \"apple_app_id\": \"id\" + AppsFlyerTracker.shared().appleAppID, \"af_id\": AppsFlyerTracker.shared().getAppsFlyerUID(), \"dev_key\": AppsFlyerTracker.shared().appsFlyerDevKey, \"af_revenue\": 250, \"af_price\": 375 ]); Sending install events to Firebase You can also send install events to Firebase with all install-related data. Android Java Kotlin To send install events to Firebase in Android, you can use the conversionDataobject. Creating the send event method Add the following method in the AFApplication class right below the onCreate method: public void sendInstallToFirebase(Map<String, String> conversionData){ mFirebaseAnalytics = FirebaseAnalytics.getInstance(this); Bundle bundle = new Bundle(); bundle.putString(\"install_time\", conversionData.get(\"install_time\") == null ? String.valueOf(new Date().getTime()) : conversionData.get(\"install_time\")); bundle.putString(\"click_time\", conversionData.get(\"click_time\")); bundle.putString(\"media_source\", conversionData.get(\"media_source\") == null ? \"organic\": conversionData.get(\"media_source\")); bundle.putString(\"campaign\", conversionData.get(\"campaign\") == null ? \"organic\": conversionData.get(\"campaign\")); bundle.putString(\"install_type\", conversionData.get(\"af_status\")); mFirebaseAnalytics.logEvent(\"install\", bundle); } This method accepts a conversionData object. The method checks whether install time, media source, and campaign are null and if so sets the install time to the current time and the media source and campaign organic. Otherwise, it takes the data from the conversionData object and sends it to Firebase. Sending the install event Add the following code in the onConversionDataSuccess method: if(conversionData.get(\"is_first_launch\").equals(\"true\")){ sendInstallToFirebase(conversionData); } This code checks if this is the first time the app is launched. If so, it calls the sendInstallToFirebase method. Note: Starting SDK V5,onConversionDataSuccess is the name of the method for getting conversion data. If you are using an SDK version lower than 5.0.0, the name of the method is onInstallConversionDataLoaded. We recommend that you upgrade to SDK 5.0.0. To learn more, click here. To send install events to Firebase in Android, you can use the conversionDataobject. Creating the send event method Add the following method in the AFApplication class right below the onCreate method: fun sendInstallToFirebase(conversionData: Map<String, Any>) { val bundle = Bundle() bundle.putString(\"install_time\", conversionData[\"install_time\"]?.toString() ?: Date().time.toString()) bundle.putString(\"click_time\", conversionData[\"click_time\"]?.toString()) bundle.putString(\"media_source\", conversionData[\"media_source\"]?.toString() ?: \"organic\") bundle.putString(\"campaign\", conversionData[\"campaign\"]?.toString() ?: \"organic\") bundle.putString(\"install_type\", conversionData[\"af_status\"]?.toString()) FirebaseAnalytics.getInstance(this).logEvent(\"install\", bundle) } This method accepts a conversionData object. The method checks whether install time, media source, and campaign are null and if so sets the install time to the current time and the media source and campaign organic. Otherwise, it takes the data from the conversionData object and sends it to Firebase. Sending the install event Add the following code in the onConversionDataSuccess method: if(conversionData?.get(\"is_first_launch\") == true){ sendInstallToFirebase(conversionData); } This code checks if this is the first time the app is launched. If so, it calls the sendInstallToFirebase method. Note: Starting SDK V5,onConversionDataSuccess is the name of the method for getting conversion data. If you are using an SDK version lower than 5.0.0, the name of the method is onInstallConversionDataLoaded. We recommend that you upgrade to SDK 5.0.0. To learn more, click here. iOS Objective-C Swift Creating the send event method In AppDelegate.m, add the following method at the end of the file: - (void)sendInstallToFirebase:(NSDictionary *)installData{ NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init]; [dateFormatter setDateFormat:@\"dd/MM/yyyy HH:mm:ss\"]; NSDate *date = [NSDate date]; NSString *newDate = [dateFormatter stringFromDate:date]; if([[installData objectForKey: @\"af_status\"] isEqual: @\"Organic\"]){ [FIRAnalytics logEventWithName:@\"install\" parameters:@{  @\"install_time\": newDate,  @\"media_source\": @\"organic\",  @\"campaign\": @\"organic\"  }]; } else { [FIRAnalytics logEventWithName:@\"install\"  parameters:@{  @\"install_time\": [installData objectForKey: @\"install_time\"],  @\"click_time\": [installData objectForKey: @\"click_time\"],  @\"install_type\": [installData objectForKey: @\"af_status\"],  @\"media_source\": [installData objectForKey: @\"media_source\"],  @\"campaign\": [installData objectForKey: @\"campaign\"] }]; } } This method receives the installData object and checks if the install is organic or not. If it's organic, it sets the install time to the current time and the media source, campaign, and install type to organic. If the install is non-organic, the method gets the relevant non-organic install data. Once the parameters are set, the method sends the install event to Firebase. Sending the install event In AppDelegate.m, in the method didFinishLaunchingWithOptions, add [FIRApp configure] In AppDelegate.m, in the onConversionDataSuccess method, add the following code at the end of the method: if([installData objectForKey:@\"is_first_launch\"]){ [self sendInstallToFirebase: installData]; } The code snippet above checks if this is the first time the app is launched. If it is, it calls the sendInstallToFirebase method. In AppDelegate.swift, add the following method at the end of the file: func sendInstallToFirebase(_ installData: [AnyHashable : Any]!){  let date = Date() let dateFormatter = DateFormatter() dateFormatter.dateFormat = \"dd/MM/yyyy hh:mm:ss\" let _newDate: String = dateFormatter.string(from: date)  if(installData[\"af_status\"] as? String == \"Organic\"){  Analytics.logEvent(\"install\", parameters: [ \"install_time\": _newDate, \"media_source\": \"organic\", \"campaign\": \"organic\"  ]); } else {  Analytics.logEvent(\"install\", parameters: [ \"install_time\": installData[\"install_time\"], \"click_time\": installData[\"click_time\"], \"media_source\": installData[\"media_source\"], \"campaign\": installData[\"campaign\"], \"install_type\": installData[\"af_status\"]  ]); } } Note: Starting SDK V5,onConversionDataSuccess is the name of the method for getting conversion data. If you are using an SDK version lower than 5.0.0, the name of the method is onConversionDataReceived. We recommend that you upgrade to SDK 5.0.0. To learn more, click here. This method accepts the installData object and checks if the install is organic or not. If it's organic, it sets the install time to the current time and the media source, campaign, and install type to organic. If the install is non-organic, the method gets the relevant non-organic install data. Once the parameters are set, the method sends the install event to Firebase. Sending the install event In AppDelegate.swift, in the method didFinishLaunchingWithOptions, add FirebaseApp.configure(); In AppDelegate.swift, in the onConversionDataSuccess method, add the following code at the end of the method: if let is_first_launch = data[\"is_first_launch\"] , let launch_code = is_first_launch as? Int { if(launch_code == 1){ print(\"First Launch\") sendInstallToFirebase(installData) } else { print(\"Not First Launch\") } } Note: Starting SDK V5,onConversionDataSuccess is the name of the method for getting conversion data. If you are using an SDK version lower than 5.0.0, the name of the method is onConversionDataReceived. We recommend that you upgrade to SDK 5.0.0. To learn more, click here. The code snippet above checks if this is the first time the app is launched. If it is, it calls the sendInstallToFirebase method. Warning Certain media sources don't allow their data to be shared with third-party platforms and services. If you are working with partners such as Facebook, Twitter, Snap, Pinterest, etc. who have set restrictions on sharing their data with third-party platforms and services, please make sure to follow their guidelines and remove any data which is under these restrictions. Facebook Data Policy Twitter Data Policy Snapchat Data Policy Pinterest Data Policy"
  },
  {
    "text": "At a glance: View the list of predefined event names and event parameters to recordpost-install rich in-app events (such as login, register, or in-app purchase). Related reading For a complete picture of working with in-app events, be sure to read these articles: In-app event postback configuration Rich in-app events\u2014Overview Rich in-app events\u2014Event structure (this article) Overview In-app events that you want to send require your developer to implement code where applicable in your app. This article describes the predefined event names and predefined event parameters. To help you determine what events and parameters to record, see our articles that include examples and flows according to business verticals. Predefined event names The following section provides a list of the predefined event names and the event mapping used for Facebook, Google Ads, Snap, Twitter, and Criteo. Each event name also includes the typical predefined event parameters associated with that event. You can choose to include any event parameters that meet your business needs. Achievement unlocked (af_achievement_unlocked) Description: Used to record achievement unlocking events Event mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_achievement_unlocked fb_mobile_achievement_unlocked unlock_achievement ACHIEVEMENT_UNLOCKED ACHIEVEMENT_UNLOCKED achievement Typical parameter: Click the link to view the mapping to SRNs. af_description Ad click (af_ad_click) Description: Used to record ad clicks on ads displayed in the app Event mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_ad_click AdClick - AD_CLICK - - Typical parameters: Click the links to view the mapping to SRNs. af_adrev_ad_type af_currency Ad view (af_ad_view) Description: Used to record ad views of ads displayed in the app Event mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_ad_view AdImpression - AD_VIEW - - Typical parameters: Click the links to view the mapping to SRNs. af_adrev_ad_type af_currency Add payment info (af_add_payment_info) Description: Used to record payment info configuration status Appears in these verticals: Ride-hailing, Flight booking Event mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_add_payment_info fb_mobile_add_payment_info add_payment_info ADD_BILLING ADDED_PAYMENT_INFO ADD_BILLING Typical parameter: Click the link to view the mapping to SRNs. af_success Add to cart (af_add_to_cart) Description: Used to record add to cart events of specific items. To report an event containing multiple items, click here. Appears in these verticals: eCommerce, Healthcare Event mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_add_to_cart fb_mobile_add_to_cart add_to_cart ADD_CART ADD_TO_CART viewBasket Typical parameters: Click the links to view the mapping to SRNs. af_price af_content_type af_content_id af_content af_currency af_quantity Add to wishlist (af_add_to_wishlist) Description: Used to record add to wishlist events of specific items. To report an event containing multiple items, click here. Appears in these verticals: eCommerce, Hotel booking Event mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_add_to_wishlist fb_mobile_add_to_wishlist add_to_wishlist ADD_TO_WISHLIST ADD_TO_WISHLIST - Typical parameters: Click the links to view the mapping to SRNs. af_price af_content_type af_content_id af_content af_currency af_quantity Complete registration (af_complete_registration) Description: Used to record user registration methods Appears in these verticals: Gaming, eCommerce, Entertainment, Finance and banking, P2P lending, Online education, Ride-hailing, Hotel booking, Healthcare, Telecommunication Event mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_complete_registration fb_mobile_complete_registration sign_up SIGN_UP SIGN_UP - Typical parameter: Click the link to view the mapping to SRNs. af_registration_method Content view (af_content_view) Description: Used to record content view events. To report an event containing multiple items, click here. Appears in these verticals: eCommerce, Flight booking, Hotel booking Event mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_content_view fb_mobile_content_view view_item VIEW_CONTENT CONTENT_VIEW viewProduct Typical parameters: Click the parameters that are relevant to your business needs to view the mapping to SRNs. af_price af_content_type af_content_id af_content af_currency af_content_list af_date_a af_date_b af_departing_departure_date af_returning_departure_date af_destination_a af_destination_b af_destination_list af_city af_region af_country af_departing_arrival_date af_returning_arrival_date af_suggested_destinations af_travel_start af_travel_end af_num_adults af_num_children af_num_infants af_class af_suggested_hotels af_user_score af_hotel_score af_price af_purchase_currency af_preferred_star_ratings af_preferred_price_range af_preferred_neighborhoods af_preferred_num_stops Initiated checkout (af_initiated_checkout) Description: Used to record checkout events. To report an event containing multiple items, click here. Appears in verticals: eCommerce, Hotel booking Event mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_initiated_checkout fb_mobile_initiated_checkout begin_checkout START_CHECKOUT CHECKOUT_INITIATED viewBasket Typical parameters: Click the parameters that are relevant to your business needs to view the mapping to SRNs. af_price af_content_type af_content_id af_content af_currency af_quantity af_payment_info_available af_content_list af_date_a af_date_b af_departing_departure_date af_returning_departure_date af_destination_a af_destination_b af_destination_list af_city af_region af_country af_departing_arrival_date af_returning_arrival_date af_suggested_destinations af_travel_start af_travel_end af_num_adults af_num_children af_num_infants af_class af_suggested_hotels af_user_score af_hotel_score af_price af_purchase_currency af_preferred_star_ratings af_preferred_price_range af_preferred_neighborhoods af_currency af_preferred_num_stops Invite (af_invite) Description: Used to record invite (social) events Appears in these verticals: Gaming Event mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_invite - invite INVITE INVITE - Typical parameter: Click the link to view the mapping to SRNs. af_description Level achieved (af_level_achieved) Description: Used to record game level events Appears in these verticals: Gaming Event mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_level_achieved fb_mobile_level_achieved level_up LEVEL_COMPLETE LEVEL_ACHIEVED userLevel Typical parameters: Click the links to view the mapping to SRNs. af_level af_score List view (af_list_view) Description: Used to record listings view events Appears in these verticals: eCommerce Event mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_list_view - view_item_list LIST_VIEW - viewListing Typical parameters: Click the links to view the mapping to SRNs. af_content_type af_content_list Login (af_login) Description: Used to record user login events Appears in these verticals: Gaming, eCommerce, Entertainment, Finance and banking, Online education, Hotel booking, Healthcare, Telecommunication Event mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_login - login - LOGIN - Opened from push notification (af_opened_from_push_notification) Description: Used to record app opens from push notification events Event mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_opened_from_push_notification - notification_open - - - Purchase (af_purchase) Description: Used to record purchase events (and associate revenue to them). For a list of currency symbols supported by AppsFlyer, click here. To report an event containing multiple items, click here. Appears in verticals: Gaming, eCommerce, Online education, Healthcare, Telecommunication Event mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_purchase fb_mobile_purchase in_app_purchase PURCHASE PURCHASE transactionConfirmation Typical parameters: Click the parameters that are relevant to your business needs to view the mapping to SRNs. af_revenue af_content_type af_content_id af_content af_currency af_quantity af_validated af_receipt_id af_order_id af_content_list af_date_a af_date_b af_departing_departure_date af_returning_departure_date af_destination_a af_destination_b af_destination_list af_city af_region af_country af_departing_arrival_date af_returning_arrival_date af_suggested_destinations af_travel_start af_travel_end af_num_adults af_num_children af_num_infants af_class af_suggested_hotels af_user_score af_hotel_score af_price af_purchase_currency af_preferred_star_ratings af_preferred_price_range af_preferred_neighborhoods af_preferred_num_stops Rate (af_rate) Description: Used to record app/item rating events. To report an event containing multiple items, click here. Event mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_rate fb_mobile_rate submit_rating RATE RATED - Typical parameters: Click the links to view the mapping to SRNs. af_rating_value af_content_type af_content_id af_content af_max_rating_value Re-engage (af_re_engage) Description: Used to record user re-engagement events Event mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_re_engage - custom_event - RE_ENGAGE - Typical parameter: Click the link to view the mapping to SRNs. af_description Search (af_search) Description: Used to record search events Appears in these verticals: eCommerce, Flight booking, Hotel booking Event mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_search fb_mobile_search view_search_results - SEARCH viewSearch Typical parameters: Click the parameters that are relevant to your business needs to view the mapping to SRNs. af_content_type af_search_string af_date_a af_date_b af_destination_a af_destination_b af_success af_content_list af_departing_departure_date af_returning_departure_date af_destination_list af_city af_region af_country af_departing_arrival_date af_returning_arrival_date af_suggested_destinations af_travel_start af_travel_end af_num_adults af_num_children af_num_infants af_class af_suggested_hotels af_user_score af_hotel_score af_price af_purchase_currency af_preferred_star_ratings af_preferred_price_range af_preferred_neighborhoods af_preferred_num_stops Share (af_share) Description: Used to record sharing events Appears in these verticals: Gaming Event mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_share - share SHARE SHARE - Typical parameter: Click the link to view the mapping to SRNs. af_description Spent credits (af_spent_credits) Description: Used to record credit spend events. To report an event containing multiple items, click here. Appears in verticals: Ride-hailing Event mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_spent_credits fb_mobile_spent_credits spend_virtual_currency SPENT_CREDITS SPENT_CREDITS transactionConfirmation Typical parameters: Click the links to view the mapping to SRNs. af_price af_content_type af_content_id af_content Start trial (af_start_trial) Description: Used to record the start of a free trial of a product Appears in these verticals: Entertainment Event mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_start_trial StartTrial - START_TRIAL - - Typical parameters: Click the links to view the mapping to SRNs. af_price af_currency af_subscription_id Note If you are mapping this event to the Facebook StartTrial event and want to associate revenue, use the af_price parameter instead of the af_revenue parameter. Subscription (af_subscribe) Description: Used to record paid subscription purchases Appears in these verticals: Entertainment Event mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_subscribe Subscribe - - - SUBSCRIBE Typical parameters: Click the links to view the mapping to SRNs. af_revenue af_currency af_subscription_id Travel booking (af_travel_booking) Description: Used to record travel booking events (and associate revenue to them). To report an event containing multiple items, click here. Appears in these verticals: Flight booking, Hotel booking Event mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_travel_booking fb_mobile_purchase ecommerce_purchase RESERVE PURCHASE transactionConfirmation Typical parameters: Click the parameters that are relevant to your business needs to view the mapping to SRNs. af_revenue af_customer_user_id af_content_type af_content_id af_class af_date_a af_date_b af_destination_a af_destination_b af_success af_content_list af_departing_departure_date af_returning_departure_date af_destination_list af_city af_region af_country af_departing_arrival_date af_returning_arrival_date af_suggested_destinations af_travel_start af_travel_end af_num_adults af_num_children af_num_infants af_class af_suggested_hotels af_user_score af_hotel_score af_price af_purchase_currency af_preferred_star_ratings af_preferred_price_range af_preferred_neighborhoods af_preferred_num_stops af_order_id Tutorial completion (af_tutorial_completion) Description: Used to record tutorial completions. To report an event containing multiple items, click here. Appears in these verticals: Gaming, Online education Event mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_tutorial_completion fb_mobile_tutorial_completion tutorial_complete COMPLETE_TUTORIAL TUTORIAL_COMPLETE - Typical parameters: Click the links to view the mapping to SRNs. af_success af_content_id af_content Update (af_update) Description: Used to record update events. To report an event containing multiple items, click here. Event mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_update - app_update - UPDATE - Typical parameter: Click the link to view the mapping to SRNs. af_content_id Note In addition to the predefined event names described in this section, Facebook offers additional events that are sent without attributes. Predefined event parameters The following section provides a list of the predefined event parameters. Each event parameter includes the mapping used for Facebook, Google Ads, Snap, Twitter, and Criteo. You can choose to include any of the event parameters in an event. Note You can see the event parameters in the Event Value column in raw data reports (premium feature). af_adrev_ad_type Description: Type of ad (for example, banner or interstitial) Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_adrev_ad_type ad_type - - - - af_city Description: City where the ride is booked Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_city fb_city - - - - af_class Description: Travel class booked for the flight Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_class fb_travel_class travel_class - - - af_content Description: Title of the content (for example, name of a song or the title and episode of a TV show) Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_content fb_content - - - - af_content_id Description: ID of the item Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_content_id fb_content_id item_id item_ids content_id id af_content_list Description: List of content IDs Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_content_list - item_id - - - af_content_type Description: Product category Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_content_type fb_content_type item_category item_category content_type - af_country Description: Country where the ride is booked Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_country fb_country - - - - af_currency Description: Currency code Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_currency fb_currency currency_code currency price_currency currency af_customer_user_id Description: ID of the customer Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_customer_user_id - customer_user_id - - cid af_date_a Description: Check-in date Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_date_a fb_checkin_date start_date - - din af_date_b Description: Check-out date Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_date_b fb_checkout_date end_date - - dout af_departing_arrival_date Description: Arrival date Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_departing_arrival_date fb_departing_arrival_date - - - - af_departing_departure_date Description: Departure date Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_departing_ departure_date fb_departing_ departure_date - - - - af_description Description: Short description (string) Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_description fb_description description description description ui_achievement af_destination_a Description: First destination Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_destination_a fb_origin_airport origin - - - af_destination_b Description: Second destination Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_destination_b fb_destination_airport destination - - - af_destination_list Description: List of destinations that are included in a destination catalog (for example, a list of museums or restaurants that are near a hotel) Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_destination_list fb_destination_ids - - - - af_hotel_score Description: Hotel score by reviews Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_hotel_score fb_hotel_score - - - - af_level Description: Level the user achieved Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_level fb_level level_up level level ui_level af_max_rating_value Description: Upper end of a rating scale (for example, 5 out of 5) Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_max_rating_value fb_max_rating_value max_rating - max_rated_value - af_num_adults Description: Number of adults traveling Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_num_adults fb_num_adults - - - - af_num_children Description: Number of children traveling Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_num_children fb_num_children - - - - af_num_infants Description: Number of infants traveling Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_num_infants fb_num_infants - - - - af_order_id Description: ID of the transaction Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_order_id fb_order_id order_id transaction_id - transaction_id af_payment_info_available Description: Whether the user's payment information is available Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_payment_info_available fb_payment_info_ available payment_info_available payment_info_available user_payment_info - af_preferred_neighborhoods Description: Area in which the hotel is located Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_preferred_neighborhoods fb_preferred_neighborhoods - - - - af_preferred_num_stops Description: Number of stops user is looking for (for example, nonstop or direct flight) Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_preferred_num_stops fb_preferred_num_stops - - - - af_preferred_price_range Description: Preferred price range of hotel Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_preferred_price_range fb_preferred_price_range - - - - af_preferred_star_ratings Description: Preferred star rating of the hotel Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_preferred_star_ratings fb_preferred_star_ratings - - - - af_price Description: Price of the product. You can use af_price as a monetary parameter that is not counted as revenue (such as an Add to cart event). This parameter refers to the individual item price. The total amount of all purchases displays under the af_revenue parameter. Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_price fb_price price price price_micro price af_purchase_currency Description: Currency used for the purchase Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_purchase_currency fb_purchase_currency - - - - af_quantity Description: Number of items Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_quantity - quantity number_items number_items quantity af_rating_value Description: Selected rating value Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_rating_value _valueToSum value - price_micro - af_receipt_id Description: ID of the receipt Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_receipt_id - transaction_id - - transaction_id af_region Description: Region where the ride is booked Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_region fb_region - - - - af_registration_method Description: Type of signup method Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_registration_method fb_registration_method registration_method sign_up_method registration_method - af_returning_arrival_date Description: Date and time the return journey finishes Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_returning_arrival_ date fb_returning_arrival_ date - - - - af_returning_departure_date Description: Date and time the return journey starts Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_returning_departure_date fb_returning_departure_date - - - - af_revenue Description: Total amount of purchases. af_revenue is counted as revenue in the AppsFlyer platform. It also counts negative revenue, from cancellations or refunds. Important! The revenue value should not contain comma separators, currency, special characters, or text. For example, a revenue value should be, 1234.56. AppsFlyer provides revenue value with an accuracy of up to five decimal places. To learn more about how to use the revenue parameter, click here. Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_revenue _valueToSum value price price_micro ui_revenue af_score Description: Score associated with the user's achievement Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_score - - - score - af_search_string Description: Search term Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_search_string fb_search_string search_string search_string search_string - af_subscription_id Description: Subscription ID for the user Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_subscription_id subscription_id - - - - af_success Description: Whether completion of action was successful Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_success fb_success success success - - af_suggested_destinations Description: List of suggested destinations Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_suggested_ destinations fb_suggested_ destinations - - - - af_suggested_hotels Description: List of suggested hotels Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_suggested_ hotels fb_suggested_hotels - - - - af_travel_end Description: End date of trip Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_travel_end fb_travel_end - - - - af_travel_start Description: Start date of trip Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_travel_start fb_travel_start - - - - af_user_score Description: Relative significance of user to advertiser Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_user_score fb_user_score - - - - af_validated Description: Validates a purchase Parameter mapping: AppsFlyer Facebook Google Ads Snap Twitter Criteo af_validated - validated success - - The following is a list of predefined event parameters that do not include SRN mapping: af_achievement_id af_coupon_code af_customer_segment af_deep_link af_event_end af_event_start af_lat af_long af_new_version af_old_version af_param_1 af_param_2 af_param_3 af_param_4 af_param_5 af_param_6 af_param_7 af_param_8 af_param_9 af_param_10 af_review_text af_tutorial_id af_virtual_currency_name"
  },
  {
    "text": "At a glance: Analyze web and mobile touchpoints that users encounter on their journey to conversion. Discover how media sources and types, channels, platforms, and devices interact to drive users to convert. PBA dashboards:Web-Assisted Installs | Website Attribution PBA Conversion Paths dashboard A conversion path is a unique sequence of user steps that leads to conversion events. A step is logged every time a touchpoint type changes. The Conversion Paths dashboard provides a marketing analysis of mobile and web touchpoints across channels, platforms, and devices encountered by a user on their path to conversion. These include retargeting touchpoints. Conversion path analysis provides advertisers with insights into the interaction of acquisition channels on the user path to performing a conversion event enabling advertisers to make data-driven media mix optimizations. Conversion events available are: Web events: set as conversion events by the marketer. App install events (reinstall and re-attribution). Mobile in-app events: [Best practice] Selectin-app events to include as conversion events [Default] Revenue-generating events are automatically included Advertisers may ask: What are the top media sources across devices and platforms that drive users to convert? How do different acquisition channels/sources interact along the path? How long does it take users to convert? How many steps or acquisition channels are involved in the path to conversion? Dashboard view To go to PBA dashboards: Go to People-Based Attribution.Click View brand bundles. ClickPBA dashboard. Go to the Conversion Paths tab. Key: Filters View type Conversions path steps (each represents 1 or more touchpoints). They include mobile clicks, impressions, and direct and non-direct web visits. Current view: Conversion metric Current view: Generated revenue metric Current view: Unique users metric Dashboard-related definitions Term Description Conversion event The following conversion events are available: Web events marked as conversion events by the marketer in the dashboard. Mobile app installs (includes reinstalls and re-attributions) Mobile in-app events: [Best practice] Select the relevantin-app events to include as conversion events [Default] Revenue-generating events are included automatically Conversion path The conversion path follows a unique sequence of media-related steps that lead to a conversion (media source, type, channel, etc.). A conversion path is displayed once in the dashboard; its KPIs contain the aggregate data of conversions that follow its specific path. Example: Conversion Paths A (3 steps), B (5 steps), and C (3 steps) are unique; each follows different media-related steps. A conversion path is considered unique based on its steps. In Path C, it doesn't matter that a user repeatedly encountered and touched the same media source (X2, X3, and so on). Touchpoints Conversion path steps include touchpoints the user interacted with up until the actual conversion event. Touchpoints span multiple user devices and platforms including: Web: Direct and non-direct web visits Mobile: Clicks and impressions Path length (steps) Path length equals the number of steps. Example: Path C has 3 steps. Path duration (days) The number of days that pass between the first touchpoint and the conversion event. Maximum path duration is 30 days. Example: 10-day conversion path 21 Jan: Date of the first touchpoint 31 Jan: Conversion event occurred Data freshness PBA daily Dashboard features Conversion paths appear in the 'top conversion paths' tableand the 'conversion path' charts. Conversion paths are analyzed and compared by setting filters and dimensions.Additional filters are available.Use the 'View steps by' option to switch the display between media source, type, and channel. Example of a conversion path: A user engages withxyz_search3 times in succession. This is considered 1 step as no other media source interrupted this activity. If the user then engages withabc_search7 times in succession, then this is the 2nd step, etc. Filters and more Use the filters to select the paths that you want to analyze. Review the scenarios that follow to understand the main filter options relating to conversions and steps. Example scenarios\u2014setting filters associated with conversion and steps Some filters can be associated with the components of the path. Path components are: Conversion Steps The use is best illustrated by the scenarios that follow. Scenario Description Scenario A View paths whose conversion is attributed to Google Search To set the media source conversion filter: Add + filter type Media source. Select Conversion. Select the media source. Scenario B View paths where the media source of the first step is Google Search To set the media source first step filter: Add + filter type Media source. Select Steps. Select First step. Select the media source. Scenario C View paths where the first media source is Google Search, the conversion is attributed to Google Search, and the user is located in South Africa at the time of the conversion To combine scenario A and scenario B with a geo filter: Complete the instructions for scenario A. Complete the instructions for scenario B. Add + filter Geo. Select Conversion. Select South Africa. Filter scenarios Filters Description Date The date range relates to the conversion date Set filters and groupings Media source The media source filter is associated with either the conversion or the steps. If you want to filter by both the conversion and steps you can set multiple instances of the filter as illustrated in the example scenarios in the previous section. When associating with steps, select either first step, last step, or any step. Media type See the example scenarios; the media type filter operates similarly. Media channel See the example scenarios; the media channel filter operates similarly. Geo See the example scenarios; the geo filter use is illustrated in scenario C in the previous section. Conversion events Select 1 or more conversion events. Path length (in steps) Select the required path lengths. Path duration (in days) Select several duration lengths; For example, 1, 3, and 7 days. Option10+includes durations of up to 30 days. Views steps by (media options) Select an option to switch between path conversion displays: media source, type, and channel. Use the view options to gain varying perspectives. Media source Name of the reported media source. Media type Examples: Earned, paid, owned Media channel Examples: Ad, organic search, referral Include direct When enabled, direct web traffic is included in the conversion paths. Table features Features Description Icons Globe: Web visit; including the mobile web Apple: Mobile touchpoint such as a click or impression Android: Mobile touchpoint such as a click or impression Export CSV Click Export CSV to open a list of report types. Select a report type to get campaign-level data in a CSV file. The following options are available: Media source Media type Media channel Campaign Distribution charts Conversion Path distribution charts let you compare the performance of paths grouped by: Path length: Steps to conversion Path duration: Days to conversion Path duration chart: Days to conversion KPIs There are 3 KPIs associated with the conversion path: Conversions: Number of conversions Revenue:Total Revenuegenerated by conversions Unique users:Number of unique users per path (using the PBA private user graph)"
  },
  {
    "text": "At a glance: Klaviyo is a trigger-based ESP and user engagement platform for marketing, growth, and engagement. Klaviyo has a powerful feature that allows you to send emails to your clients using SendGrid as your Email Service Provider. Klaviyo can be used for retargeting and re-engagement campaigns. Klaviyo\u2019s email functionality is built on top of Sendgrid's platform. SendGrid supports Universal Links, which enables AppsFlyer OneLinks to perform as expected. Prerequisites: iOSAndroid AppsFlyer iOS SDK version 4.9.0 AppsFlyer Android SDK version 4.9.0 SendGrid doesn\u2019t support Android App Links. However, URI Scheme deep linking is still supported. No special actions are required to support deep linking in Android apps from SendGrid. Before integrating, contact Klaviyo to open with them an account. The following steps are to be performed by Klaviyo: Setting up link branding. Setting up SSL for click recording. Set up AppsFlyer Perform the following steps in AppsFlyer: Create OneLink: Create a OneLink template for your email campaigns. Configure the app to support deep linking with OneLink. Follow steps 3-6 from the SendGrid integration: Host an Apple app site association file (AASA). Configure your AppsFlyer SDK. Send your first email. Test your links."
  },
  {
    "text": "What's new Ad revenue calculations in Cohort reports will be fully aligned with LTV reports. This only impacts customers with non-UTC timezone settings. Effective date August 3, 2022 Where Cohort dashboard Cohort API Cohort analytics via Data Locker What you must know You don't need to do anything. Customers in non-UTC timezones should expect the following experiences: UTC+timezones should expect a drop in ad revenue on Day 0 and a spike on Day 1 starting on the effective date. UTC- timezones should expect a spike on Day 0 and a drop on Day 1 starting on the effective date."
  },
  {
    "text": "At a glance: Add the Smart Banners code to your website to convert your website visitors into mobile app users. Related reading For a complete picture of working with Smart Banners, check out these articles: Smart Banners\u2014mobile web-to-app (for marketers) Smart Banners website code implementation for marketers [this article] Smart Banners website code implementation for developers Mobile web-to-app attribution solutions PBA integration with Smart Banners Website code implementation This article is intended for marketers who want to implement the Smart Banners code on their site via one of: Google Tag Manager (GTM) Adobe Launch Tag Manager Shopify Wix Squarespace WordPress To add the code to your website via other platforms, or to make changes to the code based on need (including adding parameters, deep linking, hiding the banner, or integrating PBA with Smart Banners), see Smart Banners website code implementation for developers. Disclaimer: The instructions in this article are based on the various platform user interfaces at the time of writing. If you notice any changes, please let us know via the Was this article helpful? feedback form at the end of this article. To implement the Smart Banners code on your site: Follow the website workplace instructions to get the Smart Banners code. Use the platform-specific instructions that follow to implement the code into your website: Google Tag Manager To implement the code via Google Tag Manager: In GTM, create a new tag. Name the tag, click Tag Configuration, and select Custom HTML. In the HTML box, paste the Smart Banner code snippet. Replace YOUR-BANNER-KEY in the snippet with your actual banner key. Click Triggering and create a new trigger by clicking on the plus icon at the top right-hand corner of the screen. Name the trigger, and then, under Trigger Configuration, and choose Page View. If you want the banner to show up on all pages, select All Page Views. If you want the banner to show up on selected pages, select Some Page Views and define the condition to trigger the tag. To learn more about triggers, read GTM's documentation. Click Save at the top right-hand corner. Return to the tag configuration screen. Verify that all is set and click Save at the top right-hand corner. Publish your GTM container. Adobe Launch Tag Manager To implement the code via Adobe Launch Tag Manager: Step 1: Create a property in Adobe Experience Cloud To create a property (tag) that hosts the Smart Banners code: Go to Adobe Experience Cloud >Launch. Under Adobe Experience Cloud Launch, click Go to Launch. Click New Property. Name your property. Under Platform, select Web. Enter your website domain. Click Save. Step 2: Add Smart Banners code to the Adobe Launch property To add the Smart Banners code to the tag: OnMy web property page, select theRules tab. Name the rule. Recommended: AppsFlyer Smart Banners. In theIf section, underEvents, click +Add. Under Event Type, select Core - DOMReady. Click Keep Changes. In the Then section, under Actions, click +Add. Under Action Type >Custom Code. Select JavaScript>Open Editor and paste the Smart Banners SDK snippet without the <script> tags. Click Keep Changes to close the code editor. Click Save. Step 3: Add the Adobe Launch tag to your website To add the Adobe Launch tag to your website (which loads the Smart Banners code): On the My web property page, select theEnvironments tab. Find the row with the environment you want to publish (development or production). Under the Install header, click the box icon on the relevant row; this is usually a production environment. See the section about publishing the Adobe Launch environment. In the Web Install Instructions dialog box: Copy the scriptcode snippet. Close the dialog box. Paste the codesnippet into the <head> tag of your website. Step 4: Publish the Adobe Launch environment To publish the environment to activate the Adobe Launch tag: On the My web property page, go to thePublishing tab. Under theDevelopment section, click Add New Library. Name the library and choose an environment. UnderResource Changes, click Add a Resource. ClickRules> Load Smart Banners > Latest >Select & Create a New Revision. Click Save. Under theDevelopment section: Next to the newly created library, click the Action menu (3 dots) and select Build for Development. Click the action menu again and select Submit for Approval. Under theSubmitted section: Click the action menu and select Build for Staging. Click the action menu again and select Approve for Publishing. Under theApproved section click the action menu and select Build & Publish to Production.The process is now complete. Now, when your website loads on mobile, the banner's active creative will be displayed. To only display the banner on certain pages or according to user actions, see Adobe Launch rules. Shopify To implement the code in your Shopify website: In your Shopify dashboard, go to Sales Channels > Online Store > Themes.Your current theme displays. Click Actions > Edit code.The Edit code page opens for your theme. In the Layout folder, click the file that starts with {/} theme.The webpage code displays. In the code, directly under <head>, paste your Smart Banners code. Wix To implement the code in your Wix website: In your Wix dashboard, click Settings. In the Advanced section of the Settings page, click Custom code. Click + Add Custom Code. In the Paste the code snippet here box, paste the Smart Banners code. In the Name box, enter a name for your code.Recommended: AppsFlyer Smart Banners. In Add Code to Pages, select where to display your banners. Either: All pages Choose specific pages Click Apply.The Custom Code page should now show your code. Make sure it is placed in the Head section. Squarespace To implement the code in your Squarespace website: In your Squarespace dashboard, click Website. Click Settings. Click Advanced. Click Code Injection. In the Header section, paste the Smart Banners code. Click Save. WordPress To implement the code in your WordPress website: In your WordPress dashboard, click Appearance > Theme Editor.The Edit Themes page opens and the CSS code for your website displays. Under Theme Files, click Theme Header (header.php). In the code that displays, under <head>, paste the Smart Banners code. Click Update File."
  },
  {
    "text": "At a glance: Convert desktop users to mobile app users using SMS vendors and OneLink. Introduction If your brand has both a web app and a mobile app, desktop web users might decide at some point that they want to install the mobile app. To help them do so and for better user experience, you can text them a direct link to the app. This is the quickest way to help them install the app. This way, they don't have to open the app store on their mobile, find your app and install it. When you save users time and effort, they are more likely to convert and install your mobile app. Note We offer another solution for desktop-to-web conversion that simply requires you to post a QR code (generated from your OneLink) to your desktop site. Requirements To text desktop users a link to your mobile app you need the following: An SMS provider account like Twillio, AWS SNS, or bandwidth.com. A backend environment where you can handle the logic for texting links to users. A multi-platform custom link such as OneLink. Setting up The following section is a high-level overview of the requirements discussed earlier. SMS provider account to text a link to the app Create an account with any SMS provider. Then, you can send links to your mobile app to a large number of users at any given time. See the list that follows for some popular providers that support a variety of programming languages and have comprehensive APIs for various use cases: Twilio bandwidth AWS SNS Braze Airship Swrve Mixpanel A backend environment to communicate with the SMS provider SMS providers require authentication tokens to use their services. In addition, user phone numbers are sensitive data. Due to these aspects, the best thing to do is to handle everything from your backend. A multi-platform custom link A multi-platform custom link redirects the user to the correct app store or destination according to the device they have. This way you can send the same link to any user no matter what device they have. Texting the app to users This section describes the flow of texting users a link to the app. It also explains how to follow up on the number of users that install the app from the link. Create a multi-platform OneLink Create a multi-platform OneLink to put in the SMS. When you create the link, you have the option to define the media source and campaign. We suggest that you set the media source and campaign as follows: media source: website campaign: text-me-the-app When sending OneLink in SMS, it's best to use the short link version of the OneLink. To learn how to create the link, see here. Set up an SMS topic in your SMS provider account In this step, you create an SMS topic or message that contains the OneLink to the app. This SMS is sent when users fill out and submit a form with their phone number. When users submit the form, your backend receives the request and communicates with the SMS provider API to send the link. Set up a web form to collect phone numbers On your website, at pages of your choice, set up a call-to-action to prompt users to install your app. The call-to-action should open a web form through which users can submit their phone numbers. Apply logic in your backend On submitting the form, the website should send a request to your backend. The backend receives the phone number and sends a request to the SMS provider to text a link to the app to the user's phone. Refer to your SMS provider API and documentation to learn how to create the logic in your backend. How Attribution works when sending a link to the app There's no way to include the advertising ID when texting desktop users a link to the app. Therefore, AppsFlyer resorts to attribution using Probabilistic modeling. AppsFlyer limits the lookback window for Probabilistic modeling clicks to maintain accuracy. The limits are: iOS: up to 24 hours Android (Google Play): up to one hour Android (out-of-store): up to 24 hours Encourage your users to install as close as possible to the click so that AppsFlyer can accurately attribute the install to the texted link. You can do so by offering coupons, discounts, or game credits. People-based attribution There are more ways, other than texting a link to the app, in which users convert from web to app. It's not always clear where these users come from and what media sources and campaigns contribute to their conversion. To get more insights into how many web users convert to mobile apps users, and what media sources and campaigns are involved in the process, use People-based attribution. People-based attribution (PBA) puts together data from both web and mobile app campaigns. The consolidated data helps you analyze user journeys across platforms and user transition from web to mobile apps. To learn more, see here."
  },
  {
    "text": "At a glance: Bidalgo, an AppsFlyer integrated partner, is a leading provider of Artificial Intelligence solutions to help app marketers scale their growth. Set up Bidalgo integration In AppsFlyer, go to Configuration>Integrated Partners. Select Bidalgo Google AdWords.The Bidalgo - Google Ads configuration window opens. In the Integration tab, turn on Activate Partner. For more details about partner activation please click here. Note The Google Ads Customer ID must be entered without hyphens. 4. From your Google Ads account, copy the Customer ID (without hyphens) from the top left-hand corner and paste it into the AppsFlyer Ads Customer ID parameter as shown in the following screenshots. 5. Enter the number in the Google Ads Customer ID field. In-app events 1. To send in-app event postbacks to Bidalgo, toggle the In-App Events Postback to ON. 2. Individually add the in-app events you want to send to Bidalgo and map them to the Partner Event Identifier field. 3. Select Send Revenue to send all the parameters including the revenue value (if it exists in the event). 4. Click Save. Important Note Disabling attribution for Google Ads prevents sending postbacks to Google Ads Partners. You can configure multiple Google Ads accounts (CID) to send postbacks (step 5) by separating each CID with a comma."
  },
  {
    "text": "At a glance: Learn how re-attributions and re-engagements reflect in the conversion data for SRNs and non-SRN user journeys. Retargeting conversion Retargeting includes two types of conversions, re-attribution or re-engagement. Tip Conversion data for retargeting doesn't always give a clear indication as to the type of conversion. See alternative conversion data sources. Re-attribution with SRNs When a user is re-attributed through an SRN, the conversion data payload doesn't indicate that this is a retargeting campaign. Since SRNs don't use attribution links, there is no way to set an is_retargeting=true parameter in the attribution link. For SRNs that do support retargeting, AppsFlyer determines whether the user should be re-attributed or not. What this means is that there is no way to determine, on the SDK level, if an install comes from a retargeting campaign. The only way is to set the campaign name such that it indicates a retargeting campaign. Note Setting the campaign name such that it indicates retargeting is not a foolproof method. See examples to learn more. Re-attribution with regular ad networks Attribution to ad networks relies on attribution links. Whether regular attribution links or OneLink, with retargeting the attribution link always has the is_retargeting=true parameter set in it. Retargeting campaign with Criteo Attribution link https://app.appsflyer.com/id1234567895?pid=criteo_int&af_click_lookback=30d& c=campaign_name&is_retargeting=true&redirect=false&idfa=68********************************** &af_reengagement_window=30d Conversion data payload { \"adgroup\": null, \"campaign\": \"campaign_name\", \"media_source\": \"criteo_int\", \"retargeting_conversion_type\": \"re-attribution\", \"adset_id\": null, \"campaign_id\": null, \"af_reengagement_window\": \"30d\", \"install_time\": \"2018-12-01 23:13:03.126\", \"adgroup_id\": null, \"redirect\": \"false\", \"af_sub5\": null, \"click_time\": \"2018-11-18 20:02:31.559\", \"agency\": null, \"cost_cents_USD\": \"0\", \"is_retargeting\": \"true\", \"af_cpi\": null, \"af_click_lookback\": \"30d\", \"af_siteid\": null, \"idfa\": \"68**********************************\", \"http_referrer\": null, \"orig_cost\": \"0.0\", \"af_sub4\": null, \"adset\": null, \"af_sub1\": null, \"af_sub3\": null, \"af_sub2\": null, \"af_status\": \"Non-organic\" } retargeting_conversion_type parameter - this parameter indicates the type of retargeting. Can be either re-attribution, re-engagement, or none. is_retargeting: true parameter - this parameter indicates that the install is a re-attributed install af_reengagement_window: The re-engagement attribution window is the number of days in which an event can be attributed to a re-engaged user. Since this is a re-attribution conversion, this parameter is redundant. Re-attribution with deferred deep linking Oftentimes, you want to deep link re-attributed users who, by definition of being re-attributed, don't have the app installed. For example, You set a campaign that aims to bring back users who uninstalled the app. The campaign promotes a product or service and you want to serve the users with content related to the product or service that you advertise. This is referred to as Deferred Deep Linking. Conversion data payload for Deferred Deep Linking comes from the onConversionDataSuccess method. Deferred deep linking with SRNs Deep Link parameters defined in SRNs campaigns are not available outside of the SRN. This includes the af_dp parameter, which holds the scheme path in the app. Therefore, to implement deferred deep linking, additional logic must be applied for SRN campaigns. Use the data inonConversionSuccess response, such as campaign, adset, adgroup, to programmatically redirect your users. Conversion data for deferred deep linking with Facebook Android iOS { \"adset\":\"Adidas Running Shoes Women\", \"adgroup\": null, \"campaign_id\":\"6**********\", \"af_status\":\"Non-organic\", \"retargeting_conversion_type\": \"none\", \"agency\":null, \"af_sub3\":null, \"af_siteid\":null, \"adset_id\":\"6**********\", \"is_fb\":true, \"is_first_launch\":true, \"click_time\":\"2017-07-18 12:55:05\", \"iscache\":false, \"ad_id\":\"6**********\", \"af_sub1\":null, \"campaign\":\"running shoes summer collection\", \"is_paid\":true, \"af_sub4\":null, \"adgroup_id\":\"6**********\", \"is_mobile_data_terms_signed\":true, \"af_channel\":\"Facebook\", \"af_sub5\":null, \"media_source\":\"Facebook Ads\", \"install_time\":\"2017-07-19 08:06:56.189\", \"af_sub2\":null } { \"media_source\":\"Facebook Ads\", \"campaign\":\"running shoes summer collection\", \"adset\":\"Running Shoes Women\", \"adgroup\":null, \"campaign_id\":\"6**********\", \"retargeting_conversion_type\": \"none\", \"af_status\":\"Non-organic\", \"agency\":null, \"af_sub3\":null, \"af_siteid\":null, \"adset_id\":\"6**********\", \"is_fb\":true, \"is_first_launch\":true, \"click_time\":\"2017-07-17 16:23:18\", \"iscache\":false, \"ad_id\":\"6**********\", \"af_sub1\":null, \"is_paid\":true, \"af_sub4\":null, \"adgroup_id\":\"6**********\", \"is_mobile_data_terms_signed\":true, \"af_channel\":\"Facebook\", \"af_sub5\":null, \"install_time\":\"2017-07-18 15:10:50.190\", \"af_sub2\":null } You can use the data in getConversionData response, such as campaign, adset, etc. to programmatically redirect your users and serve them with relevant content. Example The app is an eCommerce app that specializes in sportswear. A user who doesn't have the app installed engages with an ad and installs the app. Once the app launches, the SDK returns the conversion data. The developer makes the app open the summer running shoe collection (campaign) activity in the store and serves the running shoes for women category (adset). Deferred deep linking with attribution links There are three ways to deep link users: URI schemes When using URI Schemes, for both attribution links and OneLink, the attribution link and payload are as follows: Attribution Link http://app.appsflyer.com/com.appsflyer.nivisampleapp?pid=media_source_name &c=campaign_name&af_dp=superapp%3A%2F%2deeplink-activity OneLink // short OneLink https://dhba.onelink.me/2rAD/71ba577e //long OneLink https://dhba.onelink.me/2rAD?pid=media_source_name&c=campaign_name &is_retargeting=true&af_dp=superapp%3A%2F%2deeplink-activity Payload { \"af_deeplink\": true, \"campaign\": \"campaign_name\", \"media_source\": \"media_source_name\", \"retargeting_conversion_type\": \"none\", \"adset_id\": null, \"campaign_id\": null, \"orig_cost\": \"0.0\", \"click_time\": \"2018-12-30 23:59:09\", \"install_time\": \"2018-12-30 23:59:39.330\", \"agency\": null, \"cost_cents_USD\": \"0\", \"adset\": \"AD_SET_NAME\", \"ad_id\": \"AD_ID\", \"af_siteid\": null, \"http_referrer\": null, \"af_cpi\": null, \"af_sub5\": null, \"af_sub4\": null, \"af_sub1\": null, \"af_sub3\": null, \"af_sub2\": null, \"af_status\": \"Non-organic\", \"scheme\": \"superapp\", \"host\": \"deeplink_activity\" } af_deeplink: true- when this parameter appears and is set to true, look for the scheme and host fields scheme and host- these fields come from the af_dp parameter in the attribution link and indicate the scheme and activity to which the user should be deep linked iOS Universal links and Android app links These are the other two out of the three ways for performing deep linking. When using universal links or app links, the OneLink and payload are as follows: OneLink // short OneLink https://dhba.onelink.me/2rAD/71ba577e //long OneLink https://dhba.onelink.me/2rAD?pid=media_source_name&c=campaign_name &is_retargeting=true Payload { \"install_time\": \"2019-01-08 16:24:49.853\", \"cost_cents_USD\": \"0\", \"campaign\": \"campaign_name\", \"retargeting_conversion_type\": \"none\", \"is_first_launch\": true, \"click_time\": \"2019-01-08 16:24:14.322\", \"af_click_lookback\": \"7d\", \"orig_cost\": \"0.0\", \"af_status\": \"Non-organic\", \"iscache\": \"true\", \"shortlink\": \"71ba577e\", \"media_source\": \"media_source_name\", \"is_retargeting\": true } shortlink field - this is the field that indicates the specific OneLink that the user comes from. It helps the developer know how to proceed in terms of launching an activity and serving content. Other fields like campaign can also be used for this purpose. Important! The field shortlink does not appear in the payload when using the long OneLink. In both cases (short or long OneLink) we recommend adding a custom parameter that indicates the activity. For example &deep_link_activity=shoes_cateogry Note Using universal links and app links is only possible with OneLink. Re-engagement with SRNs Much like with Re-Attribution campaigns, when a user is re-engaged through an SRN, the conversion data doesn't indicate that this is a re-engagement campaign. You can set the campaign name such that it indicates a re-engagement campaign. Re-engagement with regular ad networks Here too, the conversion data payload doesn't indicate that the user comes from a re-engagement campaign. To overcome this limitation, you can set the campaign name to indicate a re-engagement. Re-engagement with deep linking A major part of Re-Engagement is to send the user to a specific activity. For example, if you advertise some product or sale. In such cases, you want to send the users who click the ad straight to the app activity for this product or sale. To do so, you use Deep Linking. The conversion data in Deep Linking is really important. It holds the information necessary for the developer to customize the user experience and send them to the correct activity. Re-engagement: deep linking with SRNs Conversion data is not available when a re-engaged user comes from an SRN. The developer needs to use the SRN methods to get it upon app launch. Re-engagement: deep linking with ad networks When a user is re-engaged and the app launches, the following conversion data is available in the onAppOpenAttribution method: For both iOS and Android, when using the short version of OneLink, the conversion data is a structured map of all the parameters on the link: Example: { af_dp: \"superapp://Deeplink\", pid: \"media_source_name\" c: \"campaign_name\", link: \"https://abcd.onelink.me/12ab/12ab34c\" is_retargeting: true } The app developer can use such parameters, like af_dp and campaign name, to send the user to a specific activity and serve the relevant content. Important! We recommend using the short version of OneLink. Click here to learn more. Another reason to use the short version of OneLink is the conversion data structure that the long version returns. When using the long version, the conversion data is a map with a single field called link that holds the entire long OneLink. { \"link\": \"https://abcd.onelink.me/12ab?pid=media_source&c=campaign_name&is_retargeting=true&af_dp=superapp%3A%2F%2FDeepLink\" } Alternative conversion data sources Push API offers a detailed conversion payload that indicates re-attribution or re-engagement. Push API payloads include a field called re_targeting_conversion_type. This field indicates the type of conversion, either re-attribution or re-engagement. To learn more, see our Push API guide. Raw Data Reports also contain indicators for the type of conversion. In the raw data report for retargeting conversions, there is a column called Event Name. The value in this column is either re-engagement or re-attribution according to the type of conversion. Examples of mixed user acquisition and re-attribution Examples A user installs your app and then uninstalls it. The act of installation puts the user in a re-attribution window. You set a user acquisition(not retargeting) campaign with Facebook. You also set the AppsFlyer integration with Facebook to allow retargeting.While still in the re-attribution window, the user sees the ad, clicks on it, and reinstalls the app. As far as AppsFlyer sees it, the user is a re-attributed user.This is due to two factors: The configuration with Facebook allows retargeting The user is in the re-attribution window In this case, the campaign name doesn't indicate re-attribution. Let's take the same example, only this time the user is outside the re-attribution window. In this case, the install is a new non-organic install. Let's look at another example. You set a retargeting campaign on Facebook. Some users come across the campaign and install the app. However, these users install the app for the first time. Such users are not considered re-attributed users. Instead, AppsFlyer considers them as users that come from a user acquisition campaign."
  },
  {
    "text": "What's new The default time to live (TTL) for OneLink short URLs created via bulk upload, SDK (user invite), and OneLink API is extended each time the link is clicked: Bulk upload: 180 days SDK user invite: 60 days OneLink API: 31 days Effective date May 2, 2022 Where OneLink bulk upload User invite links (OneLink URLs created via SDK) OneLink API What's changing Before the change: OneLink short URLs created via bulk upload, SDK (user invite), and OneLink API had a time to live (TTL). After the TTL expired, the links no longer worked as intended, and did not provide attribution data. After the change: OneLink short URLs created via bulk upload, SDK (user invite), and OneLink API still have a TTL. However, each time the link is clicked, the TTL is extended: Bulk upload: 180 days SDK user invite: 60 days OneLink API: 31 days What you must know The change affects new and pre-existing OneLink short URLs with TTLs. For OneLink API: You can change the default TTL by adding the parameter ttl={value} and specifying how many days, hours, or minutes. For example ttl=7d, ttl=12h, or ttl=10m. For OneLink API and bulk upload: If you don't want link TTLs to automatically extend, add the parameter renew_ttl=false to your links. Note: The parameter renew_ttldoesn't display on the actual URL. For OneLink API, the value is boolean; either true (default) or false."
  },
  {
    "text": "At a glance: Measure Google Ads retargeting campaigns. Related reading For a complete picture of working with Google Ads (AdWords) in AppsFlyer, check out these articles: Google Ads (AdWords) integration setup Google Ads (AdWords)\u2014re-engagement (this article) Google Ads (AdWords)\u2014cost and ad revenue Google Ads (AdWords)\u2014FAQ and discrepancies For iOS 14 related campaigns seeGoogle Ads SKAdNetwork interoperability with AppsFlyer. Google Ads retargeting campaigns With AppsFlyer, you can measure the results of Google Ads App Campaigns for Engagement.In AppsFlyer, such campaigns are called Retargeting campaigns.AppsFlyer supports getting cost, click and impression data for retargeting campaigns. This integration allows you to view and measure your ad spend on Google Ads, and then calculate eCPI and ROI of your Google Ads campaigns. Retargeting campaigns target users who have installed your app in the past. Retargeting engagements by users, who still have your app installed, are called Re-engagements. These usually result in deep linking users. Retargeting engagements by users, who don't have your app installed, are called Re-installs or Re-attributions. For more information, see Google Ads for engagement support documentation. Setting up Google Ads app campaigns for engagement Before you begin, review Google\u2019s instructions for how to share a link with other Google Ads accounts to ensure your engagement campaigns are properly measured via your existing link ID. To measure Google Ads App Campaigns for Engagement, follow these three steps: Enabling retargeting in app settings To enable retargeting campaigns of any media source, you need to enable it on the app level. If this is the first retargeting campaign for your app, do the following: In AppsFlyer, go to App Settings. Scroll all the way down. Turn on Enable Re-Targeting Campaign Measurement. Enable Google Ads retargeting in AppsFlyer Follow item #5 in the instructions for setting up Google Ads in AppsFlyer. Importing session start conversions in Google Ads To record conversions for re-engagement campaigns in Google Ads, you need to import the event session_start in Google Ads. This event appears in Google Ads if at least one user launches the app after you enable retargeting in AppsFlyer for Google Ads. Just to be sure, launch the app yourself after you enable retargeting. To learn how to import conversions in Google Ads, see here. Note Unlike all other events, session_start can be claimed by Google Ads API, even if you don't import session_start into Google Ads from AppsFlyer.However, in that case, these conversions would still be attributed in AppsFlyer. This creates a substantial discrepancy between your data in AppsFlyer and in Google Ads. Furthermore, this prevents Google Ads from optimizing your campaign user targeting. Setting up deep linking for app campaigns for engagement Google App Campaigns for Engagement require you to use deep links for re-engagement campaigns. Third party deep linking solutions cannot be used due to a domain mismatch. This includes AppsFlyer\u2019s OneLink. Use your own internally-developed App Links, Universal Links or custom URI schemas. There is no need to add any additional parameters to the deep link (is_retargeting=true and pid=adwords are not required). Dynamic remarketing and shopping campaigns Dynamic remarketing for apps and shopping campaigns are supported in AppsFlyer. For AppsFlyer, they are just like any other re-engagement campaign. To learn about Dynamic remarketing for apps, click here.To learn about Shopping campaigns, click here.To learn more about Google Ads for Engagement click here."
  },
  {
    "text": "At a glance:Integrate your Vizio Connected TV (CTV) app (channel) with AppsFlyer to receive attribution and event data for your campaigns on Vizio. Related reading: CTV overview About Vizio CTV attribution The Vizio SmartCast OS for streaming runs across all Vizio TVs. CTV apps streaming on Vizio can integrate with AppsFlyer via API to receive attribution data and performance measurements about which sources (non-organic or organic) and paid campaigns drive app open and in-app events. Marketers rely on these insights to measure and optimize marketing activities. The Vizio API integration supports: Vizio Smart TVs. CTV-to-CTV attribution and event recording. Meaning, attribution and recording of Vizio first app opens (the equivalent of installs) and events that occur on a user's Vizio device. Vizio attribution flow Integration procedures The following table lists the tasks required to integrate your Vizio CTV app with AppsFlyer. To record your progress, download this spreadsheet. Task Actions Who's involved App setup Create an AppsFlyer account Add account users with appropriate permissions Add your Vizio CTV app in AppsFlyer Marketer API integration with your app Integrate the AppsFlyer CTV API into your CTV app with commands to report the following events to AppsFlyer. First opens In-app events Sessions Note: First app opens must be reported before in-app events and sessions. To report owned media engagements, integrate the impression engagement API. App developer Partner integration Add Vizio as an ad network (integrated partner) in AppsFlyer. Create an attribution link to provide to the ad network. Marketer Reports setup Set up Data Lockerto receive user-level raw data reports. Data engineer Integrate the AppsFlyer Vizio API into your app The developer must: Integrate the API. This enables the app to report first opens, in-app events, and sessions.Note: First opens must be reported before in-app events and sessions. Send events using the API. Tell your developer which events to send. To report owned media engagements, integrate the impression engagement API. Add Vizio ad network To record attributions and in-app events from Vizio, you must connect AppsFlyer to Vizio as an integrated ad network. To set up Vizio as an integrated partner: In AppsFlyer. go to Configuration > Integrated Partners. Select Vizio.The Vizio partner integration page displays. Go to the Integration tab. Turn on Activate partner. See partner activation/deactivation. [Optional] Turn on View-through attribution. Click Save Integration. View data Dashboard The Overview dashboard gives advertisers a real-time window into the lifetime value (LTV) performance of organic users, based on subscription, in-app purchases, and ad monetization. LTV metrics are calculated from the attribution date until the present. To open the dashboard: In AppsFlyer, select your CTV app and go to Dashboards>Overview.The dashboard opens, with the settings and filters, headline metrics, charts, and table, relevant for CTV. Tip! Familiarize and experiment with the dashboard and use our Overview dashboard V2 article as a reference guide. Reports Vizio raw data reports, as seen in the list that follows, are available via Data Locker (Premium feature; requires subscription). Click on a report type to view a sample. First opens In-app events Sessions The list of fields available in reports is in the raw data field dictionary. Traits and limitations Trait Remarks Retargeting Not supported Delete app Must contact CSM Transfer app Not supported. App can't be transferred to another AppsFlyer account. Account users Access to data can't be restricted. View-through attribution Default is 24 hours."
  },
  {
    "text": "At a glance: Change campaign names for many ad networks without creating duplicate cost data displays. Ad cost data displays using the most recent campaign name reported. Rollout details Where? The change affects the display of aggregate cost data in dashboards (such as the Overview dashboard, Cohort dashboard, and Activity dashboard) but not the raw data itself. Who? Impacts app owners, agencies, and integrated partners. When?The rollout began in January 2020 and will be introduced across allintegrated partners (SRNs, and ad networks.) Rollout updates!The table is continually updated. To get update notifications, go to the article header and click Follow. Campaign name-change rollout Rollout date Integrated partner 2020-05-17 Applift 2020-04-21 AdColony Performance MediaBluestacksMoloco 2020-03-22 DoubleClickTencentTwitter 2020-03-11 Snapchat 2020-03-05 AarkiAdActionAdAction EngageAdColony AdColony PerformanceAdgate MediaAdikteevadjoe GmbHAppLift (Custom)AppLikeAppLovinAppnextAppreciateAura ironSourceBeeswaxBidalgo - Pinterest Marketing PartnerBlindFerretChartboost s2sDigital TurbineDigital Turbine NewFyberGlispa Media CPIGlispa Media CPRInfluence MobileInMobiironSourceJamppLifestreetLiftoffMistplayPersona.ly RTBPoint2WebsmadexTapjoyTikTok Ads (Bytedance Global)Unity AdsVungleYouAppiYouAppi CPA 2020-02-18 Apple Search Ads Yahoo Search Ads 2020-01-14 Google 2019-11-18 Facebook Campaign name change Before the change Ad spend data was tied to the campaign name as reported to AppsFlyer. Ad spend data was tied to the campaign name as reported to AppsFlyer. As a result, the spend data for campaign IDs with multiple campaign names were duplicated. Altering either a campaign name, adset, or adgroup resulted in duplicate spend data to display at the specific reporting level. After the change Ad spend data is tied to the most recent campaign name. Ad spend data displays using the most recent campaign name reported. Duplicate ad spend in the Dashboard is eliminated. The change affects the display of aggregate data and not the raw data itself. See the example that follows. What you need to do to prepare for the change This change affects the presentation of aggregate information in the Overview dashboard.The change is deployed retroactively, meaning that ad spend duplication due to name modifications in the past will no longer display. Example On January 1, campaign example_a1began to run. On January 2, the campaign name was changed from example_a1to example_a2. Example campaign data Date Campaign name Campaign ID Installs Ad spend January 1 example_a1 123 100 $100 January 2 example_a2 123 200 $200 Overview dashboard display before the behavior change Campaign name Campaign ID Installs Ad spend example_a1 123 100 $300 example_a2 123 200 $300 Result: Ad spend is duplicated and $300 displays under each campaign. Overview dashboard display after the behavior change Campaign Campaign ID Installs Ad spend example_a2 123 300 $300 Result: Ad spend appears under the most recent campaign name. See What's New in AppsFlyer."
  },
  {
    "text": "At a glance: The sessions metric is used by advertisers to measure app user engagement during a given period. Sessions counting principles The number of sessions, AKA launch, performed by users is an important metric and used as a measure of user engagement with the app. It is available via several reports and dashboards. Sessions is used to derive the following metrics: Daily active users (DAU) Monthly active users (MAU) Retention Loyal users using the default setting of 3-app opens Note! In the case of organic sessions, the metric is available in the Activity and Cohort dashboards but isn't available in the Overview dashboard. Sessions calculation The sessions metric is calculated using the af_app_opened eventreported by the SDK. A minimum time between sessions mechanism regulates which sessions are counted on the server-side. The af_app_opened event displays as launch in sessions raw data available via Data Locker. Sessions isn't available via other reporting tools. For ease of understanding, in this article, we'll use the term af_app_opened. Sessions reporting A session is reported by the SDK when any of the following occur: A user launches the app. When the app is brought to the foreground from the background. The developer can alter the reporting behavior by calling setMinTimeBetweenSessions. An explicit session report by the developer in Android apps. For example, this is implemented by utility apps that are always in the background. Sessions metric The sessions metric is counted after considering a minimum time between sessions mechanism with a default duration of 10 minutes as described in the example that follows. Minimum time between sessions mechanism The mechanism impacts the sessions count. Note! Consider that if the Minimum time between sessions is long, more than one hour, and users don't open the app many times a day, then some session-related metrics, such as DAU and retention can be impacted. This is especially true in the case of apps where users typically open the app once a day. Description and example The mechanism regulates which sessions are counted. A session is counted if the minimum time allowed between sessions has passed. The flow is as follows: A session is counted \u2192 A countdown timer starts \u2192 Sessions reported while the timer is counting down are disregarded. Example Assumption: The minimum allowed time between sessions setting is 10 minutes. Example case Session reporting times (number of minutes since 00:00) Number of sessions counted Sessions disregarded A 0, 10, 20, 30 4 None B 0, 1, 9, 11 2 1, 9 C 0, 10, 15, 21 3 15 Timer setting Default value: 10 minutes Possible values are: 1-60 minutes 1-24 hours To set the minimum allowed time between sessions timer: In AppsFlyer. go to Configuration > App settings. Set Minimum time between sessions. Click Save settings.The change takes effect within an hour. Sessions related topics Retargeting sessions Retargeting sessions are available starting July 12, 2020. Retargeting sessions are available in: Retargeting and unified view type in the overview dashboard. The relevant Cohort views, meaning retargeting and unified. In the case of the unified view, if sessions were attributed to a UA and retargeting media source, the retargeting media source prevails, and the UA media source is not displayed. Data freshness: Daily 13:00 UTC. Data Locker: Retargeting sessions reports can be enabled; they include both re-engagement and re-attribution sessions. Data freshness: 6-hour lag. During re-engagement windows, sessions are attributed to both the UA and retargeting media source. Similarly, other re-engagement in-app events are double-attributed. In the case of Google Ads and Twitter, to avoid duplicate postbacks, the af_app_opened event is sent once. Sessions postbacks to partners You can send partners sessions postbacks so that a postback is sent for each session counted. To send the postback: Explicitly map af_app_opened to a partner event. Note! In the AppsFlyer raw data report avaialble via Data Locker this event reflects as launch. Consider that this is a high-volume event and that many partners don't want to receive it. Session reporting by the app (SDK) App-side: The SDK sends af_app_opened each time the app is opened or brought to the foreground after considering the SDK setMinTimeBetweenSessions setting. Server-side: Sessions reported by the app are counted and recorded after considering the minimum time between sessions mechanism. Counted sessions are attributed using the same attribution rules as other in-app events. Explicit sessions reporting by the developer (Android apps only) Use logSessionin Android to explicitly report a session. An equivalent call is not available in iOS. Apps that work in the background continuously may require some logic implemented by the developer to report sessions. For example, utility apps like battery savers, launchers, screen locks, and antivirus apps. For these types of apps, consider reporting a session daily at midnight or some other interval appropriate to the app. In other cases, you may want to count sessions when users perform some in-app action, such as pressing the clear memorybutton and so on. Setting minimum time between app launches In the SDK, set the minimum time that can lapse between two sessions for them to be reported separately. Use setMinTimeBetweenSessions, meaning af_app_opened event (Android, iOS), to control the minimum amount of time that must occur between sessions so that each of them is reported. [Default] five-seconds. Meaning at least 5 seconds must elapse before another session is reported. The API allows setting the minimum required time between sessions."
  },
  {
    "text": "At a glance: Measure the impact of marketing efforts to drive effective website traffic. Which media sources, types, and channels are responsible for visits and conversion events. Ad level metrics available. Website visits and web events Recognizing a visit:PBA records a visit according to visit recognition rules. Visit attribution To determine the media source responsible for bringing a user to the website, PBA analyzes thequery parameterson the URL and the HTTP document referrers collected by the web SDK. Rules-based media source determination uses the data collected as detailed in this article. Similarly, media type and media channel are determined. The visitis recorded in PBA raw data. Campaign information is extracted from: Query parameters using the media source Gclid (if available) using Google ads integration Web event A web event occurs when a visitor performs an action on the website, for example, product search, product selection, orpurchase. Events are attributed to the visit of the most recent non-direct web visit, occurring during a 30-day look-back window. Events are sub-divided into: Conversion events: Significant events designated by the marketer. For example, purchase or registration. Standard events: Other events. Related reading: PBA website attribution URL best practices. PBA dashboards and raw data reports make use of the attributed media sources, types, channels, and campaigns. For ease of understanding, the table that follows contains examples of the determined media source with their type and channel. Media source Media type Media channel Direct Earned Direct Social Facebook Social Twitter Owned Social media Facebook Ads Twitter Paid Social media Google search Earned Organic search Email Owned Email googleadwords_int Paid Ad usatoday.com Earned Referral Sample of media sources, types, and channels Determining the media source PBA determines the media source, media type, and media channel in a hierarchical manner. This means determining the relevant media source rule and media source. Afterward, the media type and media channel are determined. Media source rules Media source rule Resolving the media source Prevent self-attribution To prevent attributing events to the website itself (self-attribution), and other related domains, a domain exclusion list is used. The list consists of: Primary domain: Determined by the URL of the web app included in the brand bundle Internal domains: Domains forming part of the brand External domains: Payment gateways and payment processing sites set by you and some domains, like PayPal and Stripe, set by AppsFlyer are automatically excluded pid Resolve to the pid value in the URL. For some SRNs, resolve the pid to the SRNs commercial name for consistency and clarity. For example, pid=facebook_int resolves to Facebook Ads, twitter_int resolves to Twitter. Click IDs Major ad networks, like Google, use click IDs to auto-tag campaigns. Click IDs resolve as follows: gclid:Google click IDresolves to googleadwords_int. Note! The GCLID solution is not officially supported by Google, who may deprecate it in the future. dclid: DoubleClick click ID resolves to doubleclick_int. msclkid:Bing click ID resolves tobingsearch_int. UTM parameters utm_source utm_medium Media source * email, mail, e-mail Note! If utm_medium contains one of these values, the utm_source is ignored. Email google cpc/ppc/paidsearch/search googleadwords_int google cpm/display/banner/video/listing doubleclick_int dfa / dbm cpm doubleclick_int facebook cpc/ppc/cpm/cpa/paidsocial/paid-social Facebook Ads bing cpc bingsearch_int yahoo / gemini cpc/display/listing yahoogemini_int twitter cpc Twitter snapchat swipe snapchat_int pinterest cpc pinterest_int UTM custom rules If there is no custom rule match, the media source resolves to the value of the utm_source parameter. Information about UTM parameters Referrer The referrer is the HTTP source that sent the user to the website. The media source is the domain name of the referrer. Media source rules ranked in priority from high to low priority Media source type Marketers usually segment web media sources into three types: Paid:ad campaigns like display banners, videos, and search ads. Owned:marketing campaigns that come from owned media meaning, email campaigns, social posts, blogs. Earned:direct or organic traffic from search engines, referrals, and actual direct traffic. The media type is determined by referencing the media source rule used in combination with the media source/other parameters. Applicable media source rule Media source Media type pid The pid rule determined if the media source is: Social Facebook Social Twitter SMS Blog Email Owned Any other media source Paid Click ID Determined using a click ID: gclid dclid msclkid Paid UTM UTM custom rules determine the media source Paid Any other media source Owned Referrer Referrer domain value is one of the following: googleads.g.doubleclick.net tpc.googlesyndication.com Paid Any other media source Earned Determine the media type using the media source Media source channel The media channel is determined by rules as listed here. Priority Media channel rule Values Media channel Highest priority The media source is one of the listed values Direct Direct Google Search Yahoo Search Bing Search Organic search facebook twitter snapchat pinterest linkedin whatsapp Social media Email Email Media type is Paid Ad Media source determined by referrer Referral Lowest priority No other prior condition matched Other Use the media channel rule to determine the media channel Determine the campaign Campaigns are determined using: Campaign URL parameters, per media source URL parameters. Gclid click ID and usingGoogle Adsintegration If the relevant campaign parameter is not found on the URL, then the campaign is not derived. Media source parameter used Campaign parameter used pid AppsFlyer media source parameters available on the URL are used to populate raw data and the Website Attribution dashboard. Available parameters: af_c_id, af_adset, af_adset_id, af_ad_id Click ID\u2014gclid Get via API from Google Ads utm_source utm_campaign Additional attribution rules Visit recognition rules A visit to the website is recorded using the following rules and considering the current session status. An active session is a session having less than 30 minutes of inactivity. Don't record a visit if the user came from an external excluded domain. During an active session: record a visit if the page load includes a media source. If there is no active session: record a visit. There is no minimum visit time. PBA visit recording rules Data finalization Data finalization: For Web-Assisted Installs, Website Attribution, and Conversion Paths, PBA identifies additional related events during the first 7 days after the conversion. This can change the media source identified as being ultimately responsible for driving the conversion. In the related raw-data reports, the final_datafield is false during the initial 7-day period."
  },
  {
    "text": "At a glance: Bluecore is a trigger-based ESP and user engagement platform for marketing, growth, and engagement. Bluecore has a powerful feature that allows you to send emails to your clients using SendGrid as your Email Service Provider. Customers use discounts and rewards for retargeting and re-engaging clients in cases such as cart abandonment. Bluecore requires the configuration of click domains on behalf of the clients. SendGrid supports Universal Links, which enables AppsFlyer OneLinks to perform as expected. Prerequisites: iOSAndroid AppsFlyer iOS SDK version 4.9.0 AppsFlyer Android SDK version 4.9.0 SendGrid doesn\u2019t support Android App Links. However, URI Scheme deep linking is still supported. No special actions are required to support deep linking in Android apps from SendGrid. Before integrating, contact Bluecore to open an account. The following steps are to be performed by Bluecore: Setting up link branding. Setting up SSL for click recording. Set up AppsFlyer Perform the following steps in AppsFlyer: Create OneLink: Create a OneLink template for your email campaigns. Configure the app to support deep linking with OneLink. Follow steps 3-6 from the SendGrid integration: Host an Apple app site association file (AASA). Configure your AppsFlyer SDK. Send your first email. Test your links."
  },
  {
    "text": "At a glance: Integrate OneLink-based attribution links with Sailthru system to deep link from emails. The integration utilizes Sailthru support for Universal Links on top of branded click recording domains. Introduction ESPs (Email Service Providers) can be excellent sources for segmented user traffic. One of the problems with ESPs is recording clicks while keeping deep linking functionality intact. ESPs wrap deep linking URLs with their own ESP's click recording domain. This procedure sometimes breaks the iOS Universal Links process. With Sailthru, which supports Universal Links on top of their click recording domain, deep linking and click recording can still be performed. Prerequisites iOS Android AppsFlyer iOS SDK version 4.9.0 AppsFlyer Android SDK version 4.9.0 Sailthru doesn\u2019t support Android App Links. However, URI Scheme deep linking is still supported. No special actions are required on Sailthru's side to support deep linking in Android. Setting up Sailthru Step 1: Setting up link branding in Sailthru Create a dedicated click recording domain and set a subdomain (for example, click.example.com).This can be done by purchasing a designated domain or using your own domain. For more information on setting a click recording domain with Sailthru, see here. Step 2: Upload AASA file to Sailthru For Sailthru to support iOS Universal Links, an AASA file is required. When you set up OneLink with Universal Links, you already have an AASA associated with the OneLink. To obtain the AASA: Go to OneLink templates and find a OneLink that is configured with Universal Links. Add /.well-known/apple-app-site-associationto the end of the OneLink URL. Paste the OneLink in the browser address bar and hit enter. For example, <OneLinkSubdomain>.onelink.me/.well-known/apple-app-site-association. When you do so, the AASA file is downloaded to your computer. You can open it using any simple text editor. Upload this AASA file to Sailthru. For more information and to learn more about the contents of this file, see Sailthru's guide. Setting up your app to support Universal Links Step 1: Associating click domains in Xcode In Xcode, click on your project. Click on Capabilities. Turn Associated Domains on. Click the + sign and add your click domain. For example, applinks:click.example.com. Step 2: Resolving deep links The SDK needs to resolve the OneLink behind the click domain to get the campaign details. The details are returned in the onAppOpenAttribution method. To resolve click domains: Make sure that your SDK version is at least 4.9.0. List the click domains in the SDK property resolveDeepLinkURLs. This property needs to be set before SDK initialization. For more information, see SDK documentation here. Objective-C Swift [AppsFlyerTracker sharedTracker].resolveDeepLinkURLs = @[@\"example.com\",@\"click.example.com\"]; AppsFlyerTracker.shared().resolveDeepLinkURLs = [\"example.com\", \"click.example.com\"] \t Add the following code so that the SDK can resolve the click recording domain: Objective-C Swift Add this code in AppDelgate.m - (NSDictionary *)allHTTPHeaderFieldsForResolveDeepLinkURL:(NSURL *)URL { \t\tif ([URL.host isEqual: @\"click.example.com\"]) { \t\t\treturn [NSDictionary dictionary]; \t\t} \t\telse { \t\t\treturn nil; \t\t} \t} Add this code in AppDelgate.swift func allHTTPHeaderFields(forResolveDeepLinkURL URL: URL!) -> [String : String]! { \t\tif (URL.host == \"click.example.com\") { \t\t\t/// Change User-Agent \t\t\treturn [:] \t\t} else { \t\t\treturn nil; \t\t} \t} \t Sending your first email Create a OneLink URL on the Link Management page (or manually). When creating the OneLink URL, make sure to URL-encode all parameter values. The following parameters are highly recommended to use: pid (media source) - Use a media source that signifies this usage such as Email. c (campaign) - The name of the campaign you want to measure. af_dp - The deep link URI scheme you want to deep link your users into. af_web_dp - Where to redirect users clicking the link on desktop. af_ios_url - Where to redirect users that don\u2019t have the app clicking the link on an iOS device. af_android_url - Where to redirect users that don\u2019t have the app click the link on an Android device. Place the OneLink URL in the email that you create in Sailthru. Example: <a href=\"greatapp.onelink.me/abcd/1234567\">Download my great app!</a> At this stage, Sailthru wraps the above link with the click domain that you set in the previous steps. Any click on the click domain redirects to the OneLink attribution link. If the app is installed on the user's device, the click domain deep-links into the app. Example URL parameters are not URL encoded in this example, just for the sake of readability: https://greatapp.onelink.me/abcd?pid=Email&c=Spring_Newsletter&is_retargeting=true& \taf_dp=testapp://path/to/content&af_web_dp=https://www.example.com/path/to/content& \taf_ios_url=https://www.example.com/path/to/content&af_android_url=https://www.example.com/path/to/content Testing your links After following all the required steps mentioned above, creating the appropriate OneLink URL, and placing it in an email, send yourself a test email. What should you expect? If you have the app installed, the app should be invoked. If the relevant AppsFlyer SDK deep linking APIs are implemented you should be deep linked into the relevant content. In addition, a click should appear in both the AppsFlyer dashboard, attributed to the provided media source and campaign, and also in Sailthru data."
  },
  {
    "text": "At a glance: Additional SDK functionalities that are available to implement APIs such as uninstall measurement, user invite attribution, push notifications, and privacy settings. Related reading For a complete picture of integrating the Unity plugin with your apps, be sure to read these articles: Unity plugin V6 integration guide\u2014Overview Unity plugin V6 integration guide\u2014Basic SDK integration Unity plugin V6 integration guide\u2014Additional SDK integration (this article) Unity plugin V6 integration guide\u2014API reference Attribution Measure uninstalls Measure the uninstall rate of users coming from different sources. To set up uninstall measurement, see the relevant operating system instructions. Android - FirebaseiOS Download the Unity Firebase SDK fromhttps://firebase.google.com/docs/unity/setup. Import FirebaseMessaging.unitypackage into the project. Import google-services.json into the project (obtained from the Firebase console) Note Unity Firebase SDK automatically adds manifest receivers. Add this code to the Unity class handling the AppsFlyer code: using Firebase.Messaging; using Firebase.Unity; Add to Start() method: Firebase.Messaging.FirebaseMessaging.TokenReceived += OnTokenReceived; Add this method: public void OnTokenReceived(object sender, Firebase.Messaging.TokenReceivedEventArgs token) {#if UNITY_ANDROID AppsFlyerAndroid.updateServerUninstallToken(token.Token);#endif } Android uninstall guide Warning Scenario: Implementing the Unity Firebase SDK. Requirement: Do not add the following method call to enableUninstallTracking(\u201cSenderID\u201d) if you added the Firebase Unity SDK to your project. Consequences if added: Firebase Unity SDK will get the sender ID from the google-services.json file (that was added earlier). As a result, this may cause a debug warning from Android. Get your device token fromUnityEngine.iOS.NotificationServices.deviceToken. Call this method when you receive your device token (tab content issues): AppsFlyer.registerUninstall(\"device_push_notification_token\"); Example: using AppsFlyerSDK; public class AppsFlyerObjectScript : MonoBehaviour, IAppsFlyerConversionData { private bool tokenSent; void Start() { AppsFlyer.initSDK(\"devKey\", \"appID\", this); AppsFlyer.startSDK(); #if UNITY_IOS UnityEngine.iOS.NotificationServices.RegisterForNotifications(UnityEngine.iOS.NotificationType.Alert | UnityEngine.iOS.NotificationType.Badge | UnityEngine.iOS.NotificationType.Sound); #endif } void Update() { #if UNITY_IOS if (!tokenSent) {  byte[] token = UnityEngine.iOS.NotificationServices.deviceToken; if (token != null) {  AppsFlyeriOS.registerUninstall(token);  tokenSent = true; } } #endif } } For more details, seeiOS Uninstall Guide Set additional custom data To integrate on the plugin level with several external partner platforms (including Segment, Adobe, and Urban Airship), it is necessary to use thesetAdditionalData API. Only use this APIif the partner integration article states explicitly the setAdditionalData API is required. Example:setAdditionalDatacode Dictionary<string, string> CustomDataMap = new Dictionary<string, string>(); CustomDataMap.Add(\"custom_param_1\", \"value_of_param_1\"); AppsFlyer.setAdditionalData(CustomDataMap); Sessions Custom time between sessions By default, at least 5 seconds must pass between two app launches for them to count as two separate sessions. To set the minimum time between sessions: AppsFlyer.setMinTimeBetweenSessions(custom_time_ins_seconds); Note!If you set a high value forthe custom time between launches, this can negatively impact APIs that rely on session data (such as deep linking). See more about counting app sessions. Background sessions for utility apps Not available in Unity. Owned media Resolve wrapped deep-link URLs Some 3rd party services (such as email service providers): Wrap links in emails using their own click recording domains. Allow you to set your own click-recording domains. If OneLink is wrapped in such domains, it may limit its functionality. To overcome this: Call the setResolveDeepLinkURLs APIbefore SDK initialization. The API gets the OneLink from click domains that launch the app. Scenario: The click domains redirect to your OneLink at https://mysubdomain.onelink.me/abCD. Solution: Use the setResolveDeepLinkURLsAPI to get the OneLink that is reached after click domains redirect an app user. This API method receives a list of domains that are resolved by the plugin. The following code lets you use your click domain but, also, preserve OneLink functionality: Example AppsFlyer.setResolveDeepLinkURLs(\"example.com\", \"click.example.com\"); Now,use the data from this OneLink to deep-link and customize user content. Record push notifications Record push notifications as part of retargeting campaigns. To record push notifications: Call the sendPushNotificationData method. This method is inside the onCreate method of every activity that is launched after clicking this notification: #if UNITY_ANDROID && !UNITY_EDITOR AppsFlyerAndroid.handlePushNotifications();#endif For more information, read aboutpush notification measurement. User invite attribution If existing app users invite their friends and contacts to become new users, this can be a source of growth. Attribute and record installs originating from user invites within the app. User invite attribution. Cross-promotion attribution Cross-promoting apps can cand drive additional app installs. Attribute and record installs originating from a cross-promotion campaign: promote one of your apps from within another of your apps already launched by one of your users. Cross-promotion attribution. User identifiers Get AppsFlyer ID An AppsFlyer ID is created for each new app install. Use the AppsFlyer ID to: Send server-to-server in-app events. Match it to user records in your back-end systems. Map entries when merging data from pull and push API. To obtain the unique AppsFlyer ID: string AppsFlyerUID = AppsFlyer.getAppsFlyerId(); Set customer user ID Set your own unique customer user ID (CUID) and cross-reference it with the unique AppsFlyer ID. Unique CUID: Appear in AppsFlyer raw data CSV reports. Can be used in postback APIs to cross-reference with internal IDs. To set the CUID, use: AppsFlyer.setCustomerUserId(\"someId\"); Good practice!Setthe CUID early in the app flow\u2014it isonly associated with events reported after its setup. CallsetCustomerUserIdbefore calling startSDK Recorded events will be associated with the CUID. Related data will appear in the raw data reports for installs and events. AppsFlyer.setCustomerUserId(\"someId\"); Get Customer User ID Check CUIDfor more information. Delay plugin init for customerUserID Set the customer user ID (CUID) and only then initialize the plugin. This is useful if you want your install and event data to contain your CUID. See the relevant operating system instructions: Android iOS Warning Only delay setting the CUID if it suits your business logic. If you delay setting the CUID, this can increasethe chance fordiscrepancies and may expose your app to fraud attempts. Collect OAID OAID is one of the unique device identifiers that enable attribution. To collect OAID: Unity plugin V5.4 and later Unity plugin V5.3 and before OAID is collected automatically by default. To opt-out, call AppsFlyerAndroid.setCollectOaid(false);. Download theAARprovided by theMSA alliance. Add the downloaded aar to the Assets/Plugins/Android folder. For Huawei devices, add thehms-ads-identifierlib to the Assets/Plugins/Android folder. Addappsflyer-oaidto your project. This can be done by adding the aar to the Assets/Plugins/Android folder or by adding the following to Assets/AppsFlyer/Editor/AppsFlyerDependencies.xml: <androidPackage spec=\"com.appsflyer:oaid:5.2.0\"> </androidPackage> User privacy Opt-out Different scenarios, such as legal and privacy compliance issues, may lead to a decision to opt-out and stop all recording (tracking) Best practice! Follow theexact instructions for the scenario relevant to your app. To stop tracking: CallstopSDK and set to true. AppsFlyer.stopSDK(true); Plugin stops functioning and no longer communicates with AppsFlyer servers. To reactivate tracking:Call stopSDKand set to false. Caution Use the stopSDK API if you want to completely stop tracking a specific app user. Using the API severely impacts attribution, data collection, and thedeep linking mechanism. Anonymize user data Anonymize specific user identifiers within AppsFlyer analytics to comply with privacy regulations and Facebook data and privacy policies. To anonymize an app user: Set the API during SDK initialization Call anonymizeUserand set to true. AppsFlyer.anonymizeUser(true); App user installs, events, and sessions are anonymized. To restart tracking: Call anonymizeUserand set to false. Warning Anonymizing users severely impacts your attribution information. Only use this option for regions that legally prevent you from collecting user information. Exclude partners from getting data In some cases, advertisers may want to stop sharing user-level data with ad networks/partners for specific users. Reasons for this include: Privacy policies such as CCPA or GDPR User opt-out mechanisms Competition with some partners (ad networks, 3rd parties) AppsFlyer provides two API methods to stop sharing data with some or all partners: setSharingFilter:Used by advertisers to setsome(one or more) networks/integrated partners toexcludefrom getting data. setSharingFilterForAllPartners:Used by advertisers to excludeallnetworks/integrated partnersfrom getting data. These filtering methods are supported as of SDK V5.4.1. The filtering method must be called every time the SDK is initialized and affects the whole session. If it takes time to determine whether you must set the sharing filters, then delay the SDK initialization. When the method is activated before the firststartSDKcall: Users from SRNsare attributed as Organic, and their data is not shared with integrated partners. Users from click ad networks(non-SRNs) are attributed correctly in AppsFlyer, but not shared with the ad networks via postbacks, APIs, raw data reports, or by any other method. Currently, uninstall data can't be filtered using these methods. However, you can stop sending Uninstall events to partners using theirsetup pagesin AppsFlyer."
  },
  {
    "text": "At a glance: The AppsFlyer SDK lets you safely advertise your app, attribute, deep-link, and collect behavioral information of your mobile users. You can set up and start working with any ad network and/or platform in a manner of minutes\u2014not weeks or months! Is it hard to integrate the AppsFlyer SDK? In less than an hour, an experienced developer can ready apps for attribution with AppsFlyer. Then, they only need afew minutes per app. Check out the AppsFlyer SDK integration guides forAndroid,iOS,Unity,or these other platforms. Does the AppsFlyer SDK affect app download time? AppsFlyer SDK packagesare designed and coded for a close-to-zero effect on app performance.All theSDKversions are lightweight and usually take up less than 1% of an app's size. In other words, the effect onoverall app download time is marginal. Android: ~140KB iOS: ~3.4MB Does the AppsFlyer SDK affect app performance? AppsFlyer SDK APIs are primarily setter/getteror fast asynchronous web service methods that send/receive data from AppsFlyer servers. This means SDK APIs have a negligible effect on app performance. In other words, theAppsFlyer SDK has no effect on app performance or user experience. Can I record in-app events that occur outside my app? You can use the S2S API to report events that take place outside the app; for example, a user renews their subscription using your web interface. S2S events, once recorded, are available across the platform, including dashboards, raw data, and analytics."
  },
  {
    "text": "At a glance: Identify the media sources that bring you the most and least active app users. Retention reports As a marketer, your goal is to keep users engaged so that they come back for more. Retention is the metric that you use to record the app open rate over time. Use the retention rate metric to: Uncover which channels and campaigns bring the most engaged users Perform LTV optimization Measure product usability after version updates Tip How does your app retention rate compare with the retention rate of other apps?Check out our benchmarks per vertical and country. Viewing the Retention report To view the Retention report: Goto Dashboard> Retention. Select the time period for which you want to view the Retention Report. The dates relate to the acquisition date. Select the dimensions for which you want to aggregate the report. Apply the filters you want to use. Click Go. The color of the cells corresponds to the rate: the higher the Retention rate of a cohort on a specific day, the darker the cell. Agencies Agencies can access the retention report but require the advertiser's permission to do so. To enable agency access to the Retention report: The advertiser, in the integrated partner agency permissions tab, needs to enable Allow access to your retention and cohort reports. How to use the report How is retention calculated For a given date range, retention is calculated as the ratio between: The number of unique users that launched the app at least once during a specific day/week since the installation day/week. The total number of users that launched the app for the first time during the selected date range. Retention only Data freshness rates: Daily retention KPIs: Daily Weekly retention KPIs: Are calculated on a weekly basis Monday-Sunday midnight. Updated KPIs are available in the dashboard after Monday at 12:00 UTC. Example 1: Basic Calculation PracticeChords is a new app for aspiring musicians. During a certain time period, 10 users installed it. Let's see what will appear in the report if we select this time period. Only four users (very enthusiastic young musicians John, Paul, George, and Ringo) used the app on Day 1. They all quickly got bored and no-one used the app on Day 2. The report appears as follows: Media Source Install Day Day 1 Day 2 XXX 100% 10 40% 4 0% 0 Example 2: The Report Is Not Cumulative John and Paul used the app on Day 1 after the install. Paul, George, and Ringo used the app on Day 2. The report appears as follows: Media Source Install Day Day 1 Day 2 XXX 100% 10 20% 2 30% 3 The report is not cumulative, because AppsFlyer calculates the number of unique users who open the app each day. Thus, Day 1 and Day 2 groups may overlap if there were users like Paul, who used the app on both Day 1 and Day 2 or may not. Example 3: What is Day 1? Day 1 means any user\u2019s first day of using the app after launching it, and so on. Selected timeframe: January 1-3 Kurt, Krist, and Dave installed and launched the app on January 1 John, Paul, George, and Ringo installed and launched the app on January 2 Sting, Andy, and Stewart installed and launched the app on January 3 These users are counted towards the base value of 100%: 3+4+3=10. All 3 users who installed the app on January 1, used it on the next day (January 2) Only John and George used it on the next day after installing (January 3) Only Andy used the app on the next day after installing (January 4) These users (3+2+1) will comprise the cohort for the calculation of the Day 1 retention. 6/10=60% Date ranges On the right-hand side you can find the Cohort Time Frame Selector: Select the time frame units of user activity since the first launch: For Daily, each column of the report represents a day of activity since the date of the initial installation. For Weekly, each column represents a week of activity since the week of the initial installation. Use the date selector to define the date range for the install date. Every user who launches the app for the first time during the selected date range is counted towards the base value (100%). Example 4: The Difference Between Daily and Weekly Aggregations Let's assume that only Paul and John installed PracticeChords during the selected time period. They both started using it from Day 1. In the middle of the second week, John got bored and stopped practicing. Paul was more persistent and continued using the app daily for three weeks. The daily report (that shows only the first two weeks) appears as follows: Media Source Install Day Day 1 Day 2 ... Day 7 Day 8 ... Day 12 Day 13 XXX 100% 2 100% 2 100% 2 ... 100% 2 100% 2 ... 50% 1 50% 1 The weekly report appears as follows: Media Source Install Week Week 1 Week 2 Week 3 XXX 100% 2 100% 2 50% 1 50% 1 John, who has stopped using the app between Day 7 and 13 (Week 1 after the Install Week), is counted in the Week 1 data - even though used it only for a few days during that week. Filters and grouping Filters and Group By settings allow you to drill-down the retention statistics using a variety of dimensions from the list below. Note that the results can be grouped by any of these dimensions, but up to four at once. The Min. Cohort Size setting allows you to set a minimum size of a user cohort to be displayed. The default value is 10. This is useful if you want to disregard less significant results. Media Source: the networks where you run your campaigns (for example, Facebook, Google Ads, Applovin, etc.) or Organic Geo: the countries where the installations occurred Campaign: your campaign names City: the city where the installations occurred Site ID: the publisher site ID sub1-sub5: custom parameters Wifi: whether the installation occurred over WiFi (TRUE/FALSE) OS Version: The version of the mobile OS Brand: the brand of the mobile device Agency: the Agency Adset: the Ad Set Ad: the Ad Channel: the Channel Keywords: the Keywords App Version: the App Version number SDK Version: the version number of the SDK Attributed Touch Type: the touch type (impression or click) How to see retention data for the last few days Because of the way the retention rate is calculated, if you look at a recent time range, some data may be missing. For example, if you include users who have installed the app only three days ago, the report will only show the retention for Day 1 and 2 - because there is still no data for Day 3 and later for some of the users: Use grouping by date if you want to see the daily retention for the very recent period of time. Once you group the report by date, it will display data for every day of the selected time period: Limitations The Retention report limitations are: Due to UI limitations, only 200 results are displayed. Campaign name changes are not supported. If a campaign name was changed, the initial campaign name will display. Retention does not include reinstalls. The report relates to users attributed to user acquisition campaigns. The filter values are not dependent. For example, even when selecting to show only Facebook-driven installs, the campaign names from ALL the sources are displayed in the drop-down list. Retention rate can be calculated for up to 30 days in the Daily report or 12 weeks in the Weekly report after the selected time range: Example Daily Report: Weekly Report:"
  },
  {
    "text": "At a glance: Prevent attribution of fraudulent activities by using the Apple install validation service for any iOS install (both organic and non-organic). Receipt validation flow The receipt validation flow is as follows: The AppsFlyer SDK gathers the Apple install receipt data and sends it with the launch message to the AppsFlyer servers. The AppsFlyer servers validate this receipt data via the Apple install validation service. If the Apple install validation service responds with error codes indicating that the install is invalid: The install is rejected and does not appear in our dashboard The ad network does not receive a postback or API call for the invalidated install The install and all the corresponding in-app events are logged in the Protect360 Raw Data Reports: Installs and Blocked in-app events. Notes The AppsFlyer iOS SDK version must be 2.5.3.15+ iOS devices with iOS version 7+ are supported for Install validation. There are cases where Apple does not provide install receipt data and as such, AppsFlyer considers this a valid install in terms of app store install validation. However, Protect360 can block this install due to other fraud reasons."
  },
  {
    "text": "At a glance: Reports listed are available to ad networks via Data Locker. Advertisers must give the ad network explicit permission. Reports available for ad networks Related reading: Data Locker for partners Report type (topic) Which data access permissions are required? Data freshness* Available to Aggregated campaign performance Aggregated conversions Aggregated in-app events Aggregated revenue Daily Ad networks Ad revenue signals for UA ad networks Access ad revenue raw data Daily Ad networks Blocked clicks & impressions No advertiser permissions required Daily Ad networks Failed click signatures No advertiser permissions required Daily Ad networks * Key to abbreviations Daily: Reports are streamed to the h=23 folder. These reports are typically available by 07:00-12:00 UTC in the h=23 folder of the preceding day. For example, the report for data generated on Monday is in the Monday h=23 folder. The data is available on Tuesday: For aggregated campaign performance: After 10:00 UTC. For ad revenue signals: After 21:00 UTC. For blocked clicks & impressions, and failed click signatures: After 07:00 UTC. Report availability and required permissions"
  },
  {
    "text": "At a glance: Learn about campaign properties and how they display in AppsFlyer Cost ETL data. About campaign properties Campaign properties are a special group of dimensions that represent various settings of an advertising campaign, including campaign objective, bid type, and bid amount. These are settings you normally view and edit in your ad network dashboard, but AppsFlyer pulls the campaign properties dimensions and makes the data available in Cost ETL, just as you view other dimensions. With campaign properties data, you can: See all bid changes made by your UA team. Measure and analyze the effectiveness of a bid change and whether it had the intended effect. AppsFlyer campaign properties data is available for Facebook and Google. See what data AppsFlyer pulls, and how it is normalized and mapped to each ad network, in the sections that follow. Facebook See what data AppsFlyer pulls, and how it is standardized and mapped to Facebook, in the table that follows. Dimension Description Campaign objective Pulled from: campaign.objective Cost model Pulled from: adset.optimization_goal AppsFlyer normalized cost model mapping Cost model Normalized cost model LINK_CLICKS POST_ENGAGEMENT REPLIES LANDING_PAGE_VIEWS CPC OFFSITE_ CONVERSIONS DERIVED_EVENTS LEAD_GENERATION CPA APP_INSTALLS CPI VALUE ROI REACH IMPRESSIONS SOCIAL_IMPRESSIONS CPM THRUPLAY VIDEO_VIEWS TWO_SECOND_CONTINUOUS_VIDEO_VIEWS CPCV Bid strategy Pulled from: adset.bid_strategy If there is no bid_strategy in the adset level, then: campaign.bid_strategy AppsFlyer normalized bid strategy Bid strategy Normalized bid strategy LOWEST_COST_ WITHOUT_CAP COST_CAP LOWEST_COST_ WITH_MIN_ROAS Auto bid TARGET_COST Target bid Anything else Unknown Bid amount Bid amount in advertiser currency Original bid amount Pulled from: adset.bid_amount Google See what data AppsFlyer pulls, and how it is standardized and mapped to Google, in the table that follows. Dimension Description Campaign objective Pulled from: campaign.advertising_channel_sub_type Note: The following fields population depends on the channel_sub_type: AC: APP_CAMPAIGN or APP_CAMPAIGN_FOR_ENGAGEMENT Non-AC: Every other value for channel_sub_type Cost model For AC, pulled from: campaign.app_campaign_setting.bidding_strategy_goal_type For non-AC, pulled from: campaign.bidding_strategy_type AppsFlyer normalized cost model mapping Cost model Normalized cost model AC OPTIMIZE_INSTALLS_TARGET_INSTALL_COST OPTIMIZE_IN_APP_CONVERSIONS_TARGET_INSTALL_COST CPI OPTIMIZE_IN_APP_CONVERSIONS_TARGET_CONVERSION_COST CPA OPTIMIZE_RETURN_ON_ADVERTISING_SPEND ROI UNKNOWN UNSPECIFIED Other Non-AC REACH ENHANCED_CPC MANUAL_CPC PERCENT_CPC TARGET_SPEND CPC MANUAL_CPM TARGET_CPM TARGET_IMPRESSION_SHARE CPM MANUAL_CPV CPCV MAXIMIZE_CONVERSIONS TARGET_CPA CPA MAXIMIZE_CONVERSION_VALUE TARGET_ROAS ROI COMMISSION PAGE_ONE_PROMOTED TARGET_OUTRANK_SHARE UNKNOWN UNSPECIFIED Other Bid strategy For AC, pulled from: campaign.app_campaign_setting.bidding_strategy_goal_type For non-AC, pulled from: campaign.bidding_strategy_type AppsFlyer normalized bid strategy Bid strategy Normalized bid strategy AC OPTIMIZE_INSTALLS_TARGET_INSTALL_COST OPTIMIZE_IN_APP_CONVERSIONS_TARGET_CONVERSION_COST Max bid OPTIMIZE_IN_APP_CONVERSIONS_TARGET_INSTALL_COST OPTIMIZE_RETURN_ON_ADVERTISING_SPEND Target bid UNKNOWN UNSPECIFIED Other Non-AC ENHANCED_CPC MANUAL_CPC MANUAL_CPM MANUAL_CPV Manual bid MAXIMIZE_CONVERSIONS MAXIMIZE_CONVERSION_VALUE PAGE_ONE_PROMOTED TARGET_IMPRESSION_SHARE TARGET_OUTRANK_SHARE TARGET_SPEND Auto bid PERCENT_CPC TARGET_CPA TARGET_CPM TARGET_ROAS Target bid COMMISSION UNKNOWN UNSPECIFIED Other Anything else Unknown Bid amount Bid amount in advertiser currency Original bid amount Pulled from: campaign.target_cpa.target_cpa_micros"
  },
  {
    "text": "At a glance: Learn how advertisers can attribute affiliate marketers and report relevant data back to them. Challenges Affiliate marketers can influence crowds and create a lot of traffic for app owners. However, compared with ad networks and owned media, working with mobile affiliate marketers is more challenging. Attribution links Click ad-networks don't require advertiser involvement; they use the single attribution link created by AppsFlyer. Advertisers working with affiliate marketers must create and distribute a OneLink custom link per affiliate. Reconciliation In AppsFlyer, ad networks are easily configured to receive app install and in-app event postbacks for their traffic. Reconciliation between ad networks and the advertiser is automatic and up-to-date. Affiliate marketers usually don\u2019t have the option to get postbacks from AppsFlyer, so the advertiser must carry out reconciliation with them periodically. Attributing affiliate marketers This section explains how advertisers successfully attribute and reconcile affiliate marketers who bring mobile traffic. To attribute an affiliate marketer: Manually prepare a specific OneLink per affiliate. See setup recommendations.OR Manually prepare a single OneLink and give each affiliate a specific param to append to the link to identify them. We recommend either the c (campaign) param or af_sub[1-5] params. For example: c=affiliate1 or af_sub1=affiliate1.OR Use OneLink API for links created in your systems. Recommended principals are the same as for manual OneLink setup. Setup recommendations The following describes the recommendations for manual custom link creation. However, the recommended principles also apply for using OneLink API. Go to OneLink custom links > Add custom link. Details tab Begin with the Details tab. Enter the affiliate name as the link name; it will be easy to recognize in the OneLink template list of links. Customize the short URL with the affiliate name; this can improve affinity with their followers. Attribution tab Now, follow these steps on the Attribution tab. Go to the Owned media source drop-down list. Select Custom and enter affiliates. This enables aggregating all affiliate traffic under one media source. Go to the Campaign name field. Enter the affiliate name.This enables you to easily see and compare all affiliates' data under the affiliates media source. [Optional] Add custom parameters to the link.Example: An affiliate uses a CRM system that gets postbacks. Therefore, you can add the postback URL as a custom parameter to the attribution link. Send the custom link to the affiliate marketer. Specific cases For a campaign that uses retargeting, read how to enable retargeting attribution for custom links. For a campaign that uses app-launching AND the affiliate advertises in social network apps, read how to create a landing page for social media apps. Reconciling with affiliate marketers There are 2 methods to reconcile with affiliate marketers: Method When to use Steps Periodic updates using AppsFlyer data Affiliate doesn't use a CRM system for receiving postbacksOR App-owner doesn't have enough developer resources Periodically (usually monthly): Go to the app Overview page. Select Media source > affiliates. Go to the Aggregated performance report table. Take a screenshot of the table. Highlight the campaign name of each affiliate and the corresponding success KPI (installs, clicks, revenue, in-app events, loyal users ratio, etc.). Share it with the affiliate. Note! If an affiliate brings user-acquisition traffic to more than 1 of your apps, use Custom dashboards to see all results on a single page. Real-time postbacks using app-owner systems Affiliate uses a CRM system for receiving postbacksAND App-owner has developer resources Use Push API to send new install data and/or in-app events to your servers in realtime. Parse the message and extract the custom parameter containing the affiliate URL. Activate the affiliate URL to notify the affiliate's CRM system of the new event."
  },
  {
    "text": "At a glance: Impact of iOS Limit Ad Tracking (LAT) on different types of UA media sources. Relevant only for devices before iOS 14. Related reading: Quickstart guide & FAQ to iOS 14, ATT, and SKAdNetwork Impact of LAT on attribution The purpose of iOS Limit Ad Tracking (LAT) is to improve user privacy. Before iOS 10, when users actively selected LAT, iOS sent a flag indicating the user\u2019s wish. However, Apple\u2019s IDFA identifier was still there and not all companies honored the requests (this is still the case in Android). Apple also allowed companies to use the ID for frequency capping, attribution, conversion events, estimating the number of unique users, advertising fraud detection, and debugging. Starting iOS 10 Apple sends a string of zeroes in place of the user IDFA. More than 99% of iOS users have iOS 10+, out of which 25% enable LAT. This article relates to those users. The figure displays, based on AppsFlyer analysis, that the percentage of iOS LAT users increased from 16% at the start of 2019 to 25% in the middle of 2020. Starting iOS 14, LAT is deprecated and has been replaced by ATT. The effect of LAT on attribution To understand the real effect of LAT on attribution and media sources let's look at three main cases: Media sources that can be attributed with Probabilistic modeling Media sources that don't support Probabilistic modeling attribution Apple Search Ads Measuring installs with Probabilistic modeling Starting iOS 14.5+ probabilistic modeling is limited to the context of owned media, cross-promotion, and consented web-to-app flows. 99% of media sources and 100% of custom attribution links for owned media use attribution links. LAT obviously affects attribution companies\u2019 ability to record installs using ID matching. The loss of 25% of attributed installs could be very troubling for app owners using these attribution links. Luckily, a fallback mechanism for ID matching can be used - Probabilistic modeling attribution. Probabilistic modeling is less accurate than ID matching, and therefore the attribution window is shorter, usually 24 hours. In mobile app install campaigns, the vast majority of the first app opens occur within 1-2 hours, in which case the Probabilistic modeling method is extremely accurate. However, some loss of attributed installs is unavoidable. Advertisers actually gain somewhat from this. When advertisers run on a cost per install (CPI) pricing model, and not on exposure (CPM) or clicks (CPC), they receive ~2.5% free organic installs! Measuring installs without Probabilistic modeling What happens when a LAT user clicks on an ad served by a media source that relies solely on ID matching - among them top sources such as Facebook Ads, Google Ads, and Snapchat? When that user installs and launches the app, the mobile attribution company\u2019s SDK cannot pull its IDFA, and so the media source is unable to perform ID matching and identify the user as their own. This results in a failed attribution and a free organic user for the app owner. This is true for CPI and CPA campaigns only, as media sources need to carve out their installs quota out of the 75% non-LAT users only, but still may serve ads to the 25% LAT users for free. This is a potential increase of about 33% (100/75) free installs for advertisers. It makes sense that these giants of mobile app advertising would soon reach a solution to minimize the effects of LAT and ATT on them. For example, such a solution could be to simply stop serving LAT users with mobile app install ads, or by implementing some Probabilistic modeling API. In conclusion, on CPI or CPA campaigns, media sources that do not support Probabilistic modeling may contribute up to 33% free installs to app owners. Apple Search Ads Apple Search Ads is a powerful source for paid installs for iOS app owners. In contrast with all other mobile media companies, Apple knows exactly who its mobile users are, even if they\u2019re LAT users since it can easily use the iTunes account ID. Apple Search Ads' attribution is therefore unharmed by LAT users, while AppsFlyer attributes them as organic users (or to another engagement, if it occurred). However, audience-targeted Apple Search ads campaigns don\u2019t serve ads to LAT users, so the problem is confined to non-targeted campaigns only. In conclusion, non-targeted campaigns on Apple Search Ads may bring a high percentage of non-attributed users. Note Apple users aged 18 and younger are always LAT. Summary The surprising conclusion from this analysis is that the introduction of LAT on iOS 10 has actually increased the percentage of non-organic installs app owners receive! In AppsFlyerdata, the added installs are unattributed and appear as organic installs. Note the following important tips: The app owner MUST buy CPI (or CPA) campaigns to enjoy this increase; CPM and CPC campaigns move the beneficial effect from the app owner to the media companies Media sources that do not use Probabilistic modeling (mainly SRNs) may contribute up to 33% free \"organic\" users, but don't count on it. Targeting in Apple Search Ads installs campaigns is very important as, without it, many paid users are not attributed. Caution As demonstrated, although Apple\u2019s LAT is good for app owners, it has the potential to harm ad networks\u2019 bottom line by forcing them to expose mobile app ads to more users than previously needed. The good news is that when mobile installs are recorded by an attribution company with a good Probabilistic modeling solution, the effect of LAT is rather marginal. Note Android has a similar limitation called \"Opting out of ad personalization\". However, currently, the LAT percentage in Android devices is marginal, with less than 2% of users."
  },
  {
    "text": "At a glance: Measure the quality of your users throughout their user journey by recording these suggested in-app events for your finance and banking app. Finance and banking Finance and banking apps provide users with the ability to perform a wide range of financial-related objectives, such as signing up for new credit cards or applying for loans. The typical events that we suggest recording include account openings, credit card applications, and loan applications. Recording these events can help you determine: What type of account users want the most, and provide you with ideas for retargeting What benefits users look for in a credit card What users need financial assistance for, and how much assistance they want Important! Make sure to read the instructions for marketers about implementing in-app events. To streamline the implementation process, use our In-app event generator. This tool includes all of the typical in-app events described in this article and lets you modify the events according to your business needs. Once complete, share the file with your developer. For each recommended event included in this article, there are code samples for iOS, Android, and Unity developers. Detailed instructions for your developer can be found in the AppsFlyer developer hub. For more information about recording in-app events, see the Rich in-app events guide. Recommended structures for predefined events The following section provides a list of event structures that are typical to the finance and banking vertical. Each structure includes a predefined event name and the suggested event parameters to use. Note that in-app events can include any event parameters that meet your business needs. Login (af_login) Purpose Understand the retention of your registered users Trigger When the user successfully logs in Event parameters Can be sent without any additional parameters Complete registration (af_complete_registration) Purpose Learn how many users installed the app and completed the signup process, and what signup methods your users prefer Trigger When the user completes the signup process Event parameters Name Description Example value af_registration_method Type of signup method Email, Facebook Recommended structures for custom events The following section provides a list of event structures that include custom event names and the suggested event parameters to use. Note that in-app events can include any event parameters that meet your business needs. Registration verified (registration_verified) Purpose Record this event and compare it with other data to learn more about your users. For example, you can learn how many users sign up but aren't accepted. Trigger When the registration is verified Event parameters Name Description Example value submit_registration Type of signup method verified. Do not enter personal identifiable information (PII). Email, Facebook Submit account application (submit_account_application) Purpose Record this event and compare it with other data to learn more about your users. For example, you can learn how many users sign up but do not apply to open an account. Trigger When the user completes the account application process Event parameters Name Description Example value account_type Type of account applied for savings application_method Where the application was made app PII_type Type of ID used during application passport Open account success (open_account_success) Purpose Record this event and compare it with other data to learn more about your users. For example, you can learn how many users apply for accounts and are accepted; and then try to improve the funnel or retarget those users later. Trigger When the user application is accepted and the account is opened Event parameters Name Description Example value account_type Type of account opened savings application_method Where the application was made app PII_type Type of ID used during application identification card Open account rejected (open_account_rejected) Purpose Record this event and compare it with other data to learn more about your users. For example, you can learn how many users apply for accounts but aren't accepted; and then try to improve the funnel or retarget those users later. Trigger When the user completes the signup process Event parameters Name Description Example value account_type Type of account applied for savings Credit card application (submit_credit_card_app) Purpose Record this event and compare it with other data to learn more about your users. For example, you can learn how many users apply for credit cards but are not accepted; and then use this information to improve your funnel or retarget them later. Trigger When the user submits an application for a new credit card Event parameters Name Description Example value credit_card_type Type of credit card applied for gold card application_method Where the application was made app PII_type Type of ID used during application passport Credit card application success (credit_card_application_success) Purpose Record this event and compare it with other data to learn more about your users. For example, you can learn how many users apply for credit cards and are accepted; and then use this information to improve your funnel or retarget the accepted users for other credit cards. Trigger When the user's credit card application is accepted Event parameters Name Description Example value credit_card_type Type of credit card applied for gold card application_method Where the application was made. app PII_type Type of ID used during application identification card Credit card application rejected (credit_card_application_rejected) Purpose Record this event and compare it with other data to learn more about your users. For example, you can learn how many users apply for credit cards but are not accepted; and then use this information to improve your funnel or retarget the users for other credit cards. Trigger When the user's credit card application is rejected Event parameters Name Description Example value credit_card_type Type of credit card applied for gold card Credit card activation (credit_card_activation) Purpose Record this event and compare it with other data to learn more about your users. For example, you can learn how many users get a credit card but do not activate it; and then use this information to improve your funnel or retarget the users. Trigger When a user activates their new credit card Event parameters Name Description Example value credit_card_type Type of credit card applied for gold card application_method Where the application was made app PII_type Type of ID used during application identification card Submit loan application (submit_loan_application) Purpose This event can help you: Determine the overall number of loan applications in your app Learn about the maximum, minimum, and average amount in loan applications Determine the type of loans people apply for Trigger When the user successfully submits a loan application Event parameters Name Description Example value loan_id ID of the loan 1735102 loan_type Purpose of the loan housing loan_amount Amount requested 1000 loan_period Loan period 3 months Loan accepted (loan_accepted) Purpose Learn about trends in loans and other metrics. This event can help you determine: What type of loans are accepted The amount requested in loans that are approved Which lenders accept the most loans Trigger When a loan is accepted Event parameters Name Description Example value loan_id ID of the loan 1735102 loan_type Purpose of the loan housing loan_amount Amount requested 1000 loan_period Loan period 3 months Loan rejected (loan_rejected) Purpose Understand the reasons why loans get rejected. You can see the correlation between the amount and loan period and rejection rates. You can also retarget users whose loan gets rejected and suggest they take a smaller loan. Trigger When a lender rejects a loan Event parameters Name Description Example value loan_id ID of the loan 1735102"
  },
  {
    "text": "At a glance: Attribute mobile users to TV ads aired in specific locations and at specific times. Attributing TV ad campaigns Advertisers running install ads on TV can define the timeframe (in minutes) they want organic installs from a specific GEO or city (optional) to be attributed to a TV ad. These installs are attributed to the TV media source with the associated campaign details populated by the TV channel and the TV show name. To set up TV attribution, advertisers should create a CSV file containing the exact details of the aired ads. Alternately, advertisers can use the help of partners that enable TV attribution via their services.To view the list of these AppsFlyer integrated partners, go to Integration > Integrated Partners. Select TV in the filter panel. Post-install analytics are available in the same manner as for other media sources. Attributed installs populate attribution fields as listed in the following table. Attribution field API name Populate with Media source media_source TV (always) Campaign campaign Campaign name Site ID af_siteid TV channel name. Example: ESPN Sub Param 1 af_sub1 TV show name. Example: SportsCenter HD Country country Country code City city City name Tip Check out our comprehensive guide on OTT television to learn about advanced TV terminology, buying methods, content formats, how OTT attribution works Setting up a TV campaign AppsFlyer supports bulk upload of media plans using the TV attribution upload file having a CSV format according to the schema that follows. Example CSV file. To upload the file, please contact your customer success manager. TV schedule schema File schema for TV schedule uploads. Optional columns must be sent, but the fields could be left empty. Avoid setting the same time slot for two separate campaigns of the same app. Column name Mandatory Remarks Example app_id Yes Each file can be related to one app only. Don't send multiple app IDs in the same file. Note that for TV campaigns targeting both Android and iOS users, you must send a separate file for each app platform. com.example, id123456789 Campaign name No Especially useful if you have several ad formats and wish to A/B test them. 10-sec teaser, full 30-sec TV channel name No CWTV TV show name No Arrow Start date Yes Format:yyyy-mm-dd format The time and date must be in the future 2020-01-15 Start time Yes The starting hour for the TV attribution window. The time should be in 24h format in the UTC time zone.Required format:hh:mm The time and date must be in the future 13:30 Attribution window Yes TV attribution windows have a maximum duration of 180 minutes. The TV campaign is attributed if the user launches the app for the first time during the attribution window. 20 Country code Yes 2 letter country code. List of country codes. US, CN City name No City name as appears in the List of supported cities.If this value remains empty in the CSV file, users from the entire country can be attributed to the TV campaign. London Shazam An ad on TV (or radio) can be Shazamed with the app, and the user who Shazams it is redirected to the market as if clicking on a specific URL. This URL may contain parameters to identify the specific ad, which can be reached via the conversion data."
  },
  {
    "text": "At a glance: Use AppsFlyer to A/B test media sources, campaigns, creatives, targeting, and ad placement. What is A/B testing? A/B testing is a method used by marketers to test different elements of their ads and campaigns. Each ad contains elements (targeting, visual, texts), which may affect the conversion rates of potential users. Finding the best performing variations of your ad elements may have a significant impact on the bottom line of your mobile marketing efforts. This article explains how advertisers can perform A/B tests using AppsFlyer, to find the best performing ad elements. How to A/B test mobile campaigns To A/B test an element, split your mobile traffic 50/50 between two sources showing the identical offer. Next, create two variations of the element that you want to test. After sufficient traffic has flowed through, you can compare the results of your existing version (control) to the new version (variation). The following steps apply to an A/B test you run using AppsFlyer. Setup: Select the element to test.In this article, we explain about A/B testing creatives, ad placements, media sources, and campaigns. Create two identical campaigns (or ads), and then vary a single element within the ad. For example, call-to-action button copy. To test the impact of the variation on install conversion rates, split the traffic equally between the two campaigns.If full impression data is available for both sources, divide installations by impressions to calculate the install conversion rates. To test the impact of the variation on the quality of users, post-installation, you can send different amounts of traffic to the two campaigns. Drive sufficient traffic to each campaign to reach statistical significance, that means at least 50 installs per campaign. Use theA/B testing significance calculator. Analysis: Use AppsFlyer's dashboard and data to compare the performance of the key KPIs between the two campaigns. Select the winning variation and use it in your live campaigns. A/B testing creatives and targeting Creatives contain many elements with varying impact on user conversion rates, including copy, images, colors, fonts, buttons, etc. Targeting parameters, like country, age, or gender, may also have a major impact on conversion rates. And for iOS 15+, you can also have up to 35 custom product pages. A/B testing these elements can help you find which factors have the biggest impact on improving user conversion rates. Below we explain two methods of A/B testing using: A single media source Multiple media sources Method Pros Cons A/B testing with a single media source Quick setup Easy to test install conversion rate Results may only apply to users of the specific media source May take longer to test A/B testing across multiple media sources Fast results Results apply to users from all media sources Need to update attribution links in multiple places Method 1: A/B testing with a single media source Setup: Select a trusted media source with sufficient traffic. Create two campaigns or Smart Banners in AppsFlyer by using one of the following methods: Vary the campaign that is the name that is \"c\" parameter in the attribution link. Alternately you can create two ad sets (\"af_adset=\") within a campaign or single ads (\"af_ad=\") within an ad set. Note: In Smart Banners, you can also A/B test by putting different parameters for each banner within the same banner group. For iOS 15+, you can also test the efficacy of different custom product pages, by sending different OneLink URLs to different product pages. Learn more Use the same creative in both campaigns, except for the tested variation. Send the same amount of traffic to both campaigns. Analysis: Compare KPIs (for example, install conversion rate, ROI, ARPU, loyal user rate) of the campaigns in the Overview dashboard page. Method 2: A/B testing across multiple media sources Setup: Select a subscriber parameter to hold the variation value.For example, to test 2 CTA text variations you can use af_sub1=\"install now\" or af_sub1=\"please install\". More about subscriber parameters and a creative test example here. Add the subscriber parameter with the matching value to every live attribution link. It's recommended to use the same creatives in all campaigns, except for the tested variation. Analysis: Download the installation or in-app events raw data reports. Use your selected subscriber parameter column to filter and sort your data. Compare the performance of creatives with either of the 2 stored values. A/B testing ad placement on mobile web The location of banners for your apps on mobile websites may significantly impact user conversion rates. In most cases, advertisers use their own mobile websites to convert visitors into mobile users. With the AppsFlyer Smart Banners feature, you can set up mobile web banners quickly and easily. In addition, the feature also enables you to easily run A/B tests to determine the best placement for converting website visitors into mobile users. Setup: Implement Smart Banners in your mobile website. For each new visitor, determine whether to show the banner at the top or bottom of the page. Make sure to split the traffic 50/50 between the two.Developer Tip - A simple method for splitting your website traffic is to use a visitor counter, and then check whether the counter value is odd (option A) or even(option B) for each new visitor. Set the banner location and attribution link according to the determined location using the Smart Banners' SDK API ShowBanner.Example: showBanner({ bannerContainerQuery: \"#document.body\", additionalParams:{ af_sub5: \"top\"}}) Analysis: Download the raw data reports for installs or in-app events. Use your selected subscriber parameter (e.g. af_sub5) column to filter and sort your data. Compare the performance of the two ad placements, i.e. which placement got more installs or post-install events. A/B testing media sources Helping advertisers identify the best (and worst) performing media sources for their apps is what AppsFlyer was built for. However, if advertisers fail to compare media sources correctly, they risk reaching the wrong conclusions about traffic quality. Setup: Create a single ad creative for BOTH media sources. Define an ad for each media source, with the same exact audience targeting parameters. You can send different amounts of traffic to the 2 media sources. Analysis: If the ads being tested are the only ones running on both media sources, use AppsFlyer's dashboard and data to easily compare your key KPI between the two sources.Otherwise: Go to AppsFlyer's Retention Report, Cohort Report, Master API or Pivot Table. Group by Media Source -> Campaign -> Ad set -> Ad. Compare KPIs to identify the top-performing media source. Example 1 and 2 are different ads on the same media source. Compare a single KPI for them, for example, retention day 4 rate, to A/B test creatives, targeting, or ad placement. 2 and 3 are ads on different media sources. If the creatives and targeting of the ads are identical, comparing a single KPI enables A/B testing the media source. Using audiences split for easy A/B testing of media sources If you set the same targeting parameters for each media source, the test includes the targeting abilities of the networks. When A/B testing, it\u2019s best to test a single variation each time. As a result, it's advisable to eliminate the differences in targeting abilities, when A/B testing other factors in the performance of networks. To achieve this, we recommend splitting an audience randomly and targeting both audiences with the same creative, on each tested network. AppsFlyer offers an easy method for defining, splitting, and automatically distributing audiences between different media sources. Read about ithere."
  },
  {
    "text": "At a glance: Configure your user identifier policy to exercise account-level control over the data Audiences shares with partners. Background Once you have defined an audience, AppsFlyer Audiences sends identifiers for the members of that audience to your selected advertising partners. This enables them to serve your ads only to these users. In order to enable compliance with the privacy requirements of iOS 14.5 and other user privacy considerations, Audiences allows you full control to determine which identifiers are shared with partners: at the account level at the partner-connection level This article explains the process for managing your user identifier policy at the account level. For more information about managing the identifiers shared at the partner-connection level, see the Manage connections section of the Audiences guide. User identifiers By default, Audiences shares the following identifiers with partners: iOS: IDFA (on iOS 14.5 and above, available only if a user permits sharing this identifier) Android: GAID Some advertising partners also support the following identifiers: Email (hashed) Phone number (hashed) OAID and IMEI (both relevant only for non-Google Play Android stores) Certain other additional identifiers can be useful for your internal processes (such as CRM or analytics): CUID IDFV (relevant only for iOS) For additional information (including requirements for using specific identifiers in AppsFlyer), see the identifiers table below. Identifiers table Identifier OS Shared by default? Requirements for use/Notes IDFA iOS See note(right) By default, only shared for users with ATT status: authorized or not determined GAID Android Y None OAID Android(non-Google Play) N Must be configured in the AppsFlyer SDK IMEI Android(non-Google Play) N Must be configured in the AppsFlyer SDK CUID iOSAndroid N Generated by the advertiser and reported to AppsFlyer using AppsFlyer APIs or SDKs Not shared with advertising partners, but can be useful for your internal purposes Subject to the Additional Identifiers Terms of Use IDFV iOS N Not shared with advertising partners, but can be useful for your internal purposes Subject to the Additional Identifiers Terms of Use Email (hashed) iOSAndroid N Must be configured through the AppsFlyer SDK or S2S-mobile API Must be encrypted with SHA256 hashing Subject to the Additional Identifiers Terms of Use Phone number (hashed) iOSAndroid N User identifier policy options iOS Starting with version 14.5, iOS requires that every app offer the user an option to allow/disallow sharing of their IDFA device identifier for advertising purposes (App Tracking Transparency). Whether or not a user has seen and responded to this option (the \"ATT consent dialog\") determines a user's ATT status. Audiences policy options for sharing identifiers in iOS are based on a user's most-recent ATT status, as follows: User policy option Corresponding ATT status Never upload This identifier is not uploaded to partners ATT status: authorized only The identifier is uploaded if the most recent ATT status is authorized or af_authorized ATT status: authorized or not determined The identifier is uploaded if the most recent ATT status is authorized, af_authorized, not_determined, or af_unavailableDefault option for IDFA, starting with Apple's release of iOS 14.5 Always upload The identifier is uploaded independent of ATT status. Ensure compliance with your app\u2019s terms of use.Option unavailable for IDFA Note: Audiences treats a new user's ATT status as not determined until they have seen and responded to the ATT consent dialog. For detailed ATT status definitions, see: Apple ATT status definitions AppsFlyer ATT status definitions (af_authorized, af_unavailable) Android Policy options for Android environments are somewhat less complex. Simply turn on the identifiers that Audiences is authorized to share, and turn off the identifiers it is not. Setting account-level user identifier policy User identifier policy can be set only by an admin user. To set or modify your policy, follow these steps: On the Audiences dashboard, click the settings (gear) icon in the top right corner. In the User identifier policy window, select the settings that comply with your organization's privacy policies. If you elect to allow sharing of identifiers other than IDFA, GAID, OAID, and IMEI, you must first review and accept the Additional Identifiers Terms of Use. If you elect to disallow identifier(s) that are uploaded by existing partner connections, you will be asked to confirm that you wish to stop uploading these identifiers. Click Save. Changes to your IDFA policy will take effect starting with Apple's release of iOS 14.5. All other changes to your user identifier policy will take effect starting with the next upload to partners."
  },
  {
    "text": "At a glance: Resolve Twitter Ads FAQs and understand discrepancies. Related reading For a complete picture of working with Twitter Ads in AppsFlyer, check out these articles: Twitter Ads setup guide\u2014overview Twitter Ads setup guide\u2014integration and setup Twitter Ads setup guide\u2014FAQ and discrepancies (this article) Twitter Ads FAQ and discrepancies Who can perform the Twitter setup on AppsFlyer? The user who is authorizing the integration between AppsFlyer and Twitter must have Twitter Account Administrator access. What happens if no Twitter accounts are selected for attributing on AppsFlyer? All attributions are for campaigns on the selected account. If no accounts are selected, no in-app events or attributions are sent to Twitter, even if the in-app event mapping is still visible on the Twitter Configuration window. Do the account owner and the team members see the same Twitter data? No. The account owner sees all of the connected Twitter accounts. Team members only see their connected Twitter accounts. How do I disconnect Twitter from AppsFlyer? You can disconnect AppsFlyer from your Twitter account. The following instructions assume that you are logged into your Twitter account using a desktop or laptop browser: Sign in to Twitter. On the left menu, click More> Settings and Privacy. Go to Security and account access > Apps and sessions > Connected apps. Click AppsFlyer. Click Revoke Access. You can now go back to your AppsFlyer account and connect a different Twitter account if you want. Is it possible to attribute installs to multiple Twitter accounts? Yes, but it requires some actions on Twitter's end. But first some background is required: You can connect only one handle(also known as a twitter user) to your AppsFlyer account. When you connect this handle, your Twitter Ads Account appears in the Twitter configuration in AppsFlyer dashboard. If one of your team members also has a Twitter Ads Account, this means that they have a different handle than yours and cannot connect their handle to AppsFlyer. This is because your handle is the one that is already connected with the AppsFlyer account. In order for their Twitter Ad Account to also appear in AppsFlyer, they need to give your handle access as account administrator to their Twitter Ads Account. Say your team member is Jenny and her handle is @jenny. Your handle is @nivi and is the handle that is connected to AppsFlyer. In order for her Twitter Ads Account to appear in the AppsFlyer account, she needs to give your handle access as account administrator to her Twitter Ads Account. Jenny needs to give access to Nivi to her Twitter Ads Account and not that other way around. When she does so, AppsFlyer looks at Nivi's handle, and sees all the ad accounts that it is associated with, Jenny's included. Jenny signs into ads.twitter.com She clicks on Account and then chooses Edit access to account Jenny then gives @nivi access to her Twitter Ads Account as or Account administrator Jenny logs into the AppsFlyer account and goes to Integrated Partners >> Twitter option At this stage, she can see her Twitter Ads Account also listed. She can now see her Twitter Ads account and configure the integration. The account admin can see all connected Twitter Ads accounts. Jenny's view: Account admin view: Any special instructions for agencies? Yes.When an agency creates a new Twitter campaign, the campaign name must start with the agency name and an underscore (Example: \"AgencyName_Campaign1\"). Note To establish the connection between AppsFlyer and Twitter, the advertiser MUST configure Twitter to allow agencies to run Twitter traffic. For more details go here. Do you make Twitter's raw data available to agencies? We don't provide Twitter raw data to agencies because in the Twitter terms of service regards agencies as third-parties. I'm clicking save & close but Twitter's configuration is not saved! help! If your app was subscribed to another attribution provider in the past, which was used to attribute Twitter installs, the following errors below when configuring Twitter on AppsFlyer's dashboard: Error: The app is associated with a different attribution provider. Please associate it with AppsFlyer. Alternatively, the following error may also appear: Error: Error has occured while saving Twitter configuration. Some accounts failed to updated: XX Multiple provider ids to same (appid, conversionType) for event appid2872. If the account selection does not save, this may be because the Twitter account in question was previously associated with a different provider at Twitter's end. To resolve this: Contact Twitter to remove the other provider from your end Select the Active Account name Click Save and Close. If this still doesn't solve the problem you will have to contact your previous measurement provider and ask to remove the past Twitter tags associated with your account. How can I set up retargeting campaigns with Twitter? For details of how to configure a Twitter Retargeting Campaign, click here. Does retargeting affect in-app events sending to Twitter? Yes. If retargeting is turned on, AppsFlyer doesn't send the af_app_opened event postbacks to Twitter, as per Twitter's request.Note that even if the Twitter setup window allows this selection, the af_app_opened postbacks are not sent with retargeting. How can I stop measuring Twitter attributions? To deactivate the integration with twitter, uncheck all accounts and click Save & Close. Can an agency measure Twitter attributions for advertisers? Yes!To establish the connection between AppsFlyer and Twitter, the advertiser MUST select an active account in Twitter's partner page in AppsFlyer's dashboard, so at least one Twitter account is checked.Afterwards, the agency needs to connect its Twitter account directly from its own agency dashboard. Can an agency configure in-app events for Twitter? Agencies cannot configure in-app events for Twitter. Similar to Facebook, these must be configured by the Advertiser. For how long do you keep Twitter\u2019s user-level data? Twitter requires attribution providers to delete its user-level data 3 months after the install. This means that the events performed by these users 3 months after they install the app are counted as organic. Past aggregate data remains the same. Why do I see duplicated cost data? When you set up a campaign in Twitter, you can add multiple apps to the campaign. When Twitter reports the cost, the total campaign cost data displays under each app in AppsFlyer, and is not divided per app. For example, if you run one campaign that costs $1,000 for both an Android and iOS app, then a cost of $1,000 displays in the AppsFlyer dashboard under both the Android and iOS apps. The cost is not split, for example, to $500 each. To avoid cost duplication, it is recommended that you define only one app per line item/campaign. I'm trying to link my Twitter account with AppsFlyer, but I get an error message Your Twitter account needs to be an active Ad Account to receive attribution data from AppsFlyer. To solve this issue: Log out of Twitter. Go to Integrated Partners. in the Search Field, type \"Twitter\" Click on the Twitter icon,the partner setup window opens. In the Integration tab, click on Activate partner. Click on Login with Twitter,a Twitter login window opens. Sign in with your Twitter Ad Account. Discrepancies between Twitter and AppsFlyer Although we work closely with Twitter, discrepancies might appear between the Twitter dashboard and the AppsFlyer dashboard/reports. These are the common reasons for such discrepancies that advertisers should be aware of: Cause Twitter AppsFlyer Attribution window Twitter allows its users to configure the attribution window and supports both click-through and view-through attributions. By default - 14 days click-through and 1 day view-through. If you have not configured the AppsFlyer attribution lookback window for Twitter with the same values as in Twitter, discrepancies may occur. Multi-channel source attribution Twitter's attribution works as specified above regardless of other sources. AppsFlyer uses last click attribution (more information about AppsFlyer attribution available here). Timezone differences Twitter's timezone is defined by the advertiser's app configured timezone. AppsFlyer's default timezone is UTC\u00b100:00, but can be set to any timezone by the advertiser. Install time differences Twitter shows installs based on the click time (referred to as \"engagement time\"). AppsFlyer displays the time of the first app open. Attribution touch type Twitter's attribution is based on their own clicks and impressions. AppsFlyer gives priority to click-through attribution over view-through attribution. If Twitter counts an impression and AppsFlyer is aware of an additional click within the click-through attribution window, the click from another source is attributed on AppsFlyer's dashboard. On Twitter, the impression is attributed and is presented on their dashboard. Twitter data sharing settings Twitter allows its users to NOT share their personal data with third parties. This data includes ads they interact with. The stats on Twitter dashboard reflect all engagements, including the users who have opted out from sharing the data. AppsFlyer shows the aggregate data of these Twitter users, but does not report their user-level raw data (more details). Twitter re-engagement logic Twitter counts unique users. If a user re-engages more than once as a result of the same campaign, Twitter shows these engagements as one conversion. AppsFlyer counts each re-engagement instance, and therefore, in a similar case, shows these engagements as multiple conversions. Note As a result of AppsFlyer's Validation Rules, results may differ in the dashboards as some installs are shown in Twitter and are not shown in the AppsFlyer dashboard."
  },
  {
    "text": "At a glance: Work with the reports you have set up in the Data Clean Room (DCR). Introduction This article covers working with the reports you have already created. You can the full list of these reports and their status in the Reports tab of the DCR.If you are looking for instructions on creating new DCR reports, you can find them in these articles: Creating Attribution data reports Creating In-app event reports Editing or deleting a report To edit a report: Go to the Reports tab of the Data Clean Room. In the list of reports, hover over the row of the report you want to edit. Click the edit button that displays on the right side of the row. On the Edit report page, make changes to the report settings as necessary. Report name can not currently be edited. To edit the report destination: Scroll down to the Report destination section. Click the edit button next to the current report destination. Make the necessary changes in the Report destination dialog. Click Apply to implement your changes. Click the Update button to save the report with the new settings or click Discard changes to undo your changes. To delete a report: Go to the Reports tab of the Data Clean Room. In the list of reports, hover over the row of the report you want to delete. Click the delete button that displays on the right side of the row. In the dialog, confirm that you want to delete the report."
  },
  {
    "text": "At a glance: Integrate AppsFlyer into games developed in Unreal Engine to measure app installs, in-app events, media sources, and more. The Unreal Engine lets you develop state-of-art mobile games that your users will never forget and will keep coming for more. With the help of AppsFlyer, you can now measure and analyze your marketing efforts as you work to promote your games. Here are just some of the things you can do with the AppsFlyer Unreal Engine plugin: Measure how many users install your game See which media sources bring the most users See which media sources bring thebest users Record and measure user activity to determine which users generate the most revenue To learn more about the AppsFlyer Unreal Engine plugin and how to implement it, follow the instructions on our GitHub repository."
  },
  {
    "text": "At a glance: Learn what mobile advertising attribution is and how AppsFlyer helps marketers pinpoint their targeting, optimize their ad spend and boost ROI. What is app attribution? App attribution determines which campaigns, partners, and channels drive your app installs and post-install events, such as in-app purchases. Marketers rely on these insights to measure and optimize marketing activities for both user acquisition and retargeting campaigns. Related reading:Mobile attribution|CTV attribution What can you do with AppsFlyer? Get started To get started with AppsFlyer, proceed to our step-by-step guide."
  },
  {
    "text": "At a glance: Get detailed organic search attribution data, as well as keyword data that lets you see which search terms are most popular, so you can optimize organic conversions. Organic search attribution Use organic search attribution to attribute existing users who re-engage with your app after an organic web search. To set up attribution: Give your app Android and iOS app developers the domain associated with your app. For Android, this means the domain with Android App Links configured to open the app for existing users. And for iOS, this means the domain with Universal Links is configured to open the app for existing users. Tell the developers what value to use for the media source (pid) parameter. For example: search_engine. Tell your developers to follow their Android App Links and iOS Universal Links instructions.Any installs from organic searches will display with the media source value you chose. For example: search_engine. Tip! Learn about search engine usage breakdown by geo Keyword data Organic search is a valuable traffic source for your apps. Organic users don't incur acquisition costs and are usually among the most engaged cohorts. With a few tweaks to your app page, it is possible to increase the amount of new organic installs. To optimize organic searches, you need to get organic keyword data for your app. iOS keywords If you work with Apple Search Ads, you can get detailed keyword data for your non-organic users attributed to Apple Search Ads. In iOS, organic keyword data is not available. Android keywords Google shares organic keyword data (on the Referrer URL) for users that do the following: Use Android devices Use Chrome browser Visit Google.com and perform a search Install an app from the Google results page Launch the app The SDK extracts the keywords when provided by Google in the &utm_term parameter of the referrer if it is part of the link to Google Play. The values where possible are contained in the following AppsFlyer raw data fields: http_referrer, gp_broadcast_referrer, keywords. Expect that less than 1% of organic Android users follow this funnel and have organic keyword data. In other scenarios, Google does not share organic keyword data. For example, users searching in Google Play don't have organic keyword data. Note This limitation is applied by Google to all external vendors, including all attribution vendors. Using thekeyworddata Organickeyworddata is found in the following: Raw organic data reportsGo to the Export data page to view the breakdown of used organic keywords. Advanced reports Go toPivot, Retention, and Cohortreports and group by keywords.Compare the quality of organic users based on theirkeywords. Push API messages Testing organickeyworddata Use an allowlisted Android device. Open Chrome browser and go toGoogle.com. Use a strong keyword to search for your app.This example uses \"hotels tonight\". ClickInstallto be redirected to the Google Play Store. Install and launch the app. Search for the keyword in the AppsFlyer sources describedabove."
  },
  {
    "text": "At a glance: Starting with AppsFlyer Android SDK V6.8.0, the AD_ID permission is declared in the SDK's AndroidManifest.xml. Background In early 2022, Google announced a change to the behavior of Google Play Services and fetching of the Android Advertising ID. According to the announcement, apps targeting Android 13 (API 33) and above will have to declare a Google Play services normal permission in their manifest file in order to get access to the device\u2019s Advertising ID. The permission is granted to the app at install time and does not trigger any user interaction. What's changing Starting with AppsFlyer Android SDK V6.8.0, the AD_ID permission is declared in the SDK's AndroidManifest.xml. When the app is built, the SDK\u2019s manifest merges with your app\u2019s manifest by default, and the permission is added even if the app doesn\u2019t explicitly declare the permission. If the permission exists in both the app and the SDK, this works just fine\u2013there will be no collision. What you must know If you are using SDK V6.8.0 and have the AD_ID permission in your app\u2019s Manifest, you can optionally remove it from the manifest and let the SDK add it for you. If you are using SDK version older than V6.8.0, and your app is targeting Android 13 (API 33) and above, you should add the AD_ID permission to your app in order to allow the SDK to gain access to the Advertising ID. Kids Apps: According to Google\u2019s Policy, apps that target children must not transmit the Advertising ID. If you're building an app for kids and you are using SDK V6.8.0 and above, you must revoke the AD_ID permission. See developer instructions here."
  },
  {
    "text": "At a glance: Measure push notification campaigns on both iOS and Android. Overview AppsFlyer supports the measurement of push notification campaigns from all push providers, as well as campaigns implemented directly on top of Firebase Cloud Messaging or Apple Push Notification Services (APNS). There are 2 possible ways to implement the integration: By utilizing OneLink templates (recommended). By sending a JSON object with an af keyin the push notification's payload (legacy). The conversions display in the Overview dashboard, in the retargeting or unified views. How does it work? Once you've completed the steps in this article, your app will work as follows: You trigger a push notification that contains a OneLink template or an af key in its payload. The app user receives the push notification and clicks on it. The app loads and the AppsFlyer SDK starts. The SDK processes the payload of the push notification that opened the app. The SDK extracts and sends the attribution data to AppsFlyer. In the OneLink scenario, if the OneLink is configured to route the user to a specific location in the app, the deep link flow is triggered. Prerequisites Before continuing, make sure that your app has the AppsFlyer SDK integrated and can receive push notifications. Steps To set up push notification measurement, the following steps must be completed: Create a push notification that contains a custom data key with the OneLink template or an af key with a JSON object as its value. Configure the SDK to resolve the custom key (done by the app developer). Test the integration by triggering a push notification. View push notification campaigns performance in the dashboard. 1. Creating the push notification First, create a push notification that contains attribution data using one of the following methods. Note In the following demonstration, we're using Firebase as the push provider. The instructions should be applicable to any push provider, with minor differences (if any). Consult the respective push provider's documentation. Using OneLink (recommended)Using JSON (legacy) Using OneLink (recommended) This is the recommended method of integrating AppsFlyer with push notifications. Create a OneLink template and set it up for Retargeting.Note: OneLink short and long URLs are both supported. In the push notification custom data, add the OneLink that contains the attribution data you want to send to AppsFlyer. Firebase example In Firebase: Using JSON (legacy) Note The following documents the legacy method of integrating AppsFlyer with push notifications, and is available for backward-compatibility purposes. If you\u2019re setting up a new app, use the recommended OneLink-based solution. In the push notification's custom data, add a custom key called af that contains the attribution data you want to send to AppsFlyer in JSON format. The following attribution parameters are required: pid is_retargeting c Firebase example In Firebase: 2. Configuring the SDK This task requires changes to the app code. Follow the instructions on how to configure the SDK: When implementing the recommended OneLink-based solution: let the app developer know what's the name of the custom key you added to the notification. In this example, it's af_push_link. Send them these instructions. When implementing the legacy JSON-based solution, send your developers these instructions. 3. Testing the integration To test that push notification measurement is integrated correctly, simply trigger a push notification in the campaign you set up in Step 1. If everything is configured properly, the SDK will: Listen to push notifications. Process the attribution data embedded in the push notification and send it to AppsFlyer. Proceed with the regular deep linking flow, if push notification measurement is implemented using OneLink. 4. Viewing push notification campaigns in the dashboard You can see data originating from push notifications in the Retargeting dashboard. Note: AppsFlyer deduplicates push notification data. Meaning, if identical payloads are received more than once, only one is counted."
  },
  {
    "text": "At a glance: Avoid attribution data discrepancies by understanding and setting click and impression definitions across your media sources. Most top media sources report to AppsFlyer two types of engagements: clicks and views. However, the definition of clicks and views vary between sources. This article highlights and compares the criteria used by leading media sources to report clicks and views (impressions). The information presented here is provided by the partners themselves. This article covers only first-party media sources with owned real estate or SDK traffic, who control the rendering of ads. Facebook Ad type View Click Interstitials and banners An ad unit is rendered but not necessarily in view A click that takes the user directly to the app store Rewarded videos The ad unit is at least partially visible* A click that takes the user directly to the app store Playable ads The ad unit is at least partially visible* A click that takes the user directly to the app store Standard video The ad unit is at least partially visible* A click that takes the user directly to the app store *A view is recorded the moment the ad unit enters the screen, that is, when at least 1 pixel of the ad unit appears on the screen. The previous information refers to ad units under the campaign objective Mobile App Installs or Mobile App Engagement. For other objectives, a click can be reported for an action that does not take the user to the app store; for example, comment, share, video play or link click. Read more Google Ad type View Click Interstitials and banners (can include video) 50% of the ad unit is visible for a minimum of 1 second A click that takes the user directly to the app store, or a video that is watched for at least 10 seconds Rewarded videos The video is watched for 2 seconds or to 50% completion A click that takes the user directly to the app store, or a video that is watched for at least 10 seconds Playable ads 50% of the ad unit is visible for a minimum of 1 second A click that takes the user directly to the app store In-stream video 50% of the ad unit is visible for a minimum of 2 seconds A click that takes the user directly to the app store, or a video that is watched for at least 10 seconds Note, that in the Google Ads dashboard, a video view of 10+ seconds on Google Display Network or YouTube is reported as an engaged view, instead of a view or a click. Engaged view conversion is recorded in a specific lookback window set by the advertiser, and dependent on the type of the campaign. More information on engaged view default lookback windows and how to set them up. More information on Google\u2019s video ad formats. More information about reporting engagements. Snapchat Ad type View Click Interstitials and banners 100% of the ad unit is visible A click that takes the user directly to the app store Rewarded videos N/A N/A Playable ads N/A N/A Standard video N/A N/A Note, that this information refers to Snap Ads. For other ad types such as Story, Lens, and Filter, a click may be reported for an action that does not take the user to the app store, e.g. tapping a story tile, saving a lens to memories, interacting with a filter for more than the median interaction time, etc. Fyber Ad type View Click Interstitials and banners N/A A click that takes the user directly to the app store Rewarded videos 100% of the video is watched A click that takes the user directly to the app store Playable ads N/A A click that takes the user directly to the app store Standard video 100% of the video is watched A click that takes the user directly to the app store AppLovin Ad type View Click Interstitials and banners 100% of the ad unit is visible A click that takes the user directly to the app store Rewarded videos The video has started playing A click that takes the user directly to the app store Playable ads The playable element is launched A click that takes the user directly to the app store Standard video The video has started playing A click that takes the user directly to the app store AdColony Ad type View Click Interstitials and banners 100% of the ad unit is visible A click that takes the user directly to the app store Rewarded videos The video has started playing A click that takes the user directly to the app store Playable ads The ad unit is visible for 30 seconds A click that takes the user directly to the app store Standard video The video has started playing A click that takes the user directly to the app store Vungle Ad type View Click Interstitials and banners N/A N/A Rewarded videos 100% of the video is watched A click on the ad unit that takes the user directly to the app store* Playable ads The ad unit is visible A click on the ad unit that takes the user directly to the app store* Standard video 100% of the video is watched A click on the ad unit that takes the user directly to the app store* * Although this is the default behavior, advertisers can determine the point at which clicks and views are reported to AppsFlyer for each individual ad unit. For example, it can be configured that the user is redirected to the app store after completion of the ad experience with the agreement of both the advertiser and publisher. Tapjoy Ad type View Click Interstitials and banners N/A N/A Rewarded videos The video has started playing A click on the ad unit that takes the user directly to the app store, or a view that automatically directs the user to the app store Playable ads The playable element is launched A click on the ad unit that takes the user directly to the app store, or a view that automatically directs the user to the app store Standard video The video has started playing A click on the ad unit that takes the user directly to the app store, or a view that automatically directs the user to the app store Chartboost Ad type View Click Interstitial static N/A A click that takes the user directly to the app store Interstitial video & Rewarded Video* The video is watched for 2 seconds A click that takes the user directly to the app store Banners 100% of the ad unit is visible for 2 seconds A click that takes the user directly to the app store Interstitial Playable The ad unit is visible for 2 seconds A click that takes the user directly to the app store Rewarded Playable The playable element is completed A click that takes the user directly to the app store Standard video N/A N/A *This applies to SDK version 8.0 and above. For older SDK versions, a Rewarded Video view is fired at 70% video completion. ironSource Ad type View Click Interstitials and banners 100% of the ad unit is visible A click that takes the user directly to the app store Rewarded videos The video has started playing A click that takes the user directly to the app store Playable ads The playable element is launched A click that takes the user directly to the app store Standard video The video has started playing A click that takes the user directly to the app store Unity Ad type View Click Interstitials and banners N/A N/A Rewarded videos 100% of the video is watched* A click that takes the user directly to the app store Playable ads The ad unit is visible for 30 seconds, or a playable element is completed A click that takes the user directly to the app store Standard video 100% of the video is watched* A click that takes the user directly to the app store *In the Unity Ads dashboard, advertisers have an option to report a view either when the video starts, or after a 100% completion. MoPub Acquire Ad type View Click Interstitials and banners 100% of the ad unit is visible A click that takes the user directly to the app store Native 100% of the ad unit is visible A click that takes the user directly to the app store Rewarded videos The video has started playing A click that takes the user directly to the app store Standard videos The video has started playing A click that takes the user directly to the app store Rewarded playables The playable element is launched A click that takes the user directly to the app store Standard playables The playable element is launched A click that takes the user directly to the app store TikTok For Business Ad type View Click Video interstitial At least one pixel of the ad is on the screen A click that takes the user directly to the app store App Install ads will appear in the For Youfeed on TikTok. More information on TikTok For Business."
  },
  {
    "text": "At a glance: Send Braze message engagement events to AppsFlyer Audiences and use them to add precision to your audience definitions. By setting up an incoming connection between your Braze account and AppsFlyer Audiences, you bring your Braze message engagement event data into Audiences. You can then use this data in rulesets when defining audiences. Prerequisites Both the Braze and AppsFlyer SDKs must be integrated into your app. You must subscribe to the Currents feature in Braze. Set up the Braze incoming connection There are 3 main steps for setting up the Braze incoming connection: Set up the AppsFlyer SDK Create an incoming connection in AppsFlyer Create a Current in Braze Set up the AppsFlyer SDK To create an incoming connection from Braze, the AppsFlyer SDK in your apps must be configured to pass each user's Braze External ID to AppsFlyer. You can do this using either: Braze External ID parameter CUID field Using a Braze External ID parameter You can configure a dedicated parameter to pass the Braze External ID to AppsFlyer using the setPartnerData function of the AppsFlyer SDK. Usage examples follow: AndroidiOS Map<String, Object> brazeData = new HashMap<>(); partnerData.put(\"external_user_id\", \"some-braze-external-id-value\"); AppsFlyerLib.getInstance().setPartnerData(\"braze_int\", brazeData); NSDictionary *brazeInfo = @{ @\"external_user_id\":@\"some-braze-external-id-value\" }; [[AppsFlyerLib shared] setPartnerDataWithPartnerId:@\"braze_int\" partnerInfo:brazeInfo]; Using the CUID field There is no need to configure a dedicated parameter for the Braze External ID if: You have configured the SDK to send AppsFlyer a CUID for each user The CUID has the same value as the Braze External ID In this case, you can simply select the CUID option as the SDK parameter when creating your incoming Braze connection. Create an incoming Braze connection in AppsFlyer Follow these steps to create an incoming connection in AppsFlyer: Go to the Connections > Incoming tab in the Audiences dashboard. Click the New incoming connection button. Select Braze from the list of available partners. Click the Save button to create the connection.The Connection credentialsdialog opens. Copy the connection credentials to use when setting up the connection to AppsFlyer Audiences in the Braze platform: Access key ID Secret access key Bucket name Folder path Select the SDK parameter you are using to send the Braze External ID: Braze External ID CUID Create a Current in Braze Follow these steps to create a Current in Braze: Go to the Integration section of the left-side menu bar. Click Currents. Click the Create Current button. Select Amazon S3 Data Export. In the Create Currents Integrationsection: Enter a name for the Current (for example, AppsFlyer Audiences). Enter the email of someone on your team that Braze will notify in case of issues with the credentials for the Current. In the Credentials section: Keep the option for AWS Secret Access Key selected (this is the default value). Enter the credentials you copied from AppsFlyer in the appropriate fields. Keep the Enable Encryption option unchecked. Under General Settings, keep Include events from anonymous users checked. In the Message Engagement Events section, select the events you want Braze to send to AppsFlyer. See the list of supported events below. In the Customer Behavior and User Events section, keep the Track Customer Behavior and User Events option turned off. Click the Launch Current button to save the configuration and start sending Braze message engagement events to Audiences. supported events Supported Braze events Subscription Group State Change Email Click Email Open Email Send Email Delivery Email Mark as Spam Email Unsubscribe Email Bounce Email Soft Bounce Push Open Push Send Push Bounce iOS Foreground Push SMS/MMS Send Using Braze data in Audiences Once the Braze incoming connection is set up, the engagement events you've defined will appear as options in the ruleset filters for defining audiences. Note: It takes approximately 24 hours for the Braze message engagement events to be available in AppsFlyer after you launch the current in Braze."
  },
  {
    "text": "What's new Protect360 and ProtectLITE dashboards display fraud from organic sources Effective date December 20, 2021 Where Protect360 and ProtectLITE dashboards What Before the change: Fraud from organic sources was only available in raw data reports. After the change: Fraud for installs from organic sources is also displayed in the Protect360 and ProtectLITE dashboards. In-app event fraud from organic sources is not supported. What you must know Main dashboard filter: You can now filter by organic and/or non-organic traffic. Identified fraud trend chart: Can be filtered by source type organic. Estimated savings chart: Is not relevant for organic traffic. Hijacked installs attribution correction chart: Can display correction to organic, but not from organic. Identified fraud breakdown table: Includes data for organic traffic. Agencies and ad networks: Cannot view data for organic traffic. Recommended: Don't name owned media sources as organic, as they can be confused and interfere with genuine organic data."
  },
  {
    "text": "At a glance: A troubleshooting guide for AppsFlyer Web SDK added directly to your website or implemented via Google Tag Manager. SDK added directly You can add the SDK directly to your website. No data or partial data in the PBA dashboard Cause Solution Data takes up to 24 hours to display in People-Based Analysis dashboards after you implement the SDK. Wait 24 hours. If data is still not available, see additional causes in this document. Incorrect web dev key Web SDK uses the web dev key to identify web events sent in order to know which bundle to attribute data to. Verify that you are using the correct web dev key. Brand Bundle page You placed the web SDK in the body of the page You can put the web SDK in the body of the page, but this might affect the data that is sent to AppsFlyer. We recommend that you put it in the head section of the page. The web SDK is not placed on all pages on your website We recommend placing the web SDK on all pages of your website. Events are not sent Cause Solution Events are being sent before the web SDK loads up. In such cases the browser developer console shows the error: Uncaught ReferenceError: AF is not defined Verify that the web SDK is loaded before the code that sends events. Incorrect web dev key PBA requires a web dev key in order to know which bundle to attribute data to. Make sure that the correct web dev key is used. Verify that you are using the correct web dev key. Malformed events Make sure the event is well-formed. See available event parameters to learn more about well-formed events. SDK called twice Conflicting SDKs and libraries Many web SDKs make use of popular JavaScript libraries. Such SDKs also occupy names in the global scope. For example, our web SDK occupies AF as the main object that enables the web SDK. If some SDK makes use of library X version 1.2 and AppsFlyer SDK makes use of library X 2.1, the two libraries might conflict. If another SDK or library makes use of AF (in the global scope) as an object name, the two SDKs conflict, and one SDK might override the other. SDK added using Google Tag Manager Implementing the web SDK with the help of Google Tag Manager (GTM) can save you time. You can implement it independently and you don't have to rely on your web developer to add it to your website. If you come across issues. Apart from the issues described in the native implementation of the SDK, there are some possible issues specific to GTM. Calling the SDK Cause Solution Our Web SDK guide shows how to add the web SDK using a tag. Some users, when creating tags to call events, set the tag to also call the SDK tag again. But this might cause issues. The best approach is to set one tag to load the SDK and set this tag to fire on all pages. For any tags that send events, they should not call the SDK tag again. Tag priority GTM allows you to set tag priority. This means that you can control which tags are fired first. Cause Solution A tag that loads the SDK is set to lower priority than a tag that sends an event on page load. As a result, the SDK is not initialized in time to send the event. For the tag that loads the SDK, always set higher priority over tags that send events or identify users. Triggering tags In GTM, every tag has a trigger that determines when this tag should be fired. Cause Solution The trigger responsible for firing the tag that loads the SDK is not set to all pages. As a result, not all page visits are logged and some events are not sent. The best approach is to set an all-page views trigger for the tag that loads the SDK. The trigger responsible for firing tags that send events is not configured correctly. As a result, some events are not sent. Determine the conditions for the trigger. For example, an interaction with DOM elements like a click on a button a page visit to a page that has a certain path like /thank-you-page or /confirmation-page Publishing GTM containers Every change in GTM, like adding or editing tags and triggers, requires you to publish the GTM container for changes to take effect. If you use the web SDK using GTM but the SDK doesn't load or events are not sent, make sure to publish the GTM container."
  },
  {
    "text": "At a glance: Agency fee rules are part of the AppsFlyer Xpend premium feature that enables advertisers to add the percentage fees agencies charge for traffic so they can see the total campaign cost. Overview Agency fee rules are defined by the advertiser (with AppsFlyer account admin privileges) in the rule builder using customized conditions that add fee percentages to the cost of agency campaigns for specific apps and/or media sources. Xpend uses the agency fee rule to calculate the total ad cost with the fee, based on the ad network API and attribution link cost. The calculation applies at every granularity level (campaign, adset, etc.). The results are displayed in your dashboards, reports, and Cost ETL; not in the agency or ad network dashboards and reports. Note: Cost ETL reports have additional fields for agency fees. Agency rules help advertisers: Understand the real cost of their ad campaigns Save time and manual effort to report on cost data Manage agency performance Accurately analyze historical cost data Procedures See the sections that follow for instructions on how view, add, edit, and delete rules. All procedures require AppsFlyer admin privileges. View rule list To view all the agency fee rules created in your account: In AppsFlyer, go to Integration > Cost Control.The Cost Control screen displays, with the list of agency rules. Rules are categorized into the following possible statuses: Active: The rule startdate is today or earlier, and the rules have calculated fee data at least once. Inactive: The rule end date is in the past (meaning before today). Scheduled: There is data waiting to be processed. After creating a rule or editing the date/price, the rule is scheduled until it is processed and then it moves to Active or Inactive. Failed: The rule is failing to calculate for technical reasons. Filter the rules in the list using the filter options: Partner, App, and Media source. Add rule The rule builder user interface is designed for interactive rule building.Tip!Familiarize and experiment with the rule builder before reviewing this article in detail. To add a new rule: In AppsFlyer, go to Integration > Cost Control. Click + Add Agency fees rule.The Agency fees rule screen displays. Select a partner (agency). Choose one or more Apps or select All apps. If you select All apps, the rule applies to all your apps, including apps added to your account in the future. Select one or more media sources or check All media sources. If you check All media sources, the rule applies to all media sources, including those added in the future. If the agency you work with is non-transparent, the All media sources option is selected by default, and you cannot select a specific media source. If your selected app is not transparent, the media source drop-down remains disabled, unless, the app selected in the drop-down contains Facebook Ads or Twitter, as these are always transparent. Enter a start date. [Optional] Enter an end date. Enter the agency fee percentage fee. This can be a number between 100 and -100 (to reflect agency discounts or refunds). Click Create rule. Note The following errors can prevent your rule from being created: A mandatory field is not populated. To resolve, ensure that all the mandatory fields are populated. The rule logic conflicts with an existing rule. To resolve, change the app, or media source. Edit, duplicate, or delete a rule Considerations: When you edit or delete a rule, previously calculated data (up to 90 days in the past) gets overwritten: For an edited rule, the total cost reflects the updated agency percentage fee. For a deleted rule, the agency fee is removed from the total cost. To edit, duplicate, or delete a rule: In therule list, hover over the rule you want to edit, duplicate, or delete. Click Menu \u22ee on the right side. Select the action you want to perform. Note The agency and start date of a rule cannot be edited after the rule is created. If you need to change them, delete your old configuration, and create a new rule. Traits and limitations Traits and limitations Trait Remarks Agencies and ad networks Agencies and ad networks cannot view rules, or see the total ad cost data that results from agency fee rules in their dashboards and reports. Data freshness Intraday. Initial calculations can take up to 5 hours to display. Historical data Rules can be created and impact data up to 90 days in the past."
  },
  {
    "text": "At a glance: Follow the status of apps pending publishing to app stores from the AppsFlyer dashboard. When you add your new app to the AppsFlyer dashboard, you first choose whether the app is pending or already in the market. Pending apps in AppsFlyer look the same as live apps. They have accessible dashboards and all attribution measurement works for them. The only difference is the logo of the app which displays with the AppsFlyer logo instead of the actual app logo. What's happening? AppsFlyer automatically checks the status of the apps several times a day. If the app is still not live in the store when AppsFlyer checks the status of the app, the app appears as pending in the dashboard. Once the app is finally submitted to iTunes or Google, it updates to active and the app logo changes to the app's original logo. The status of the app in the dashboard has no effect on data collection and measurement. If the app is live on Google Play or App Store and users install the app and interact with it, install and in-app event data displays in the dashboard just the same. Refreshing the app status For the status of the app to change to active, AppsFlyer checks its status in the store. If you are certain that the app is published in Google Play or iTunes, but it still appears as pending in the dashboard, an admin can manually check its status. Prerequisite: Available to account admin. To manually update the app status: In the dashboard, clickMy Apps in the top right-hand corner. Next to the pending app, clickRefresh Status.If the status of the app is unchanged, the app is still displayed as Pending. If it has been updated, the status is shown as Live and the logo is updated. Store country Some apps are only available in Google Play or iTunes for certain countries. It is important that the correct country is set for an app in order for AppsFlyer to be able to check and update its status. iOS When you add an iOS app to your AppsFlyer dashboard, you choose the Apple Store country in which the app is published. If the wrong country is chosen, AppsFlyer is unable to update the status of the app even if it is published. To change the Apple Store country: In your app's dashboard click on App Settingsin the left-hand menu Under App Store Country choose the correct country Scroll down and click Save Settings If the app still appears as pending, click Refresh Status. Android When you add an Android app to your AppsFlyer dashboard, there is no option to choose a Google Play country and it is set to US by default. If your app is not published in the US Google Play store, it is important that the correct store is set for the app in order for AppsFlyer to be able to check and update the status of the app. To change the Google Play country: In your app's dashboard click on App Settingsin the left-hand menu Under App Store Country choose the correct country Scroll down and click Save Settings If the app still appears as pending, click Refresh Status."
  },
  {
    "text": "At a glance: Understand discrepancies between GMP and AppsFlyer. Related reading For a complete picture of working with Google Marketing Platform (GMP) in AppsFlyer, check out these articles: DV360/CM (DoubleClick)\u2014overview DV360/CM (DoubleClick)\u2014integration DV360/CM (DoubleClick)\u2014CM360 and media source DV360/CM (DoubleClick)\u2014DV360 DV360/CM (DoubleClick)\u2014agency integration DV360/CM (DoubleClick)\u2014discrepancies (this article) Discrepancy reasons See the following to learn about discrepancies and how you minimize them. Differences in attribution models Cause Description AppsFlyer's tip View-through attribution window View-through in DV360/CM360 attribution window is 14 days, while the AppsFlyer default window is 1-day. Set the view-through window in AppsFlyer to match the view-through set in DV360/CM360 set-up window. Incorrect floodlight parameters Working with incorrect floodlight parameters could cause issues with attribution. Make sure that the floodlight parameters are always correct when you set the integration with DV360/CM360. Multi-channel source attribution In AppsFlyer, the last media source that a click comes from gets attributed. A click can come from DV360/CM360, followed by a click from another media source. In such cases, GMP self-reports an install, but in AppsFlyer, the install goes to the other media source. In such cases, the AppsFlyer attribution decision is the one you should follow."
  },
  {
    "text": "At a glance: Automatically create the app code (native Android and iOS, Unity) for sending in-app events by defining the event names and content according to your business needs. Related reading For a complete picture of working with rich in-app events, be sure to read these articles: Rich in-app events\u2014Overview Rich in-app events\u2014Event structure Events dashboard Introduction In-app events are a major tool for app owners to measure the quality of their users coming from different sources based on the actions they take after app installation. Events are also often used for performing CPA-based marketing campaigns. However, more than one person is often involved in the definition and integration of in-app events into the apps. While the marketer/product manager defines the event set content according to business needs, one or more mobile developers are generally required to implement the in-app events API in their apps. AppsFlyer's In-app event generator solves the challenges inherent in this essential collaboration between marketer and developer. By using the In-app event generator marketers can: Use a pre-defined recommended set of events and parameters for their vertical. Add or remove pre-defined or customized events/parameters, descriptions, triggers, and examples for reference. Send auto-generated code to their Android and iOS mobile developers \u2013 saving days of work, redundant communication, and potential errors. Re-use their work if they later update events, add new events, or add new apps. Using the In-app event generator Use the In-app event generator to create an event set for a new app, or to update an existing set. Creating a new event set To create a new event set: Go to the In-app event generator and enter the name of your app. Select a vertical or import the event set of a similar app that was previously exported to a JSON file. Add or remove events and parameters, according to your business needs. Click the </> Code button to view and copy the generated code for your developers: Java (native Android), Obj-C/Swift (native iOS), or C# (Unity). Click Download .zip to save the event set for future use or for collaborating with devs and colleagues. Updating an existing event set To update an existing event set: Go to the In-app event generator. Import an event set of your app that was previously exported to a JSON file. Add or remove events and parameters, according to your business needs. Click the </> Code button to view and copy the generated code for your developers: Java (native Android), Obj-C/Swift (native iOS), or C# (Unity). Click Download .zip to save the event set for future use or for collaborating with devs and colleagues. Adding events To add a new event to the event set: Click the + Event button. The new event appears at the bottom of the event set. Select a predefined event from the suggested list of events (recommended), or click Custom to define your own event name. Verify that the event name doesn't already exist in the event set. Enter the purpose of the event, describing the business scenario. Enter the trigger action for the event, explaining the time in the user journey that the event should be sent. This explanation is added as a comment in the generated code for quick reference by the developers. [Optional] Add one or more parameters to the event. Adding parameters To add a new parameter to the event set: Click the + Add parameter button for the relevant event. Select a predefined parameter from the suggested list of parameters (recommended). Otherwise, click Custom to define your own parameter name and press Enter. Type one or more typical parameter values for reference. To help your developers, type a general description, field type, or the corresponding source for the parameter value in your app. This appears as a comment for each event parameter in the generated code. Note: Predefined naming allows automatic mapping of events and parameters to partners and is the recommended method."
  },
  {
    "text": "At a glance: Measure the quality of your users throughout their user journey by recording these suggested in-app events for your eWallet app. eWallet eWallet apps enable users to make digital payments or purchases from their devices. The typical events that we suggest recording include adding funds, viewing content, selecting merchants, viewing promotions, and completing transactions. Recording these events can help you determine: What type of content and promotions are popular with users, and then offer them similar or related products What are the most popular types of services users use eWallet for when making bill payments Which merchants are the most popular Important! Make sure to read the instructions for marketers about implementing in-app events. To streamline the implementation process, use our In-app event generator. This tool includes all of the typical in-app events described in this article and lets you modify the events according to your business needs. Once complete, share the file with your developer. For each recommended event included in this article, there are code samples for iOS, Android, and Unity developers. Detailed instructions for your developer can be found in the AppsFlyer developer hub. For more information about recording in-app events, see the Rich in-app events guide. Recommended structures for predefined events The following section provides a list of event structures that are typical to the eWallet vertical. Each structure includes a predefined event name and the suggested event parameters to use. Note that in-app events can include any event parameters that meet your business needs. Complete registration (af_complete_registration) Purpose Learn how many users installed the app and completed the signup process and what signup methods your users prefer. Trigger When the user completes the signup process Event parameters Name Description Example value af_registration_method Type of signup method Email, Facebook, Google Login (af_login) Purpose Understand the retention of your registered users Trigger When the user successfully logs in Event parameters Can be sent without any additional parameters Content view (af_content_view) Purpose Determine the view rate of specific content. This event can help you: Understand what type of content is most popular with your users, and then try to optimize your marketing campaigns Correlate item views with merchants Trigger When the user views a specific item or category content Event parameters Name Description Example value item Type of item cinema ticket merchant_name Name of merchant cineplex Recommended structures for custom events The following section provides a list of event structures that include custom event names and the suggested event parameters to use. Note that in-app events can include any event parameters that meet your business needs. Wallet complete top-up (wallet_complete_topup) Purpose Top-up funds can be used to buy any package or any other service offered inside the app. Record this event and compare it with other data to learn more about your users. For example, you can learn what amounts users are willing to deposit into their accounts and then use the top-up amounts to target them with customized campaigns within their budgets. Trigger When the user completes the top-up from their bank or credit card to the eWallet app Event parameters Name Description Example value top_up_amount Amount of payment 100 top_up_method Type of payment method bank transfer Payment transaction completed (payment_transaction_completed) Purpose This event can help you: Highlight users who completed payment on a transaction. Identify large transactions, and then retarget users who top-up with a large sum of money. Trigger When the transaction of a specific purchase is completed Event parameters Name Description Example value item Item paid for prepaid card reload quantity Amount paid 1 transaction_amount Amount of the transaction 50 Bill payment success (bill_payment_success) Purpose This event can help you determine the most popular type of service users use eWallet for when paying bills (for example, water bills, electricity bills, or credit card balances). Trigger When the user is using eWallet to make payments, such as bills, or credit card statements, or cinema tickets Event parameters Name Description Example value merchant_name Name of merchant Electricity provider payment_amount Amount paid 100 category Type of service Electricity Promo (promo) Purpose This event can help you determine: Whether the promotion being offered is popular with users Whether the promotion helps with cross-selling additional products to users Trigger When the user selects the promotion available within the app Event parameters Name Description Example value promo_type Type of promotion being offered 30% off Voucher redeem (voucher_redeem) Purpose This event can help you determine: How many users redeem promotional codes What sort of vouchers and discounts users prefer Trigger When a user promotion code is redeemed Event parameters Name Description Example value voucher_ID ID of the voucher 1735103 merchant_name Name of merchant cineplex Select merchant (select_merchant) Purpose This event can help you determine which merchant is the most popular and then use this data to try and get similar merchants to join the eWallet service. Trigger When the user selects a merchant from the list of available merchants Event parameters Name Description Example value merchant_name Name of merchant cineplex type Type of business cinema amount Currency used by the advertiser USD merchant_ID Specific ID attached to a business that tells the payment processing systems involved in a transaction where to send which funds 123456 Scan barcode success (scan_barcode_success) Purpose This event can help you: Understand when a user completes a specific transaction with a merchant Determine which merchants are the most popular Trigger When the user scans the QR code from each merchant that they visited using the eWallet app Event parameters Name Description Example value merchant_name Name of merchant cineplex merchant_ID Specific ID attached to a business that tells the payment processing systems involved in a transaction where to send which funds 123456"
  },
  {
    "text": "At a glance: Aggregate and raw data reports available via Data Locker Reports available via Data Locker for advertisers Related reading: Data Locker for Advertisers |Selecting the right raw data delivery tool Data type Report group Data Locker subscription required Raw User journey\u2014raw data Yes (2) Raw Protect360 Yes Raw People-Based Attribution (PBA) No (1) Raw Incrementality No (1) Raw SKAN No (1) Raw PredictSK analytics No (1) Raw Ad revenue Yes Raw CTV Yes Aggregated Cohort analytics No (1) Aggregated PredictSK analytics No (1) (1) If you don't have a Data Locker subscription, you must provide storage owned by you. (2) Except for Cross-platform engagements Report availability and subscription required Data freshness explanations The following contains an explanation of the data freshness terms referenced in the body of the article. Term Details 1-3 hours Report readiness: 95% of reports are ready and avaialble in the bucket within 1 hour of event occurrence. 99% of reports are ready and available in the bucket within 3 hours of even occurrence. Daily-uninstall Uninstall data are prepared daily. Usually available by 10:00-12:00 UTC. Most often written to the h=2 folder. Meaning the h=2 folder contains uninstalls reported on the previous day. However, the data may be written to a later folder; therefore your import process must read the data of all folders in the uninstall folder. Meaning h=1\u201324 and h=late. For example, the report for data generated during Monday is in the Tuesday h=2 folder. The data is available after 10:00 UTC on Tuesday. Daily+2 Ad revenue data is available after 2 days, meaning that data generated during Monday becomes available in the Monday h=23 folder after 06:00 UTC on Wednesday. Raw data reports User journey For a description of the report types, see user journey reports. Category Report type (topic) Data freshness Organic/Non-organic Unique to Data Locker User acquisition Clicks 1-3 hours N/A \u2713 Retargeting Clicks 1-3 hours N/A \u2713 User acquisition Impressions 1-3 hours N/A \u2713 Retargeting Impressions 1-3 hours N/A \u2713 User acquisition Installs 1-3 hours Both User acquisition In-app events 1-3 hours Both User acquisition Attributed ad revenue Daily+2 Non-organic User acquisition Organic ad revenue Daily+2 Organic Retargeting Retargeting ad revenue Daily+2 Non-organic Retargeting Conversions 1-3 hours Non-organic Retargeting In-app events 1-3 hours Non-organic Retargeting Sessions 1-3 hours Both \u2713 User acquisition Sessions 1-3 hours Both \u2713 User acquisition Uninstalls Daily-uninstall Non-organic User acquisition Organic uninstalls Daily-uninstall Organic Reinstalls Reinstalls 1-3 hours Non-organic Reinstalls Organic reinstalls 1-3 hours Organic User acquisition Cross-platform engagements Hourly Both \u2713 Protect360 See about Protect360 reports Protect360 reports Report type (topic) Data freshness Blocked installs 1-3 hours Blocked in-app events 1-3 hours Blocked clicks 1-3 hours Post-attribution installs Daily. Each day's report contains post-attribution installs reported on the previous day. For example, the report for data generated on Monday is in the Tuesday report. People-Based Attribution Data freshness Daily available 10-12 hours after the end of the previous day UTC. For example, data received on a Monday is processed after the end of the day and is available in the Monday h=23 folder. The data is available by 12:00 UTC on Tuesday Considerations The data of all PBA brand bundles in the account is always provided without considering the app filter. Data segregation by app isn't available. Report type (topic) Website visits Website events Website-assisted installs Conversion Paths Incrementality See Incrementality reports SKAN About SKAN raw data reports Data freshness Data is available on the day following the day the postback is received by AppsFlyer or the data reported to AppsFlyer by API Data is contained in the h=23 folder of the date the data is received by AppsFlyer. Example: If the postback was received on Monday, it is processed after the end of the day. Processing is completed, by 12:00 UTC Tuesday, the data is made available in the Monday h=23 folder. Report type (topic) Postbacks Postbacks copy (sent directly by iOS to AppsFlyer) Installs Redownloads In-app events SRN advertising dimensions PredictSK analytics Data freshness: Reports are written to the h=23 folder. The reports are typically available by 10:00-12:00 UTC in the h=23 folder of the preceding day. For example, the report for data generated during Monday is in the Monday h=23 folder. The data is available by 12:00 UTC on Tuesday. Report type (topic) Installs - raw data Redownloads - raw data Ad revenue See ad revenue raw data CTV See CTV reports Aggregated reports Cohort analytics Data freshness Reports are written to the h=23 folder. The reports are typically available by 10:00-12:00 UTC in the h=23 folder of the preceding day. Processing is completed, by 12:00 UTC Tuesday, the data is made available in the Monday folder and isn't placed in an h folder Report type (topic) Cohort unified Cohort user acquisition Cohort retargeting Predict Data freshness: Reports are written to the h=23 folder. The reports are typically available by 10:00-12:00 UTC in the h=23 folder of the preceding day. For example, the report for data generated on Monday is in the Monday h=23 folder. The data is available by 12:00 UTC on Tuesday. Report type (topic) Installs - aggregated Redownloads- aggregated"
  },
  {
    "text": "At a glance: If you have problems receiving postbacks, review the following solutions. Problem Solution I don't see my Advertiser's app under My Apps If the Advertiser's app doesn't appear under My Apps (from the top menu), reach out to the Advertiser and ask them to provide you with relevant permissions. Verify that the Activate partner toggle is enabled. Note: If you're running a test with a production application, make sure to register your device according to the instructions here. I'm not receiving install postbacks If there were no app installs, you won't see install postbacks. Check to see if your app has install attributions: go to My Apps > [Choose the app] > Overview. Check if the attribution link includes the parameter af_installpostback=false. Install postback isnot triggered if the attribution link has this parameter I'm not receiving in-app event postbacks Verify that the events are mapped correctlyon the integration tab, under the In-app event postbacks section Note: Event names are case sensitive and should be mapped using the same name as delivered via server-to-server/SDK. I'm not receiving both install and in-app event postbacks If there were no app installs, you won't see install postbacks. Check to see if your app has install attributions. Go to My Apps > [Choose the app] > Overview. Check Install/In-app event postback reports and review the following fields: Postback URL: The actual delivered postback. Check that the template doesn't miss any crucial values. Postback HTTP Response Code: The response code that AppsFlyer receives from the partner's server. Check the HTTP response code. If it's not 2XX, check your internal server setup. Original URL: The click/impression URL that AppsFlyer receives for the corresponding install/event. Check the completeness of the attribution link. Data not provided in the link can't be returned via a postback. Check Advanced Privacy settings: whenenabled, user-level data for non-consenting users running iOS 14.5+ is NOT available on postbacks. If the Advanced Privacy postback is not defined in your integration, but the advertiser decides to use Advanced Privacy, no postbacks are delivered for non-consenting iOS users. Check the Postback Window definition. Postbacks are not sent after the defined time period. Check if the conditional postback is defined. Check if the traffic is blocked: download and review the Blocked install postbacks report."
  }
]